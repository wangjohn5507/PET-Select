{"anchor": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! \n\nEvery day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.\n\nVasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.\n\nAccording to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.\n\n\n-----Input-----\n\nThe only line contains three integers b, d and s (0 \u2264 b, d, s \u2264 10^18,  b + d + s \u2265 1)\u00a0\u2014 the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. \n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the minimum possible number of meals which Vasiliy could have missed during his vacation. \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA frog lives on the axis Ox and needs to reach home which is in the point n. She starts from the point 1. The frog can jump to the right at a distance not more than d. So, after she jumped from the point x she can reach the point x + a, where a is an integer from 1 to d.\n\nFor each point from 1 to n is known if there is a lily flower in it. The frog can jump only in points with a lilies. Guaranteed that there are lilies in the points 1 and n.\n\nDetermine the minimal number of jumps that the frog needs to reach home which is in the point n from the point 1. Consider that initially the frog is in the point 1. If the frog can not reach home, print -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and d (2 \u2264 n \u2264 100, 1 \u2264 d \u2264 n - 1) \u2014 the point, which the frog wants to reach, and the maximal length of the frog jump.\n\nThe second line contains a string s of length n, consisting of zeros and ones. If a character of the string s equals to zero, then in the corresponding point there is no lily flower. In the other case, in the corresponding point there is a lily flower. Guaranteed that the first and the last characters of the string s equal to one.\n\n\n-----Output-----\n\nIf the frog can not reach the home, print -1.\n\nIn the other case, print the minimal number of jumps that the frog needs to reach the home which is in the point n from the point 1.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining two segments, using the first two as a guide:  [Image] \n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining four segments, using the first three as a guide:  [Image] \n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\n\n-----Input-----\n\nThe only line of input contains a single integer $n$ ($1 \\le n \\le 10^{9}$), the number of squares that Sofia wants to draw.\n\n\n-----Output-----\n\nPrint single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.\n\nYou want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) \u2014 the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer \u2014 maximum number of painted sections if you hire $q - 2$ painters.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\n\u041a\u0430\u0440\u0442\u0430 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u00a0\u2014 \u044d\u0442\u043e \u043b\u0438\u0431\u043e \u00ab.\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043d\u0435\u0431\u0430), \u043b\u0438\u0431\u043e \u00ab*\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0437\u0432\u0435\u0437\u0434\u0430). \n\n\u041d\u043e\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u044b \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043b\u0438\u0441\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0437\u0432\u0435\u0437\u0434\u044b. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWhile swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 9)\u00a0\u2014 the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.\n\nYou want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) \u2014 the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer \u2014 maximum number of painted sections if you hire $q - 2$ painters.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMelody Pond was stolen from her parents as a newborn baby by Madame Kovarian, to become a weapon of the Silence in their crusade against the Doctor. Madame Kovarian changed Melody's name to River Song, giving her a new identity that allowed her to kill the Eleventh Doctor.\n\nHeidi figured out that Madame Kovarian uses a very complicated hashing function in order to change the names of the babies she steals. In order to prevent this from happening to future Doctors, Heidi decided to prepare herself by learning some basic hashing techniques.\n\nThe first hashing function she designed is as follows.\n\nGiven two positive integers $(x, y)$ she defines $H(x,y):=x^2+2xy+x+1$.\n\nNow, Heidi wonders if the function is reversible. That is, given a positive integer $r$, can you find a pair $(x, y)$ (of positive integers) such that $H(x, y) = r$?\n\nIf multiple such pairs exist, output the one with smallest possible $x$. If there is no such pair, output \"NO\".\n\n\n-----Input-----\n\nThe first and only line contains an integer $r$ ($1 \\le r \\le 10^{12}$).\n\n\n-----Output-----\n\nOutput integers $x, y$ such that $H(x,y) = r$ and $x$ is smallest possible, or \"NO\" if no such pair exists.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.\n\nYou want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) \u2014 the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer \u2014 maximum number of painted sections if you hire $q - 2$ painters.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits\u00a0\u2014 lemons, apples and pears\u00a0\u2014 should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\n\n-----Input-----\n\nThe first line contains the positive integer a (1 \u2264 a \u2264 1000)\u00a0\u2014 the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 \u2264 b \u2264 1000)\u00a0\u2014 the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 \u2264 c \u2264 1000)\u00a0\u2014 the number of pears Nikolay has.\n\n\n-----Output-----\n\nPrint the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA frog lives on the axis Ox and needs to reach home which is in the point n. She starts from the point 1. The frog can jump to the right at a distance not more than d. So, after she jumped from the point x she can reach the point x + a, where a is an integer from 1 to d.\n\nFor each point from 1 to n is known if there is a lily flower in it. The frog can jump only in points with a lilies. Guaranteed that there are lilies in the points 1 and n.\n\nDetermine the minimal number of jumps that the frog needs to reach home which is in the point n from the point 1. Consider that initially the frog is in the point 1. If the frog can not reach home, print -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and d (2 \u2264 n \u2264 100, 1 \u2264 d \u2264 n - 1) \u2014 the point, which the frog wants to reach, and the maximal length of the frog jump.\n\nThe second line contains a string s of length n, consisting of zeros and ones. If a character of the string s equals to zero, then in the corresponding point there is no lily flower. In the other case, in the corresponding point there is a lily flower. Guaranteed that the first and the last characters of the string s equal to one.\n\n\n-----Output-----\n\nIf the frog can not reach the home, print -1.\n\nIn the other case, print the minimal number of jumps that the frog needs to reach the home which is in the point n from the point 1.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\n\n-----Input-----\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 5), where a_{i} is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 5), where b_{i} is academic performance of the i-th student of the group B.\n\n\n-----Output-----\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he has a positive integer $n$. He wants to split $n$ into $3$ positive integers $a,b,c$, such that $a+b+c=n$ and none of the $3$ integers is a multiple of $3$. Help him to find a solution.\n\n\n-----Input-----\n\nA single line containing one integer $n$ ($3 \\leq n \\leq 10^9$) \u2014 the integer Little C has.\n\n\n-----Output-----\n\nPrint $3$ positive integers $a,b,c$ in a single line, such that $a+b+c=n$ and none of them is a multiple of $3$.\n\nIt can be proved that there is at least one solution. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLuba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). \n\nYour task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5). Next n lines contain four integers each, describing a single rectangle: x_1, y_1, x_2, y_2 (0 \u2264 x_1 < x_2 \u2264 31400, 0 \u2264 y_1 < y_2 \u2264 31400) \u2014 x_1 and x_2 are x-coordinates of the left and right edges of the rectangle, and y_1 and y_2 are y-coordinates of the bottom and top edges of the rectangle. \n\nNo two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).\n\n\n-----Output-----\n\nIn a single line print \"YES\", if the given rectangles form a square, or \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given two lists of non-zero digits.\n\nLet's call an integer pretty if its (base 10) representation has at least one digit from the first list and at least one digit from the second list. What is the smallest positive pretty integer?\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 9) \u2014 the lengths of the first and the second lists, respectively.\n\nThe second line contains n distinct digits a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 9) \u2014 the elements of the first list.\n\nThe third line contains m distinct digits b_1, b_2, ..., b_{m} (1 \u2264 b_{i} \u2264 9) \u2014 the elements of the second list.\n\n\n-----Output-----\n\nPrint the smallest pretty integer.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLuba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nArray of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nEach evening after the dinner the SIS's students gather together to play the game of Sport Mafia. \n\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner. To do that, she performs $n$ actions. The first action performed is to put a single candy into the box. For each of the remaining moves she can choose from two options:\n\n  the first option, in case the box contains at least one candy, is to take exactly one candy out and eat it. This way the number of candies in the box decreased by $1$;  the second option is to put candies in the box. In this case, Alya will put $1$ more candy, than she put in the previous time. \n\nThus, if the box is empty, then it can only use the second option.\n\nFor example, one possible sequence of Alya's actions look as follows:\n\n  put one candy into the box;  put two candies into the box;  eat one candy from the box;  eat one candy from the box;  put three candies into the box;  eat one candy from the box;  put four candies into the box;  eat one candy from the box;  put five candies into the box; \n\nThis way she will perform $9$ actions, the number of candies at the end will be $11$, while Alya will eat $4$ candies in total.\n\nYou know the total number of actions $n$ and the number of candies at the end $k$. You need to find the total number of sweets Alya ate. That is the number of moves of the first option. It's guaranteed, that for the given $n$ and $k$ the answer always exists.\n\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^9$; $0 \\le k \\le 10^9$)\u00a0\u2014 the total number of moves and the number of candies in the box at the end. \n\nIt's guaranteed, that for the given $n$ and $k$ the answer exists.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of candies, which Alya ate. Please note, that in this problem there aren't multiple possible answers\u00a0\u2014 the answer is unique for any input data. \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLuba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYear 2118. Androids are in mass production for decades now, and they do all the work for humans. But androids have to go to school to be able to solve creative tasks. Just like humans before.\n\nIt turns out that high school struggles are not gone. If someone is not like others, he is bullied. Vasya-8800 is an economy-class android which is produced by a little-known company. His design is not perfect, his characteristics also could be better. So he is bullied by other androids.\n\nOne of the popular pranks on Vasya is to force him to compare $x^y$ with $y^x$. Other androids can do it in milliseconds while Vasya's memory is too small to store such big numbers.\n\nPlease help Vasya! Write a fast program to compare $x^y$ with $y^x$ for Vasya, maybe then other androids will respect him.\n\n\n-----Input-----\n\nOn the only line of input there are two integers $x$ and $y$ ($1 \\le x, y \\le 10^{9}$).\n\n\n-----Output-----\n\nIf $x^y < y^x$, then print '<' (without quotes). If $x^y > y^x$, then print '>' (without quotes). If $x^y = y^x$, then print '=' (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 \u2264 |s| \u2264 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining two segments, using the first two as a guide:  [Image] \n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining four segments, using the first three as a guide:  [Image] \n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\n\n-----Input-----\n\nThe only line of input contains a single integer $n$ ($1 \\le n \\le 10^{9}$), the number of squares that Sofia wants to draw.\n\n\n-----Output-----\n\nPrint single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 \u2264 |s| \u2264 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's consider equation:x^2 + s(x)\u00b7x - n = 0,  \n\nwhere x, n are positive integers, s(x) is the function, equal to the sum of digits of number x in the decimal number system.\n\nYou are given an integer n, find the smallest positive integer root of equation x, or else determine that there are no such roots.\n\n\n-----Input-----\n\nA single line contains integer n (1 \u2264 n \u2264 10^18) \u2014 the equation parameter.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier. \n\n\n-----Output-----\n\nPrint -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer x (x > 0), that the equation given in the statement holds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied:   the i-th letter occurs in the string no more than a_{i} times;  the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2  \u2264  n  \u2264  26)\u00a0\u2014 the number of letters in the alphabet.\n\nThe next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 \u2264 |s| \u2264 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given a sequence a_1, a_2, ..., a_{n} of one-dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment a_{i} lies within segment a_{j}.\n\nSegment [l_1, r_1] lies within segment [l_2, r_2] iff l_1 \u2265 l_2 and r_1 \u2264 r_2.\n\nPrint indices i and j. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of segments.\n\nEach of the next n lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9) \u2014 the i-th segment.\n\n\n-----Output-----\n\nPrint two distinct indices i and j such that segment a_{i} lies within segment a_{j}. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAlice and Bob play 5-in-a-row game. They have a playing field of size 10 \u00d7 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.\n\nIn current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.\n\nAlice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.\n\n\n-----Input-----\n\nYou are given matrix 10 \u00d7 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won.\n\n\n-----Output-----\n\nPrint 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThose days, many boys use beautiful girls' photos as avatars in forums. So it is pretty hard to tell the gender of a user at the first glance. Last year, our hero went to a forum and had a nice chat with a beauty (he thought so). After that they talked very often and eventually they became a couple in the network. \n\nBut yesterday, he came to see \"her\" in the real world and found out \"she\" is actually a very strong man! Our hero is very sad and he is too tired to love again now. So he came up with a way to recognize users' genders by their user names.\n\nThis is his method: if the number of distinct characters in one's user name is odd, then he is a male, otherwise she is a female. You are given the string that denotes the user name, please help our hero to determine the gender of this user by his method.\n\n\n-----Input-----\n\nThe first line contains a non-empty string, that contains only lowercase English letters \u2014 the user name. This string contains at most 100 letters.\n\n\n-----Output-----\n\nIf it is a female by our hero's method, print \"CHAT WITH HER!\" (without the quotes), otherwise, print \"IGNORE HIM!\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAlice and Bob play 5-in-a-row game. They have a playing field of size 10 \u00d7 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.\n\nIn current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.\n\nAlice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.\n\n\n-----Input-----\n\nYou are given matrix 10 \u00d7 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won.\n\n\n-----Output-----\n\nPrint 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAlice and Bob play 5-in-a-row game. They have a playing field of size 10 \u00d7 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.\n\nIn current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.\n\nAlice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.\n\n\n-----Input-----\n\nYou are given matrix 10 \u00d7 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won.\n\n\n-----Output-----\n\nPrint 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya came to her informatics lesson, and her teacher who is, by the way, a little bit famous here gave her the following task.\n\nTwo matrices $A$ and $B$ are given, each of them has size $n \\times m$. Nastya can perform the following operation to matrix $A$ unlimited number of times:   take any square square submatrix of $A$ and transpose it (i.e. the element of the submatrix which was in the $i$-th row and $j$-th column of the submatrix will be in the $j$-th row and $i$-th column after transposing, and the transposed submatrix itself will keep its place in the matrix $A$). \n\nNastya's task is to check whether it is possible to transform the matrix $A$ to the matrix $B$.\n\n $\\left. \\begin{array}{|c|c|c|c|c|c|c|c|} \\hline 6 & {3} & {2} & {11} \\\\ \\hline 5 & {9} & {4} & {2} \\\\ \\hline 3 & {3} & {3} & {3} \\\\ \\hline 4 & {8} & {2} & {2} \\\\ \\hline 7 & {8} & {6} & {4} \\\\ \\hline \\end{array} \\right.$ Example of the operation \n\nAs it may require a lot of operations, you are asked to answer this question for Nastya.\n\nA square submatrix of matrix $M$ is a matrix which consist of all elements which comes from one of the rows with indeces $x, x+1, \\dots, x+k-1$ of matrix $M$ and comes from one of the columns with indeces $y, y+1, \\dots, y+k-1$ of matrix $M$. $k$ is the size of square submatrix. In other words, square submatrix is the set of elements of source matrix which form a solid square (i.e. without holes).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ separated by space ($1 \\leq n, m \\leq 500$)\u00a0\u2014 the numbers of rows and columns in $A$ and $B$ respectively.\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $A$ ($1 \\leq A_{ij} \\leq 10^{9}$).\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $B$ ($1 \\leq B_{ij} \\leq 10^{9}$).\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if it is possible to transform $A$ to $B$ and \"NO\" (without quotes) otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nCarl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?\n\n\n-----Input-----\n\nThe first line of the input contains three integers a, b and c (0 \u2264 a, b, c \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that are in the magician's disposal.\n\nThe second line of the input contains three integers, x, y and z (0 \u2264 x, y, z \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that he needs to get.\n\n\n-----Output-----\n\nIf the wizard is able to obtain the required numbers of spheres, print \"Yes\". Otherwise, print \"No\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nKevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\n\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is $\\operatorname{max}(0.3 x,(1 - \\frac{m}{250}) x - 50 w)$. His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\n\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\n\n\n-----Input-----\n\nThe first line of the input contains five space-separated integers m_1, m_2, m_3, m_4, m_5, where m_{i} (0 \u2264 m_{i} \u2264 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w_1, w_2, w_3, w_4, w_5, where w_{i} (0 \u2264 w_{i} \u2264 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers h_{s} and h_{u} (0 \u2264 h_{s}, h_{u} \u2264 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the value of Kevin's final score.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 \u00d7 b_1 rectangle, the paintings have shape of a a_2 \u00d7 b_2 and a_3 \u00d7 b_3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\n\n-----Input-----\n\nThe first line contains two space-separated numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.\n\n\n-----Output-----\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOn the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings\u00a0\u2014 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of days in a year on Mars.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum possible and the maximum possible number of days off per year on Mars.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGalois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named \u00abPawnChess\u00bb.\n\nThis new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.  $8$ \n\nLets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r, c) the cell located at the row r and at the column c.\n\nThere are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.\n\nPlayer A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.\n\nMoving upward means that the pawn located in (r, c) will go to the cell (r - 1, c), while moving down means the pawn located in (r, c) will go to the cell (r + 1, c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.\n\nGiven the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.\n\n\n-----Input-----\n\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'. \n\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.\n\n\n-----Output-----\n\nPrint 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp has created his own training plan to prepare for the programming contests. He will train for $n$ days, all days are numbered from $1$ to $n$, beginning from the first.\n\nOn the $i$-th day Polycarp will necessarily solve $a_i$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 200\\,000$) \u2014 the number of days to prepare for the programming contests.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10\\,000$), where $a_i$ equals to the number of problems, which Polycarp will solve on the $i$-th day.\n\n\n-----Output-----\n\nPrint the index of the day when Polycarp will celebrate the equator.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\n\nAll levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\n\nPolycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\n\nSo he peeked at the stats $n$ times and wrote down $n$ pairs of integers \u2014 $(p_1, c_1), (p_2, c_2), \\dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n\nBetween two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\n\nFinally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\n\nHelp him to check the correctness of his records.\n\nFor your convenience you have to answer multiple independent test cases.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 500)$ \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of moments of time Polycarp peeked at the stats.\n\nEach of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \\le p_i, c_i \\le 1000$) \u2014 the number of plays and the number of clears of the level at the $i$-th moment of time.\n\nNote that the stats are given in chronological order.\n\n\n-----Output-----\n\nFor each test case print a single line.\n\nIf there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \"YES\".\n\nOtherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe flag of Berland is such rectangular field n \u00d7 m that satisfies following conditions:\n\n  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. \n\nYou are given a field n \u00d7 m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the field.\n\nEach of the following n lines consisting of m characters 'R', 'G' and 'B' \u2014 the description of the field.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAllen has a LOT of money. He has $n$ dollars in the bank. For security reasons, he wants to withdraw it in cash (we will not disclose the reasons here). The denominations for dollar bills are $1$, $5$, $10$, $20$, $100$. What is the minimum number of bills Allen could receive after withdrawing his entire balance?\n\n\n-----Input-----\n\nThe first and only line of input contains a single integer $n$ ($1 \\le n \\le 10^9$).\n\n\n-----Output-----\n\nOutput the minimum number of bills that Allen could receive.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe flag of Berland is such rectangular field n \u00d7 m that satisfies following conditions:\n\n  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. \n\nYou are given a field n \u00d7 m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the field.\n\nEach of the following n lines consisting of m characters 'R', 'G' and 'B' \u2014 the description of the field.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nToday's morning was exceptionally snowy. Meshanya decided to go outside and noticed a huge snowball rolling down the mountain! Luckily, there are two stones on that mountain.\n\nInitially, snowball is at height $h$ and it has weight $w$. Each second the following sequence of events happens: snowball's weights increases by $i$, where $i$\u00a0\u2014 is the current height of snowball, then snowball hits the stone (if it's present at the current height), then snowball moves one meter down. If the snowball reaches height zero, it stops.\n\nThere are exactly two stones on the mountain. First stone has weight $u_1$ and is located at height $d_1$, the second one\u00a0\u2014 $u_2$ and $d_2$ respectively. When the snowball hits either of two stones, it loses weight equal to the weight of that stone. If after this snowball has negative weight, then its weight becomes zero, but the snowball continues moving as before. [Image] \n\nFind the weight of the snowball when it stops moving, that is, it reaches height\u00a00.\n\n\n-----Input-----\n\nFirst line contains two integers $w$ and $h$\u00a0\u2014 initial weight and height of the snowball ($0 \\le w \\le 100$; $1 \\le h \\le 100$).\n\nSecond line contains two integers $u_1$ and $d_1$\u00a0\u2014 weight and height of the first stone ($0 \\le u_1 \\le 100$; $1 \\le d_1 \\le h$).\n\nThird line contains two integers $u_2$ and $d_2$\u00a0\u2014 weight and heigth of the second stone ($0 \\le u_2 \\le 100$; $1 \\le d_2 \\le h$; $d_1 \\ne d_2$). Notice that stones always have different heights.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 final weight of the snowball after it reaches height\u00a00.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe flag of Berland is such rectangular field n \u00d7 m that satisfies following conditions:\n\n  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. \n\nYou are given a field n \u00d7 m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the field.\n\nEach of the following n lines consisting of m characters 'R', 'G' and 'B' \u2014 the description of the field.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThere are three friend living on the straight line Ox in Lineland. The first friend lives at the point x_1, the second friend lives at the point x_2, and the third friend lives at the point x_3. They plan to celebrate the New Year together, so they need to meet at one point. What is the minimum total distance they have to travel in order to meet at some point and celebrate the New Year?\n\nIt's guaranteed that the optimal answer is always integer.\n\n\n-----Input-----\n\nThe first line of the input contains three distinct integers x_1, x_2 and x_3 (1 \u2264 x_1, x_2, x_3 \u2264 100)\u00a0\u2014 the coordinates of the houses of the first, the second and the third friends respectively. \n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum total distance the friends need to travel in order to meet together.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOn the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings\u00a0\u2014 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of days in a year on Mars.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum possible and the maximum possible number of days off per year on Mars.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nEach evening after the dinner the SIS's students gather together to play the game of Sport Mafia. \n\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner. To do that, she performs $n$ actions. The first action performed is to put a single candy into the box. For each of the remaining moves she can choose from two options:\n\n  the first option, in case the box contains at least one candy, is to take exactly one candy out and eat it. This way the number of candies in the box decreased by $1$;  the second option is to put candies in the box. In this case, Alya will put $1$ more candy, than she put in the previous time. \n\nThus, if the box is empty, then it can only use the second option.\n\nFor example, one possible sequence of Alya's actions look as follows:\n\n  put one candy into the box;  put two candies into the box;  eat one candy from the box;  eat one candy from the box;  put three candies into the box;  eat one candy from the box;  put four candies into the box;  eat one candy from the box;  put five candies into the box; \n\nThis way she will perform $9$ actions, the number of candies at the end will be $11$, while Alya will eat $4$ candies in total.\n\nYou know the total number of actions $n$ and the number of candies at the end $k$. You need to find the total number of sweets Alya ate. That is the number of moves of the first option. It's guaranteed, that for the given $n$ and $k$ the answer always exists.\n\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^9$; $0 \\le k \\le 10^9$)\u00a0\u2014 the total number of moves and the number of candies in the box at the end. \n\nIt's guaranteed, that for the given $n$ and $k$ the answer exists.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of candies, which Alya ate. Please note, that in this problem there aren't multiple possible answers\u00a0\u2014 the answer is unique for any input data. \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasya has a pile, that consists of some number of stones. $n$ times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\n\nYou are given $n$ operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\n\n\n-----Input-----\n\nThe first line contains one positive integer $n$\u00a0\u2014 the number of operations, that have been made by Vasya ($1 \\leq n \\leq 100$).\n\nThe next line contains the string $s$, consisting of $n$ symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on $i$-th operation, $s_i$ is equal to \"-\" (without quotes), if added, $s_i$ is equal to \"+\" (without quotes).\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimal possible number of stones that can be in the pile after these $n$ operations.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSomeone gave Alyona an array containing n positive integers a_1, a_2, ..., a_{n}. In one operation, Alyona can choose any element of the array and decrease it, i.e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all.\n\nFormally, after applying some operations Alyona will get an array of n positive integers b_1, b_2, ..., b_{n} such that 1 \u2264 b_{i} \u2264 a_{i} for every 1 \u2264 i \u2264 n. Your task is to determine the maximum possible value of mex of this array.\n\nMex of an array in this problem is the minimum positive integer that doesn't appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of elements in the Alyona's array.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint one positive integer\u00a0\u2014 the maximum possible value of mex of the array after Alyona applies some (possibly none) operations.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nTop-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.\n\nHer problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.\n\n\n-----Input-----\n\nIn the only line given a non-empty binary string s with length up to 100.\n\n\n-----Output-----\n\nPrint \u00abyes\u00bb (without quotes) if it's possible to remove digits required way and \u00abno\u00bb otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he has a positive integer $n$. He wants to split $n$ into $3$ positive integers $a,b,c$, such that $a+b+c=n$ and none of the $3$ integers is a multiple of $3$. Help him to find a solution.\n\n\n-----Input-----\n\nA single line containing one integer $n$ ($3 \\leq n \\leq 10^9$) \u2014 the integer Little C has.\n\n\n-----Output-----\n\nPrint $3$ positive integers $a,b,c$ in a single line, such that $a+b+c=n$ and none of them is a multiple of $3$.\n\nIt can be proved that there is at least one solution. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVitya has just started learning Berlanese language. It is known that Berlanese uses the Latin alphabet. Vowel letters are \"a\", \"o\", \"u\", \"i\", and \"e\". Other letters are consonant.\n\nIn Berlanese, there has to be a vowel after every consonant, but there can be any letter after any vowel. The only exception is a consonant \"n\"; after this letter, there can be any letter (not only a vowel) or there can be no letter at all. For example, the words \"harakiri\", \"yupie\", \"man\", and \"nbo\" are Berlanese while the words \"horse\", \"king\", \"my\", and \"nz\" are not.\n\nHelp Vitya find out if a word $s$ is Berlanese.\n\n\n-----Input-----\n\nThe first line of the input contains the string $s$ consisting of $|s|$ ($1\\leq |s|\\leq 100$) lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if there is a vowel after every consonant except \"n\", otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.\n\nYou may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \\times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \\le x < n$ and $1 \\le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.\n\nYour goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.\n\nIs it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n, m \\le 50$).\n\nThen $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.\n\n\n-----Output-----\n\nIf it is impossible to make $B$ equal to $A$, print one integer $-1$.\n\nOtherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ \u2014 the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \\le k \\le 2500$ should hold.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nTop-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.\n\nHer problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.\n\n\n-----Input-----\n\nIn the only line given a non-empty binary string s with length up to 100.\n\n\n-----Output-----\n\nPrint \u00abyes\u00bb (without quotes) if it's possible to remove digits required way and \u00abno\u00bb otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him t_{j} minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.\n\nBy solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.\n\nPolycarp has M minutes of time. What is the maximum number of points he can earn?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, k and M (1 \u2264 n \u2264 45, 1 \u2264 k \u2264 45, 0 \u2264 M \u2264 2\u00b710^9).\n\nThe second line contains k integer numbers, values t_{j} (1 \u2264 t_{j} \u2264 1000000), where t_{j} is the time in minutes required to solve j-th subtask of any task.\n\n\n-----Output-----\n\nPrint the maximum amount of points Polycarp can earn in M minutes.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya came to her informatics lesson, and her teacher who is, by the way, a little bit famous here gave her the following task.\n\nTwo matrices $A$ and $B$ are given, each of them has size $n \\times m$. Nastya can perform the following operation to matrix $A$ unlimited number of times:   take any square square submatrix of $A$ and transpose it (i.e. the element of the submatrix which was in the $i$-th row and $j$-th column of the submatrix will be in the $j$-th row and $i$-th column after transposing, and the transposed submatrix itself will keep its place in the matrix $A$). \n\nNastya's task is to check whether it is possible to transform the matrix $A$ to the matrix $B$.\n\n $\\left. \\begin{array}{|c|c|c|c|c|c|c|c|} \\hline 6 & {3} & {2} & {11} \\\\ \\hline 5 & {9} & {4} & {2} \\\\ \\hline 3 & {3} & {3} & {3} \\\\ \\hline 4 & {8} & {2} & {2} \\\\ \\hline 7 & {8} & {6} & {4} \\\\ \\hline \\end{array} \\right.$ Example of the operation \n\nAs it may require a lot of operations, you are asked to answer this question for Nastya.\n\nA square submatrix of matrix $M$ is a matrix which consist of all elements which comes from one of the rows with indeces $x, x+1, \\dots, x+k-1$ of matrix $M$ and comes from one of the columns with indeces $y, y+1, \\dots, y+k-1$ of matrix $M$. $k$ is the size of square submatrix. In other words, square submatrix is the set of elements of source matrix which form a solid square (i.e. without holes).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ separated by space ($1 \\leq n, m \\leq 500$)\u00a0\u2014 the numbers of rows and columns in $A$ and $B$ respectively.\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $A$ ($1 \\leq A_{ij} \\leq 10^{9}$).\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $B$ ($1 \\leq B_{ij} \\leq 10^{9}$).\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if it is possible to transform $A$ to $B$ and \"NO\" (without quotes) otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\n\n-----Input-----\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 10^6.\n\n\n-----Output-----\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining two segments, using the first two as a guide:  [Image] \n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining four segments, using the first three as a guide:  [Image] \n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\n\n-----Input-----\n\nThe only line of input contains a single integer $n$ ($1 \\le n \\le 10^{9}$), the number of squares that Sofia wants to draw.\n\n\n-----Output-----\n\nPrint single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPolycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 \u2264 n \u2264 2 000 000 000, 1 \u2264 k \u2264 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w \u2014 the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA one-dimensional Japanese crossword can be represented as a binary string of length x. An encoding of this crossword is an array a of size n, where n is the number of segments formed completely of 1's, and a_{i} is the length of i-th segment. No two segments touch or intersect.\n\nFor example:   If x = 6 and the crossword is 111011, then its encoding is an array {3, 2};  If x = 8 and the crossword is 01101010, then its encoding is an array {2, 1, 1};  If x = 5 and the crossword is 11111, then its encoding is an array {5};  If x = 5 and the crossword is 00000, then its encoding is an empty array. \n\nMishka wants to create a new one-dimensional Japanese crossword. He has already picked the length and the encoding for this crossword. And now he needs to check if there is exactly one crossword such that its length and encoding are equal to the length and encoding he picked. Help him to check it!\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and x (1 \u2264 n \u2264 100000, 1 \u2264 x \u2264 10^9) \u2014 the number of elements in the encoding and the length of the crossword Mishka picked.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10000) \u2014 the encoding.\n\n\n-----Output-----\n\nPrint YES if there exists exaclty one crossword with chosen length and encoding. Otherwise, print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPolycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 \u2264 n \u2264 2 000 000 000, 1 \u2264 k \u2264 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w \u2014 the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have two friends. You want to present each of them several positive integers. You want to present cnt_1 numbers to the first friend and cnt_2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\n\n-----Input-----\n\nThe only line contains four positive integers cnt_1, cnt_2, x, y (1 \u2264 cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4)\u00a0\u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou might have heard about the next game in Lara Croft series coming out this year. You also might have watched its trailer. Though you definitely missed the main idea about its plot, so let me lift the veil of secrecy.\n\nLara is going to explore yet another dangerous dungeon. Game designers decided to use good old 2D environment. The dungeon can be represented as a rectangle matrix of n rows and m columns. Cell (x, y) is the cell in the x-th row in the y-th column. Lara can move between the neighbouring by side cells in all four directions.\n\nMoreover, she has even chosen the path for herself to avoid all the traps. She enters the dungeon in cell (1, 1), that is top left corner of the matrix. Then she goes down all the way to cell (n, 1) \u2014 the bottom left corner. Then she starts moving in the snake fashion \u2014 all the way to the right, one cell up, then to the left to the cell in 2-nd column, one cell up. She moves until she runs out of non-visited cells. n and m given are such that she always end up in cell (1, 2).\n\nLara has already moved to a neighbouring cell k times. Can you determine her current position?\n\n\n-----Input-----\n\nThe only line contains three integers n, m and k (2 \u2264 n, m \u2264 10^9, n is always even, 0 \u2264 k < n\u00b7m). Note that k doesn't fit into 32-bit integer type!\n\n\n-----Output-----\n\nPrint the cell (the row and the column where the cell is situated) where Lara ends up after she moves k times.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPolycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 \u2264 n \u2264 2 000 000 000, 1 \u2264 k \u2264 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w \u2014 the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.\n\nWhat is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.\n\n\n-----Input-----\n\nThe only line contains 4 integers n, a, b, c (1 \u2264 n, a, b, c \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOn the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nTop-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.\n\nHer problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.\n\n\n-----Input-----\n\nIn the only line given a non-empty binary string s with length up to 100.\n\n\n-----Output-----\n\nPrint \u00abyes\u00bb (without quotes) if it's possible to remove digits required way and \u00abno\u00bb otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOn the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe circle line of the Roflanpolis subway has $n$ stations.\n\nThere are two parallel routes in the subway. The first one visits stations in order $1 \\to 2 \\to \\ldots \\to n \\to 1 \\to 2 \\to \\ldots$ (so the next stop after station $x$ is equal to $(x+1)$ if $x < n$ and $1$ otherwise). The second route visits stations in order $n \\to (n-1) \\to \\ldots \\to 1 \\to n \\to (n-1) \\to \\ldots$ (so the next stop after station $x$ is equal to $(x-1)$ if $x>1$ and $n$ otherwise). All trains depart their stations simultaneously, and it takes exactly $1$ minute to arrive at the next station.\n\nTwo toads live in this city, their names are Daniel and Vlad.\n\nDaniel is currently in a train of the first route at station $a$ and will exit the subway when his train reaches station $x$.\n\nCoincidentally, Vlad is currently in a train of the second route at station $b$ and he will exit the subway when his train reaches station $y$.\n\nSurprisingly, all numbers $a,x,b,y$ are distinct.\n\nToad Ilya asks you to check if Daniel and Vlad will ever be at the same station at the same time during their journey. In other words, check if there is a moment when their trains stop at the same station. Note that this includes the moments when Daniel or Vlad enter or leave the subway.\n\n\n-----Input-----\n\nThe first line contains five space-separated integers $n$, $a$, $x$, $b$, $y$ ($4 \\leq n \\leq 100$, $1 \\leq a, x, b, y \\leq n$, all numbers among $a$, $x$, $b$, $y$ are distinct)\u00a0\u2014 the number of stations in Roflanpolis, Daniel's start station, Daniel's finish station, Vlad's start station and Vlad's finish station, respectively.\n\n\n-----Output-----\n\nOutput \"YES\" if there is a time moment when Vlad and Daniel are at the same station, and \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOn the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWinnie-the-Pooh likes honey very much! That is why he decided to visit his friends. Winnie has got three best friends: Rabbit, Owl and Eeyore, each of them lives in his own house. There are winding paths between each pair of houses. The length of a path between Rabbit's and Owl's houses is a meters, between Rabbit's and Eeyore's house is b meters, between Owl's and Eeyore's house is c meters.\n\nFor enjoying his life and singing merry songs Winnie-the-Pooh should have a meal n times a day. Now he is in the Rabbit's house and has a meal for the first time. Each time when in the friend's house where Winnie is now the supply of honey is about to end, Winnie leaves that house. If Winnie has not had a meal the required amount of times, he comes out from the house and goes to someone else of his two friends. For this he chooses one of two adjacent paths, arrives to the house on the other end and visits his friend. You may assume that when Winnie is eating in one of his friend's house, the supply of honey in other friend's houses recover (most probably, they go to the supply store).\n\nWinnie-the-Pooh does not like physical activity. He wants to have a meal n times, traveling minimum possible distance. Help him to find this distance.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 distance between Rabbit's and Owl's houses.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 distance between Rabbit's and Eeyore's houses.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 distance between Owl's and Eeyore's houses.\n\n\n-----Output-----\n\nOutput one number\u00a0\u2014 minimum distance in meters Winnie must go through to have a meal n times.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.\n\nThe three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.\n\nA random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.\n\nThe rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.\n\nCould you find out who is going to be the winner if they all play optimally?\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($0 \\leq n \\leq 10^{9}$)\u00a0\u2014 the number of turns.\n\nNext 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.\n\n\n-----Output-----\n\nPrint the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied:   the i-th letter occurs in the string no more than a_{i} times;  the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2  \u2264  n  \u2264  26)\u00a0\u2014 the number of letters in the alphabet.\n\nThe next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.\n\nThe three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.\n\nA random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.\n\nThe rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.\n\nCould you find out who is going to be the winner if they all play optimally?\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($0 \\leq n \\leq 10^{9}$)\u00a0\u2014 the number of turns.\n\nNext 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.\n\n\n-----Output-----\n\nPrint the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIs it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the number of round participants.\n\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 4126)\u00a0\u2014 the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.\n\n\n-----Output-----\n\nIf the round is rated for sure, print \"rated\". If the round is unrated for sure, print \"unrated\". If it's impossible to determine whether the round is rated or not, print \"maybe\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.\n\nThe three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.\n\nA random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.\n\nThe rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.\n\nCould you find out who is going to be the winner if they all play optimally?\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($0 \\leq n \\leq 10^{9}$)\u00a0\u2014 the number of turns.\n\nNext 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.\n\n\n-----Output-----\n\nPrint the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nToday an outstanding event is going to happen in the forest\u00a0\u2014 hedgehog Filya will come to his old fried Sonya!\n\nSonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.\n\nFilya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.\n\nCalculate the number of minutes they will be able to spend together.\n\n\n-----Input-----\n\nThe only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 \u2264 l_1, r_1, l_2, r_2, k \u2264 10^18, l_1 \u2264 r_1, l_2 \u2264 r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of minutes Sonya and Filya will be able to spend together.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe main street of Berland is a straight line with n houses built along it (n is an even number). The houses are located at both sides of the street. The houses with odd numbers are at one side of the street and are numbered from 1 to n - 1 in the order from the beginning of the street to the end (in the picture: from left to right). The houses with even numbers are at the other side of the street and are numbered from 2 to n in the order from the end of the street to its beginning (in the picture: from right to left). The corresponding houses with even and odd numbers are strictly opposite each other, that is, house 1 is opposite house n, house 3 is opposite house n - 2, house 5 is opposite house n - 4 and so on. [Image] \n\nVasya needs to get to house number a as quickly as possible. He starts driving from the beginning of the street and drives his car to house a. To get from the beginning of the street to houses number 1 and n, he spends exactly 1 second. He also spends exactly one second to drive the distance between two neighbouring houses. Vasya can park at any side of the road, so the distance between the beginning of the street at the houses that stand opposite one another should be considered the same.\n\nYour task is: find the minimum time Vasya needs to reach house a.\n\n\n-----Input-----\n\nThe first line of the input contains two integers, n and a (1 \u2264 a \u2264 n \u2264 100 000)\u00a0\u2014 the number of houses on the street and the number of the house that Vasya needs to reach, correspondingly. It is guaranteed that number n is even.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum time Vasya needs to get from the beginning of the street to house a.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\n\n-----Input-----\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 10^6.\n\n\n-----Output-----\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^18, k \u2264 n)\u00a0\u2014 the number of sticks drawn by Sasha and the number k\u00a0\u2014 the number of sticks to be crossed out on each turn.\n\n\n-----Output-----\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLet's call a string good if and only if it consists of only two types of letters\u00a0\u2014 'a' and 'b' and every two consecutive letters are distinct. For example \"baba\" and \"aba\" are good strings and \"abb\" is a bad string.\n\nYou have $a$ strings \"a\", $b$ strings \"b\" and $c$ strings \"ab\". You want to choose some subset of these strings and concatenate them in any arbitrarily order.\n\nWhat is the length of the longest good string you can obtain this way?\n\n\n-----Input-----\n\nThe first line contains three positive integers $a$, $b$, $c$ ($1 \\leq a, b, c \\leq 10^9$)\u00a0\u2014 the number of strings \"a\", \"b\" and \"ab\" respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the maximum possible length of the good string you can obtain.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's denote d(n) as the number of divisors of a positive integer n. You are given three integers a, b and c. Your task is to calculate the following sum:\n\n$\\sum_{i = 1}^{a} \\sum_{j = 1}^{b} \\sum_{k = 1}^{c} d(i \\cdot j \\cdot k)$\n\nFind the sum modulo 1073741824 (2^30).\n\n\n-----Input-----\n\nThe first line contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 100).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the required sum modulo 1073741824 (2^30).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.\n\nRules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.\n\nIn average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.\n\nMishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!\n\n\n-----Input-----\n\nThe first line of the input contains single integer n n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of game rounds.\n\nThe next n lines contains rounds description. i-th of them contains pair of integers m_{i} and c_{i} (1 \u2264 m_{i},  c_{i} \u2264 6)\u00a0\u2014 values on dice upper face after Mishka's and Chris' throws in i-th round respectively.\n\n\n-----Output-----\n\nIf Mishka is the winner of the game, print \"Mishka\" (without quotes) in the only line.\n\nIf Chris is the winner of the game, print \"Chris\" (without quotes) in the only line.\n\nIf the result of the game is draw, print \"Friendship is magic!^^\" (without quotes) in the only line.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's denote d(n) as the number of divisors of a positive integer n. You are given three integers a, b and c. Your task is to calculate the following sum:\n\n$\\sum_{i = 1}^{a} \\sum_{j = 1}^{b} \\sum_{k = 1}^{c} d(i \\cdot j \\cdot k)$\n\nFind the sum modulo 1073741824 (2^30).\n\n\n-----Input-----\n\nThe first line contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 100).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the required sum modulo 1073741824 (2^30).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nFind the number of k-divisible numbers on the segment [a, b]. In other words you need to find the number of such integer values x that a \u2264 x \u2264 b and x is divisible by k.\n\n\n-----Input-----\n\nThe only line contains three space-separated integers k, a and b (1 \u2264 k \u2264 10^18; - 10^18 \u2264 a \u2264 b \u2264 10^18).\n\n\n-----Output-----\n\nPrint the required number.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's denote d(n) as the number of divisors of a positive integer n. You are given three integers a, b and c. Your task is to calculate the following sum:\n\n$\\sum_{i = 1}^{a} \\sum_{j = 1}^{b} \\sum_{k = 1}^{c} d(i \\cdot j \\cdot k)$\n\nFind the sum modulo 1073741824 (2^30).\n\n\n-----Input-----\n\nThe first line contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 100).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the required sum modulo 1073741824 (2^30).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNothing is eternal in the world, Kostya understood it on the 7-th of January when he saw partially dead four-color garland.\n\nNow he has a goal to replace dead light bulbs, however he doesn't know how many light bulbs for each color are required. It is guaranteed that for each of four colors at least one light is working.\n\nIt is known that the garland contains light bulbs of four colors: red, blue, yellow and green. The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like \"RYBGRYBGRY\", \"YBGRYBGRYBG\", \"BGRYB\", but can not look like \"BGRYG\", \"YBGRYBYGR\" or \"BGYBGY\". Letters denote colors: 'R'\u00a0\u2014 red, 'B'\u00a0\u2014 blue, 'Y'\u00a0\u2014 yellow, 'G'\u00a0\u2014 green.\n\nUsing the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.\n\n\n-----Input-----\n\nThe first and the only line contains the string s (4 \u2264 |s| \u2264 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R'\u00a0\u2014 the light bulb is red,  'B'\u00a0\u2014 the light bulb is blue,  'Y'\u00a0\u2014 the light bulb is yellow,  'G'\u00a0\u2014 the light bulb is green,  '!'\u00a0\u2014 the light bulb is dead. \n\nThe string s can not contain other symbols except those five which were described. \n\nIt is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. \n\nIt is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line \"GRBY!!!B\" can not be in the input data. \n\n\n-----Output-----\n\nIn the only line print four integers k_{r}, k_{b}, k_{y}, k_{g}\u00a0\u2014 the number of dead light bulbs of red, blue, yellow and green colors accordingly.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 \u00d7 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\\rightarrow$ \n\nIn order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.\n\n\n-----Input-----\n\nThe first two lines of the input consist of a 2 \u00d7 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 \u00d7 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.\n\n\n-----Output-----\n\nOutput \"YES\"(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nRecently Luba learned about a special kind of numbers that she calls beautiful numbers. The number is called beautiful iff its binary representation consists of k + 1 consecutive ones, and then k consecutive zeroes.\n\nSome examples of beautiful numbers:   1_2 (1_10);  110_2 (6_10);  1111000_2 (120_10);  111110000_2 (496_10). \n\nMore formally, the number is beautiful iff there exists some positive integer k such that the number is equal to (2^{k} - 1) * (2^{k} - 1).\n\nLuba has got an integer number n, and she wants to find its greatest beautiful divisor. Help her to find it!\n\n\n-----Input-----\n\nThe only line of input contains one number n (1 \u2264 n \u2264 10^5) \u2014 the number Luba has got.\n\n\n-----Output-----\n\nOutput one number \u2014 the greatest beautiful divisor of Luba's number. It is obvious that the answer always exists.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 \u00d7 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\\rightarrow$ \n\nIn order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.\n\n\n-----Input-----\n\nThe first two lines of the input consist of a 2 \u00d7 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 \u00d7 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.\n\n\n-----Output-----\n\nOutput \"YES\"(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nOn the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining two segments, using the first two as a guide:  [Image] \n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining four segments, using the first three as a guide:  [Image] \n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\n\n-----Input-----\n\nThe only line of input contains a single integer $n$ ($1 \\le n \\le 10^{9}$), the number of squares that Sofia wants to draw.\n\n\n-----Output-----\n\nPrint single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 \u00d7 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\\rightarrow$ \n\nIn order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.\n\n\n-----Input-----\n\nThe first two lines of the input consist of a 2 \u00d7 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 \u00d7 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.\n\n\n-----Output-----\n\nOutput \"YES\"(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya came to her informatics lesson, and her teacher who is, by the way, a little bit famous here gave her the following task.\n\nTwo matrices $A$ and $B$ are given, each of them has size $n \\times m$. Nastya can perform the following operation to matrix $A$ unlimited number of times:   take any square square submatrix of $A$ and transpose it (i.e. the element of the submatrix which was in the $i$-th row and $j$-th column of the submatrix will be in the $j$-th row and $i$-th column after transposing, and the transposed submatrix itself will keep its place in the matrix $A$). \n\nNastya's task is to check whether it is possible to transform the matrix $A$ to the matrix $B$.\n\n $\\left. \\begin{array}{|c|c|c|c|c|c|c|c|} \\hline 6 & {3} & {2} & {11} \\\\ \\hline 5 & {9} & {4} & {2} \\\\ \\hline 3 & {3} & {3} & {3} \\\\ \\hline 4 & {8} & {2} & {2} \\\\ \\hline 7 & {8} & {6} & {4} \\\\ \\hline \\end{array} \\right.$ Example of the operation \n\nAs it may require a lot of operations, you are asked to answer this question for Nastya.\n\nA square submatrix of matrix $M$ is a matrix which consist of all elements which comes from one of the rows with indeces $x, x+1, \\dots, x+k-1$ of matrix $M$ and comes from one of the columns with indeces $y, y+1, \\dots, y+k-1$ of matrix $M$. $k$ is the size of square submatrix. In other words, square submatrix is the set of elements of source matrix which form a solid square (i.e. without holes).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ separated by space ($1 \\leq n, m \\leq 500$)\u00a0\u2014 the numbers of rows and columns in $A$ and $B$ respectively.\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $A$ ($1 \\leq A_{ij} \\leq 10^{9}$).\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $B$ ($1 \\leq B_{ij} \\leq 10^{9}$).\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if it is possible to transform $A$ to $B$ and \"NO\" (without quotes) otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nArray of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.\n\nFor example, the string \"Hello\" for p = 2, q = 3 can be split to the two strings \"Hel\" and \"lo\" or to the two strings \"He\" and \"llo\".\n\nNote it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).\n\n\n-----Input-----\n\nThe first line contains three positive integers n, p, q (1 \u2264 p, q \u2264 n \u2264 100).\n\nThe second line contains the string s consists of lowercase and uppercase latin letters and digits.\n\n\n-----Output-----\n\nIf it's impossible to split the string s to the strings of length p and q print the only number \"-1\".\n\nOtherwise in the first line print integer k \u2014 the number of strings in partition of s.\n\nEach of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s \u2014 from left to right.\n\nIf there are several solutions print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 \u2264 w \u2264 10^9, 1 \u2264 m \u2264 10^9) \u2014 the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nArray of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Berland State University is hosting a ballroom dance in celebration of its 100500-th anniversary! n boys and m girls are already busy rehearsing waltz, minuet, polonaise and quadrille moves.\n\nWe know that several boy&girl pairs are going to be invited to the ball. However, the partners' dancing skill in each pair must differ by at most one.\n\nFor each boy, we know his dancing skills. Similarly, for each girl we know her dancing skills. Write a code that can determine the largest possible number of pairs that can be formed from n boys and m girls.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of boys. The second line contains sequence a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100), where a_{i} is the i-th boy's dancing skill.\n\nSimilarly, the third line contains an integer m (1 \u2264 m \u2264 100) \u2014 the number of girls. The fourth line contains sequence b_1, b_2, ..., b_{m} (1 \u2264 b_{j} \u2264 100), where b_{j} is the j-th girl's dancing skill.\n\n\n-----Output-----\n\nPrint a single number \u2014 the required maximum possible number of pairs.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nArray of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPetr wants to make a calendar for current month. For this purpose he draws a table in which columns correspond to weeks (a week is seven consequent days from Monday to Sunday), rows correspond to weekdays, and cells contain dates. For example, a calendar for January 2017 should look like on the picture: $\\left. \\begin{array}{|r|r|r|r|r|r|} \\hline & {2} & {9} & {16} & {23} & {30} \\\\ \\hline & {3} & {10} & {17} & {24} & {31} \\\\ \\hline & {4} & {11} & {18} & {25} & {} \\\\ \\hline & {5} & {12} & {19} & {26} & {} \\\\ \\hline & {6} & {13} & {20} & {27} & {} \\\\ \\hline & {7} & {14} & {21} & {28} & {} \\\\ \\hline 1 & {8} & {15} & {22} & {29} & {} \\\\ \\hline \\end{array} \\right.$ \n\nPetr wants to know how many columns his table should have given the month and the weekday of the first date of that month? Assume that the year is non-leap.\n\n\n-----Input-----\n\nThe only line contain two integers m and d (1 \u2264 m \u2264 12, 1 \u2264 d \u2264 7)\u00a0\u2014 the number of month (January is the first month, December is the twelfth) and the weekday of the first date of this month (1 is Monday, 7 is Sunday).\n\n\n-----Output-----\n\nPrint single integer: the number of columns the table should have.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 \u00d7 b_1 rectangle, the paintings have shape of a a_2 \u00d7 b_2 and a_3 \u00d7 b_3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\n\n-----Input-----\n\nThe first line contains two space-separated numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.\n\n\n-----Output-----\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 \u00d7 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\\rightarrow$ \n\nIn order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.\n\n\n-----Input-----\n\nThe first two lines of the input consist of a 2 \u00d7 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 \u00d7 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.\n\n\n-----Output-----\n\nOutput \"YES\"(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSomeone gave Alyona an array containing n positive integers a_1, a_2, ..., a_{n}. In one operation, Alyona can choose any element of the array and decrease it, i.e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all.\n\nFormally, after applying some operations Alyona will get an array of n positive integers b_1, b_2, ..., b_{n} such that 1 \u2264 b_{i} \u2264 a_{i} for every 1 \u2264 i \u2264 n. Your task is to determine the maximum possible value of mex of this array.\n\nMex of an array in this problem is the minimum positive integer that doesn't appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of elements in the Alyona's array.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint one positive integer\u00a0\u2014 the maximum possible value of mex of the array after Alyona applies some (possibly none) operations.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 \u00d7 b_1 rectangle, the paintings have shape of a a_2 \u00d7 b_2 and a_3 \u00d7 b_3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\n\n-----Input-----\n\nThe first line contains two space-separated numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.\n\n\n-----Output-----\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, ....  [Image] \n\nThe Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.\n\n\n-----Input-----\n\nThe first line of input contains two integers a and b (1 \u2264 a, b \u2264 100). \n\nThe second line contains two integers c and d (1 \u2264 c, d \u2264 100).\n\n\n-----Output-----\n\nPrint the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 \u00d7 b_1 rectangle, the paintings have shape of a a_2 \u00d7 b_2 and a_3 \u00d7 b_3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\n\n-----Input-----\n\nThe first line contains two space-separated numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.\n\n\n-----Output-----\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nArray of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe three friends, Kuro, Shiro, and Katie, met up again! It's time for a party...\n\nWhat the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now $n$ cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle.\n\nKatie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are $m$ cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment?\n\nCould you help her with this curiosity?\n\nYou can see the examples and their descriptions with pictures in the \"Note\" section.\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m$ ($2 \\leq n \\leq 1000$, $0 \\leq m \\leq n$)\u00a0\u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of groups of cats at the moment Katie observes.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSomeone gave Alyona an array containing n positive integers a_1, a_2, ..., a_{n}. In one operation, Alyona can choose any element of the array and decrease it, i.e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all.\n\nFormally, after applying some operations Alyona will get an array of n positive integers b_1, b_2, ..., b_{n} such that 1 \u2264 b_{i} \u2264 a_{i} for every 1 \u2264 i \u2264 n. Your task is to determine the maximum possible value of mex of this array.\n\nMex of an array in this problem is the minimum positive integer that doesn't appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of elements in the Alyona's array.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint one positive integer\u00a0\u2014 the maximum possible value of mex of the array after Alyona applies some (possibly none) operations.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA positive integer is called a 2-3-integer, if it is equal to 2^{x}\u00b73^{y} for some non-negative integers x and y. In other words, these integers are such integers that only have 2 and 3 among their prime divisors. For example, integers 1, 6, 9, 16 and 108 \u2014 are 2-3 integers, while 5, 10, 21 and 120 are not.\n\nPrint the number of 2-3-integers on the given segment [l, r], i.\u00a0e. the number of sich 2-3-integers t that l \u2264 t \u2264 r.\n\n\n-----Input-----\n\nThe only line contains two integers l and r (1 \u2264 l \u2264 r \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nPrint a single integer the number of 2-3-integers on the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOne day Kefa found n baloons. For convenience, we denote color of i-th baloon as s_{i} \u2014 lowercase letter of the Latin alphabet. Also Kefa has k friends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out all baloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset \u2014 print \u00abYES\u00bb, if he can, and \u00abNO\u00bb, otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of baloons and friends.\n\nNext line contains string s \u2014 colors of baloons.\n\n\n-----Output-----\n\nAnswer to the task \u2014 \u00abYES\u00bb or \u00abNO\u00bb in a single line.\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nCarl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?\n\n\n-----Input-----\n\nThe first line of the input contains three integers a, b and c (0 \u2264 a, b, c \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that are in the magician's disposal.\n\nThe second line of the input contains three integers, x, y and z (0 \u2264 x, y, z \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that he needs to get.\n\n\n-----Output-----\n\nIf the wizard is able to obtain the required numbers of spheres, print \"Yes\". Otherwise, print \"No\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nValera has got n domino pieces in a row. Each piece consists of two halves \u2014 the upper one and the lower one. Each of the halves contains a number from 1 to 6. Valera loves even integers very much, so he wants the sum of the numbers on the upper halves and the sum of the numbers on the lower halves to be even.\n\nTo do that, Valera can rotate the dominoes by 180 degrees. After the rotation the upper and the lower halves swap places. This action takes one second. Help Valera find out the minimum time he must spend rotating dominoes to make his wish come true.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of dominoes Valera has. Next n lines contain two space-separated integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 6). Number x_{i} is initially written on the upper half of the i-th domino, y_{i} is initially written on the lower half.\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum required number of seconds. If Valera can't do the task in any time, print  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nStudents Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 360) \u00a0\u2014 the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 360) \u00a0\u2014 the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.\n\n\n-----Output-----\n\nPrint one integer \u00a0\u2014 the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.\n\nVasiliy's car is not new \u2014 it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on). In the beginning of the trip the car is just from repair station.\n\nTo drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a < b).\n\nYour task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.\n\n\n-----Input-----\n\nThe first line contains 5 positive integers d, k, a, b, t (1 \u2264 d \u2264 10^12; 1 \u2264 k, a, b, t \u2264 10^6; a < b), where:  d \u2014 the distance from home to the post office;  k \u2014 the distance, which car is able to drive before breaking;  a \u2014 the time, which Vasiliy spends to drive 1 kilometer on his car;  b \u2014 the time, which Vasiliy spends to walk 1 kilometer on foot;  t \u2014 the time, which Vasiliy spends to repair his car. \n\n\n-----Output-----\n\nPrint the minimal time after which Vasiliy will be able to reach the post office.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.\n\nYou may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \\times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \\le x < n$ and $1 \\le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.\n\nYour goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.\n\nIs it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n, m \\le 50$).\n\nThen $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.\n\n\n-----Output-----\n\nIf it is impossible to make $B$ equal to $A$, print one integer $-1$.\n\nOtherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ \u2014 the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \\le k \\le 2500$ should hold.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMasha lives in a multi-storey building, where floors are numbered with positive integers. Two floors are called adjacent if their numbers differ by one. Masha decided to visit Egor. Masha lives on the floor $x$, Egor on the floor $y$ (not on the same floor with Masha).\n\nThe house has a staircase and an elevator. If Masha uses the stairs, it takes $t_1$ seconds for her to walk between adjacent floors (in each direction). The elevator passes between adjacent floors (in each way) in $t_2$ seconds. The elevator moves with doors closed. The elevator spends $t_3$ seconds to open or close the doors. We can assume that time is not spent on any action except moving between adjacent floors and waiting for the doors to open or close. If Masha uses the elevator, it immediately goes directly to the desired floor.\n\nComing out of the apartment on her floor, Masha noticed that the elevator is now on the floor $z$ and has closed doors. Now she has to choose whether to use the stairs or use the elevator. \n\nIf the time that Masha needs to get to the Egor's floor by the stairs is strictly less than the time it will take her using the elevator, then she will use the stairs, otherwise she will choose the elevator.\n\nHelp Mary to understand whether to use the elevator or the stairs.\n\n\n-----Input-----\n\nThe only line contains six integers $x$, $y$, $z$, $t_1$, $t_2$, $t_3$ ($1 \\leq x, y, z, t_1, t_2, t_3 \\leq 1000$)\u00a0\u2014 the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that $x \\ne y$.\n\n\n-----Output-----\n\nIf the time it will take to use the elevator is not greater than the time it will take to use the stairs, print \u00abYES\u00bb (without quotes), otherwise print \u00abNO> (without quotes).\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.\n\nYou may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \\times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \\le x < n$ and $1 \\le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.\n\nYour goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.\n\nIs it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n, m \\le 50$).\n\nThen $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.\n\n\n-----Output-----\n\nIf it is impossible to make $B$ equal to $A$, print one integer $-1$.\n\nOtherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ \u2014 the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \\le k \\le 2500$ should hold.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA little girl loves problems on bitwise operations very much. Here's one of them.\n\nYou are given two integers l and r. Let's consider the values of $a \\oplus b$ for all pairs of integers a and b (l \u2264 a \u2264 b \u2264 r). Your task is to find the maximum value among all considered ones.\n\nExpression $x \\oplus y$ means applying bitwise excluding or operation to integers x and y. The given operation exists in all modern programming languages, for example, in languages C++ and Java it is represented as \"^\", in Pascal \u2014 as \u00abxor\u00bb.\n\n\n-----Input-----\n\nThe single line contains space-separated integers l and r (1 \u2264 l \u2264 r \u2264 10^18).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the maximum value of $a \\oplus b$ for all pairs of integers a, b (l \u2264 a \u2264 b \u2264 r).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.\n\nYou may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \\times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \\le x < n$ and $1 \\le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.\n\nYour goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.\n\nIs it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n, m \\le 50$).\n\nThen $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.\n\n\n-----Output-----\n\nIf it is impossible to make $B$ equal to $A$, print one integer $-1$.\n\nOtherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ \u2014 the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \\le k \\le 2500$ should hold.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array $a_1, a_2, \\dots , a_n$ and two integers $m$ and $k$.\n\nYou can choose some subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$. \n\nThe cost of subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$ is equal to $\\sum\\limits_{i=l}^{r} a_i - k \\lceil \\frac{r - l + 1}{m} \\rceil$, where $\\lceil x \\rceil$ is the least integer greater than or equal to $x$. \n\nThe cost of empty subarray is equal to zero.\n\nFor example, if $m = 3$, $k = 10$ and $a = [2, -4, 15, -3, 4, 8, 3]$, then the cost of some subarrays are:  $a_3 \\dots a_3: 15 - k \\lceil \\frac{1}{3} \\rceil = 15 - 10 = 5$;  $a_3 \\dots a_4: (15 - 3) - k \\lceil \\frac{2}{3} \\rceil = 12 - 10 = 2$;  $a_3 \\dots a_5: (15 - 3 + 4) - k \\lceil \\frac{3}{3} \\rceil = 16 - 10 = 6$;  $a_3 \\dots a_6: (15 - 3 + 4 + 8) - k \\lceil \\frac{4}{3} \\rceil = 24 - 20 = 4$;  $a_3 \\dots a_7: (15 - 3 + 4 + 8 + 3) - k \\lceil \\frac{5}{3} \\rceil = 27 - 20 = 7$. \n\nYour task is to find the maximum cost of some subarray (possibly empty) of array $a$.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$, and $k$ ($1 \\le n \\le 3 \\cdot 10^5, 1 \\le m \\le 10, 1 \\le k \\le 10^9$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint the maximum cost of some subarray of array $a$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAnton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.\n\nYour task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. \n\n\n-----Input-----\n\nThe first line contains the positive integer x (1 \u2264 x \u2264 10^18) \u2014 the integer which Anton has. \n\n\n-----Output-----\n\nPrint the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array $a_1, a_2, \\dots , a_n$ and two integers $m$ and $k$.\n\nYou can choose some subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$. \n\nThe cost of subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$ is equal to $\\sum\\limits_{i=l}^{r} a_i - k \\lceil \\frac{r - l + 1}{m} \\rceil$, where $\\lceil x \\rceil$ is the least integer greater than or equal to $x$. \n\nThe cost of empty subarray is equal to zero.\n\nFor example, if $m = 3$, $k = 10$ and $a = [2, -4, 15, -3, 4, 8, 3]$, then the cost of some subarrays are:  $a_3 \\dots a_3: 15 - k \\lceil \\frac{1}{3} \\rceil = 15 - 10 = 5$;  $a_3 \\dots a_4: (15 - 3) - k \\lceil \\frac{2}{3} \\rceil = 12 - 10 = 2$;  $a_3 \\dots a_5: (15 - 3 + 4) - k \\lceil \\frac{3}{3} \\rceil = 16 - 10 = 6$;  $a_3 \\dots a_6: (15 - 3 + 4 + 8) - k \\lceil \\frac{4}{3} \\rceil = 24 - 20 = 4$;  $a_3 \\dots a_7: (15 - 3 + 4 + 8 + 3) - k \\lceil \\frac{5}{3} \\rceil = 27 - 20 = 7$. \n\nYour task is to find the maximum cost of some subarray (possibly empty) of array $a$.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$, and $k$ ($1 \\le n \\le 3 \\cdot 10^5, 1 \\le m \\le 10, 1 \\le k \\le 10^9$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint the maximum cost of some subarray of array $a$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nChouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \\ldots, x_k$.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\leq k \\leq n \\leq 10^5$, $n-1 \\leq m \\leq 10^5$)\u00a0\u2014 the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains $k$ distinct integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$).\n\nEach of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \\leq u,v \\leq n, 1 \\leq w \\leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\n\n-----Output-----\n\nThe first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer\u00a0\u2014 the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMelody Pond was stolen from her parents as a newborn baby by Madame Kovarian, to become a weapon of the Silence in their crusade against the Doctor. Madame Kovarian changed Melody's name to River Song, giving her a new identity that allowed her to kill the Eleventh Doctor.\n\nHeidi figured out that Madame Kovarian uses a very complicated hashing function in order to change the names of the babies she steals. In order to prevent this from happening to future Doctors, Heidi decided to prepare herself by learning some basic hashing techniques.\n\nThe first hashing function she designed is as follows.\n\nGiven two positive integers $(x, y)$ she defines $H(x,y):=x^2+2xy+x+1$.\n\nNow, Heidi wonders if the function is reversible. That is, given a positive integer $r$, can you find a pair $(x, y)$ (of positive integers) such that $H(x, y) = r$?\n\nIf multiple such pairs exist, output the one with smallest possible $x$. If there is no such pair, output \"NO\".\n\n\n-----Input-----\n\nThe first and only line contains an integer $r$ ($1 \\le r \\le 10^{12}$).\n\n\n-----Output-----\n\nOutput integers $x, y$ such that $H(x,y) = r$ and $x$ is smallest possible, or \"NO\" if no such pair exists.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Fair Nut likes kvass very much. On his birthday parents presented him $n$ kegs of kvass. There are $v_i$ liters of kvass in the $i$-th keg. Each keg has a lever. You can pour your glass by exactly $1$ liter pulling this lever. The Fair Nut likes this drink very much, so he wants to pour his glass by $s$ liters of kvass. But he wants to do it, so kvass level in the least keg is as much as possible.\n\nHelp him find out how much kvass can be in the least keg or define it's not possible to pour his glass by $s$ liters of kvass.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1 \\le n \\le 10^3$, $1 \\le s \\le 10^{12}$)\u00a0\u2014 the number of kegs and glass volume.\n\nThe second line contains $n$ integers $v_1, v_2, \\ldots, v_n$ ($1 \\le v_i \\le 10^9$)\u00a0\u2014 the volume of $i$-th keg.\n\n\n-----Output-----\n\nIf the Fair Nut cannot pour his glass by $s$ liters of kvass, print $-1$. Otherwise, print a single integer\u00a0\u2014 how much kvass in the least keg can be.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe main street of Berland is a straight line with n houses built along it (n is an even number). The houses are located at both sides of the street. The houses with odd numbers are at one side of the street and are numbered from 1 to n - 1 in the order from the beginning of the street to the end (in the picture: from left to right). The houses with even numbers are at the other side of the street and are numbered from 2 to n in the order from the end of the street to its beginning (in the picture: from right to left). The corresponding houses with even and odd numbers are strictly opposite each other, that is, house 1 is opposite house n, house 3 is opposite house n - 2, house 5 is opposite house n - 4 and so on. [Image] \n\nVasya needs to get to house number a as quickly as possible. He starts driving from the beginning of the street and drives his car to house a. To get from the beginning of the street to houses number 1 and n, he spends exactly 1 second. He also spends exactly one second to drive the distance between two neighbouring houses. Vasya can park at any side of the road, so the distance between the beginning of the street at the houses that stand opposite one another should be considered the same.\n\nYour task is: find the minimum time Vasya needs to reach house a.\n\n\n-----Input-----\n\nThe first line of the input contains two integers, n and a (1 \u2264 a \u2264 n \u2264 100 000)\u00a0\u2014 the number of houses on the street and the number of the house that Vasya needs to reach, correspondingly. It is guaranteed that number n is even.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum time Vasya needs to get from the beginning of the street to house a.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBeroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.\n\nBeroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.\n\nFor example:\n\n  the following words have typos: \"hellno\", \"hackcerrs\" and \"backtothefutttture\";  the following words don't have typos: \"helllllooooo\", \"tobeornottobe\" and \"oooooo\". \n\nWhen Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.\n\nImplement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.\n\n\n-----Input-----\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.\n\n\n-----Output-----\n\nPrint the given word without any changes if there are no typos.\n\nIf there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining two segments, using the first two as a guide:  [Image] \n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining four segments, using the first three as a guide:  [Image] \n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\n\n-----Input-----\n\nThe only line of input contains a single integer $n$ ($1 \\le n \\le 10^{9}$), the number of squares that Sofia wants to draw.\n\n\n-----Output-----\n\nPrint single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBeroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.\n\nBeroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.\n\nFor example:\n\n  the following words have typos: \"hellno\", \"hackcerrs\" and \"backtothefutttture\";  the following words don't have typos: \"helllllooooo\", \"tobeornottobe\" and \"oooooo\". \n\nWhen Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.\n\nImplement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.\n\n\n-----Input-----\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.\n\n\n-----Output-----\n\nPrint the given word without any changes if there are no typos.\n\nIf there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.\n\nVasiliy's car is not new \u2014 it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on). In the beginning of the trip the car is just from repair station.\n\nTo drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a < b).\n\nYour task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.\n\n\n-----Input-----\n\nThe first line contains 5 positive integers d, k, a, b, t (1 \u2264 d \u2264 10^12; 1 \u2264 k, a, b, t \u2264 10^6; a < b), where:  d \u2014 the distance from home to the post office;  k \u2014 the distance, which car is able to drive before breaking;  a \u2014 the time, which Vasiliy spends to drive 1 kilometer on his car;  b \u2014 the time, which Vasiliy spends to walk 1 kilometer on foot;  t \u2014 the time, which Vasiliy spends to repair his car. \n\n\n-----Output-----\n\nPrint the minimal time after which Vasiliy will be able to reach the post office.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBeroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.\n\nBeroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.\n\nFor example:\n\n  the following words have typos: \"hellno\", \"hackcerrs\" and \"backtothefutttture\";  the following words don't have typos: \"helllllooooo\", \"tobeornottobe\" and \"oooooo\". \n\nWhen Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.\n\nImplement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.\n\n\n-----Input-----\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.\n\n\n-----Output-----\n\nPrint the given word without any changes if there are no typos.\n\nIf there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA large banner with word CODEFORCES was ordered for the 1000-th onsite round of Codeforces^{\u03c9} that takes place on the Miami beach. Unfortunately, the company that made the banner mixed up two orders and delivered somebody else's banner that contains someone else's word. The word on the banner consists only of upper-case English letters.\n\nThere is very little time to correct the mistake. All that we can manage to do is to cut out some substring from the banner, i.e. several consecutive letters. After that all the resulting parts of the banner will be glued into a single piece (if the beginning or the end of the original banner was cut out, only one part remains); it is not allowed change the relative order of parts of the banner (i.e. after a substring is cut, several first and last letters are left, it is allowed only to glue the last letters to the right of the first letters). Thus, for example, for example, you can cut a substring out from string 'TEMPLATE' and get string 'TEMPLE' (if you cut out string AT), 'PLATE' (if you cut out TEM), 'T' (if you cut out EMPLATE), etc.\n\nHelp the organizers of the round determine whether it is possible to cut out of the banner some substring in such a way that the remaining parts formed word CODEFORCES.\n\n\n-----Input-----\n\nThe single line of the input contains the word written on the banner. The word only consists of upper-case English letters. The word is non-empty and its length doesn't exceed 100 characters. It is guaranteed that the word isn't word CODEFORCES.\n\n\n-----Output-----\n\nPrint 'YES', if there exists a way to cut out the substring, and 'NO' otherwise (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPetr wants to make a calendar for current month. For this purpose he draws a table in which columns correspond to weeks (a week is seven consequent days from Monday to Sunday), rows correspond to weekdays, and cells contain dates. For example, a calendar for January 2017 should look like on the picture: $\\left. \\begin{array}{|r|r|r|r|r|r|} \\hline & {2} & {9} & {16} & {23} & {30} \\\\ \\hline & {3} & {10} & {17} & {24} & {31} \\\\ \\hline & {4} & {11} & {18} & {25} & {} \\\\ \\hline & {5} & {12} & {19} & {26} & {} \\\\ \\hline & {6} & {13} & {20} & {27} & {} \\\\ \\hline & {7} & {14} & {21} & {28} & {} \\\\ \\hline 1 & {8} & {15} & {22} & {29} & {} \\\\ \\hline \\end{array} \\right.$ \n\nPetr wants to know how many columns his table should have given the month and the weekday of the first date of that month? Assume that the year is non-leap.\n\n\n-----Input-----\n\nThe only line contain two integers m and d (1 \u2264 m \u2264 12, 1 \u2264 d \u2264 7)\u00a0\u2014 the number of month (January is the first month, December is the twelfth) and the weekday of the first date of this month (1 is Monday, 7 is Sunday).\n\n\n-----Output-----\n\nPrint single integer: the number of columns the table should have.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! \n\nEvery day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.\n\nVasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.\n\nAccording to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.\n\n\n-----Input-----\n\nThe only line contains three integers b, d and s (0 \u2264 b, d, s \u2264 10^18,  b + d + s \u2265 1)\u00a0\u2014 the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. \n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the minimum possible number of meals which Vasiliy could have missed during his vacation. \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have two friends. You want to present each of them several positive integers. You want to present cnt_1 numbers to the first friend and cnt_2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\n\n-----Input-----\n\nThe only line contains four positive integers cnt_1, cnt_2, x, y (1 \u2264 cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4)\u00a0\u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAnton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.\n\nYour task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. \n\n\n-----Input-----\n\nThe first line contains the positive integer x (1 \u2264 x \u2264 10^18) \u2014 the integer which Anton has. \n\n\n-----Output-----\n\nPrint the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOn the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1)\u00a0\u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\n\n-----Output-----\n\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMahmoud has n line segments, the i-th of them has length a_{i}. Ehab challenged him to use exactly 3 line segments to form a non-degenerate triangle. Mahmoud doesn't accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non-degenerate triangle.\n\nMahmoud should use exactly 3 line segments, he can't concatenate two line segments or change any length. A non-degenerate triangle is a triangle with positive area.\n\n\n-----Input-----\n\nThe first line contains single integer n (3 \u2264 n \u2264 10^5)\u00a0\u2014 the number of line segments Mahmoud has.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the lengths of line segments Mahmoud has.\n\n\n-----Output-----\n\nIn the only line print \"YES\" if he can choose exactly three line segments and form a non-degenerate triangle with them, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOn the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1)\u00a0\u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\n\n-----Output-----\n\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Duck song\n\nFor simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.\n\nAndrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen: Andrew, Dmitry and Michal should eat at least $x$, $y$ and $z$ grapes, respectively. Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only. On the other hand, Dmitry is not a fan of black grapes\u00a0\u2014 any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes. Michal has a common taste\u00a0\u2014 he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.\n\nKnowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with $a$ green grapes, $b$ purple grapes and $c$ black grapes.\n\nHowever, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?\n\nIt is not required to distribute all the grapes, so it's possible that some of them will remain unused.\n\n\n-----Input-----\n\nThe first line contains three integers $x$, $y$ and $z$ ($1 \\le x, y, z \\le 10^5$)\u00a0\u2014 the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers $a$, $b$, $c$ ($1 \\le a, b, c \\le 10^5$)\u00a0\u2014 the number of green, purple and black grapes in the box.\n\n\n-----Output-----\n\nIf there is a grape distribution that allows everyone to be happy, print \"YES\", otherwise print \"NO\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOn the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1)\u00a0\u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\n\n-----Output-----\n\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe three friends, Kuro, Shiro, and Katie, met up again! It's time for a party...\n\nWhat the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now $n$ cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle.\n\nKatie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are $m$ cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment?\n\nCould you help her with this curiosity?\n\nYou can see the examples and their descriptions with pictures in the \"Note\" section.\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m$ ($2 \\leq n \\leq 1000$, $0 \\leq m \\leq n$)\u00a0\u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of groups of cats at the moment Katie observes.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nRecently Anton found a box with digits in his room. There are k_2 digits 2, k_3 digits 3, k_5 digits 5 and k_6 digits 6.\n\nAnton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!\n\nEach digit can be used no more than once, i.e. the composed integers should contain no more than k_2 digits 2, k_3 digits 3 and so on. Of course, unused digits are not counted in the sum.\n\n\n-----Input-----\n\nThe only line of the input contains four integers k_2, k_3, k_5 and k_6\u00a0\u2014 the number of digits 2, 3, 5 and 6 respectively (0 \u2264 k_2, k_3, k_5, k_6 \u2264 5\u00b710^6).\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 maximum possible sum of Anton's favorite integers that can be composed using digits from the box.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIvan has number $b$. He is sorting through the numbers $a$ from $1$ to $10^{18}$, and for every $a$ writes $\\frac{[a, \\,\\, b]}{a}$ on blackboard. Here $[a, \\,\\, b]$ stands for least common multiple of $a$ and $b$. Ivan is very lazy, that's why this task bored him soon. But he is interested in how many different numbers he would write on the board if he would finish the task. Help him to find the quantity of different numbers he would write on the board.\n\n\n-----Input-----\n\nThe only line contains one integer\u00a0\u2014 $b$ $(1 \\le b \\le 10^{10})$.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 answer for the problem.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVitya has just started learning Berlanese language. It is known that Berlanese uses the Latin alphabet. Vowel letters are \"a\", \"o\", \"u\", \"i\", and \"e\". Other letters are consonant.\n\nIn Berlanese, there has to be a vowel after every consonant, but there can be any letter after any vowel. The only exception is a consonant \"n\"; after this letter, there can be any letter (not only a vowel) or there can be no letter at all. For example, the words \"harakiri\", \"yupie\", \"man\", and \"nbo\" are Berlanese while the words \"horse\", \"king\", \"my\", and \"nz\" are not.\n\nHelp Vitya find out if a word $s$ is Berlanese.\n\n\n-----Input-----\n\nThe first line of the input contains the string $s$ consisting of $|s|$ ($1\\leq |s|\\leq 100$) lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if there is a vowel after every consonant except \"n\", otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nn children are standing in a circle and playing a game. Children's numbers in clockwise order form a permutation a_1, a_2, ..., a_{n} of length n. It is an integer sequence such that each integer from 1 to n appears exactly once in it.\n\nThe game consists of m steps. On each step the current leader with index i counts out a_{i} people in clockwise order, starting from the next person. The last one to be pointed at by the leader becomes the new leader.\n\nYou are given numbers l_1, l_2, ..., l_{m} \u2014 indices of leaders in the beginning of each step. Child with number l_1 is the first leader in the game. \n\nWrite a program which will restore a possible permutation a_1, a_2, ..., a_{n}. If there are multiple solutions then print any of them. If there is no solution then print -1.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, m (1 \u2264 n, m \u2264 100).\n\nThe second line contains m integer numbers l_1, l_2, ..., l_{m} (1 \u2264 l_{i} \u2264 n) \u2014 indices of leaders in the beginning of each step.\n\n\n-----Output-----\n\nPrint such permutation of n numbers a_1, a_2, ..., a_{n} that leaders in the game will be exactly l_1, l_2, ..., l_{m} if all the rules are followed. If there are multiple solutions print any of them. \n\nIf there is no permutation which satisfies all described conditions print -1.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWinnie-the-Pooh likes honey very much! That is why he decided to visit his friends. Winnie has got three best friends: Rabbit, Owl and Eeyore, each of them lives in his own house. There are winding paths between each pair of houses. The length of a path between Rabbit's and Owl's houses is a meters, between Rabbit's and Eeyore's house is b meters, between Owl's and Eeyore's house is c meters.\n\nFor enjoying his life and singing merry songs Winnie-the-Pooh should have a meal n times a day. Now he is in the Rabbit's house and has a meal for the first time. Each time when in the friend's house where Winnie is now the supply of honey is about to end, Winnie leaves that house. If Winnie has not had a meal the required amount of times, he comes out from the house and goes to someone else of his two friends. For this he chooses one of two adjacent paths, arrives to the house on the other end and visits his friend. You may assume that when Winnie is eating in one of his friend's house, the supply of honey in other friend's houses recover (most probably, they go to the supply store).\n\nWinnie-the-Pooh does not like physical activity. He wants to have a meal n times, traveling minimum possible distance. Help him to find this distance.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 distance between Rabbit's and Owl's houses.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 distance between Rabbit's and Eeyore's houses.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 distance between Owl's and Eeyore's houses.\n\n\n-----Output-----\n\nOutput one number\u00a0\u2014 minimum distance in meters Winnie must go through to have a meal n times.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\n[Image] \n\nWalking through the streets of Marshmallow City, Slastyona have spotted some merchants selling a kind of useless toy which is very popular nowadays\u00a0\u2013 caramel spinner! Wanting to join the craze, she has immediately bought the strange contraption.\n\nSpinners in Sweetland have the form of V-shaped pieces of caramel. Each spinner can, well, spin around an invisible magic axis. At a specific point in time, a spinner can take 4 positions shown below (each one rotated 90 degrees relative to the previous, with the fourth one followed by the first one):\n\n [Image] \n\nAfter the spinner was spun, it starts its rotation, which is described by a following algorithm: the spinner maintains its position for a second then majestically switches to the next position in clockwise or counter-clockwise order, depending on the direction the spinner was spun in.\n\nSlastyona managed to have spinner rotating for exactly n seconds. Being fascinated by elegance of the process, she completely forgot the direction the spinner was spun in! Lucky for her, she managed to recall the starting position, and wants to deduct the direction given the information she knows. Help her do this.\n\n\n-----Input-----\n\nThere are two characters in the first string\u00a0\u2013 the starting and the ending position of a spinner. The position is encoded with one of the following characters: v (ASCII code 118, lowercase v), < (ASCII code 60), ^ (ASCII code 94) or > (ASCII code 62) (see the picture above for reference). Characters are separated by a single space.\n\nIn the second strings, a single number n is given (0 \u2264 n \u2264 10^9)\u00a0\u2013 the duration of the rotation.\n\nIt is guaranteed that the ending position of a spinner is a result of a n second spin in any of the directions, assuming the given starting position.\n\n\n-----Output-----\n\nOutput cw, if the direction is clockwise, ccw\u00a0\u2013 if counter-clockwise, and undefined otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nOn the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1)\u00a0\u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\n\n-----Output-----\n\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWhile swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 9)\u00a0\u2014 the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\n\n-----Input-----\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 5), where a_{i} is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 5), where b_{i} is academic performance of the i-th student of the group B.\n\n\n-----Output-----\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.\n\nThe three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.\n\nA random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.\n\nThe rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.\n\nCould you find out who is going to be the winner if they all play optimally?\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($0 \\leq n \\leq 10^{9}$)\u00a0\u2014 the number of turns.\n\nNext 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.\n\n\n-----Output-----\n\nPrint the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNoora is a student of one famous high school. It's her final year in school\u00a0\u2014 she is going to study in university next year. However, she has to get an \u00abA\u00bb graduation certificate in order to apply to a prestigious one.\n\nIn school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784\u00a0\u2014 to 8. \n\nFor instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.\n\nTo graduate with \u00abA\u00bb certificate, Noora has to have mark k.\n\nNoora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 k) denoting marks received by Noora before Leha's hack.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\n\n-----Input-----\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 5), where a_{i} is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 5), where b_{i} is academic performance of the i-th student of the group B.\n\n\n-----Output-----\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nRecently Adaltik discovered japanese crosswords. Japanese crossword is a picture, represented as a table sized a \u00d7 b squares, and each square is colored white or black. There are integers to the left of the rows and to the top of the columns, encrypting the corresponding row or column. The number of integers represents how many groups of black squares there are in corresponding row or column, and the integers themselves represents the number of consecutive black squares in corresponding group (you can find more detailed explanation in Wikipedia https://en.wikipedia.org/wiki/Japanese_crossword).\n\nAdaltik decided that the general case of japanese crossword is too complicated and drew a row consisting of n squares (e.g. japanese crossword sized 1 \u00d7 n), which he wants to encrypt in the same way as in japanese crossword. [Image] The example of encrypting of a single row of japanese crossword. \n\nHelp Adaltik find the numbers encrypting the row he drew.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W'\u00a0\u2014 to white square in the row that Adaltik drew).\n\n\n-----Output-----\n\nThe first line should contain a single integer k\u00a0\u2014 the number of integers encrypting the row, e.g. the number of groups of black squares in the row.\n\nThe second line should contain k integers, encrypting the row, e.g. corresponding to sizes of groups of consecutive black squares in the order from left to right.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\n\n-----Input-----\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 5), where a_{i} is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 5), where b_{i} is academic performance of the i-th student of the group B.\n\n\n-----Output-----\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length l_{i}.\n\nIlya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.\n\nSticks with lengths a_1, a_2, a_3 and a_4 can make a rectangle if the following properties are observed:  a_1 \u2264 a_2 \u2264 a_3 \u2264 a_4  a_1 = a_2  a_3 = a_4 \n\nA rectangle can be made of sticks with lengths of, for example, 3\u00a03\u00a03\u00a03 or 2\u00a02\u00a04\u00a04. A rectangle cannot be made of, for example, sticks 5\u00a05\u00a05\u00a07.\n\nIlya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.\n\nYou have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of the available sticks.\n\nThe second line of the input contains n positive integers l_{i} (2 \u2264 l_{i} \u2264 10^6)\u00a0\u2014\u00a0the lengths of the sticks.\n\n\n-----Output-----\n\nThe first line of the output must contain a single non-negative integer\u00a0\u2014\u00a0the maximum total area of the rectangles that Ilya can make from the available sticks.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVictor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.\n\nVictor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.\n\nYou are given a word s. Can you predict what will it become after correction?\n\nIn this problem letters a, e, i, o, u and y are considered to be vowels.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters \u2014 the word before the correction.\n\n\n-----Output-----\n\nOutput the word s after the correction.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMonocarp has decided to buy a new TV set and hang it on the wall in his flat. The wall has enough free space so Monocarp can buy a TV set with screen width not greater than $a$ and screen height not greater than $b$. Monocarp is also used to TV sets with a certain aspect ratio: formally, if the width of the screen is $w$, and the height of the screen is $h$, then the following condition should be met: $\\frac{w}{h} = \\frac{x}{y}$.\n\nThere are many different TV sets in the shop. Monocarp is sure that for any pair of positive integers $w$ and $h$ there is a TV set with screen width $w$ and height $h$ in the shop.\n\nMonocarp isn't ready to choose the exact TV set he is going to buy. Firstly he wants to determine the optimal screen resolution. He has decided to try all possible variants of screen size. But he must count the number of pairs of positive integers $w$ and $h$, beforehand, such that $(w \\le a)$, $(h \\le b)$ and $(\\frac{w}{h} = \\frac{x}{y})$.\n\nIn other words, Monocarp wants to determine the number of TV sets having aspect ratio $\\frac{x}{y}$, screen width not exceeding $a$, and screen height not exceeding $b$. Two TV sets are considered different if they have different screen width or different screen height.\n\n\n-----Input-----\n\nThe first line contains four integers $a$, $b$, $x$, $y$ ($1 \\le a, b, x, y \\le 10^{18}$)\u00a0\u2014 the constraints on the screen width and height, and on the aspect ratio.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of different variants to choose TV screen width and screen height so that they meet the aforementioned constraints.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied:   the i-th letter occurs in the string no more than a_{i} times;  the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2  \u2264  n  \u2264  26)\u00a0\u2014 the number of letters in the alphabet.\n\nThe next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNothing is eternal in the world, Kostya understood it on the 7-th of January when he saw partially dead four-color garland.\n\nNow he has a goal to replace dead light bulbs, however he doesn't know how many light bulbs for each color are required. It is guaranteed that for each of four colors at least one light is working.\n\nIt is known that the garland contains light bulbs of four colors: red, blue, yellow and green. The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like \"RYBGRYBGRY\", \"YBGRYBGRYBG\", \"BGRYB\", but can not look like \"BGRYG\", \"YBGRYBYGR\" or \"BGYBGY\". Letters denote colors: 'R'\u00a0\u2014 red, 'B'\u00a0\u2014 blue, 'Y'\u00a0\u2014 yellow, 'G'\u00a0\u2014 green.\n\nUsing the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.\n\n\n-----Input-----\n\nThe first and the only line contains the string s (4 \u2264 |s| \u2264 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R'\u00a0\u2014 the light bulb is red,  'B'\u00a0\u2014 the light bulb is blue,  'Y'\u00a0\u2014 the light bulb is yellow,  'G'\u00a0\u2014 the light bulb is green,  '!'\u00a0\u2014 the light bulb is dead. \n\nThe string s can not contain other symbols except those five which were described. \n\nIt is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. \n\nIt is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line \"GRBY!!!B\" can not be in the input data. \n\n\n-----Output-----\n\nIn the only line print four integers k_{r}, k_{b}, k_{y}, k_{g}\u00a0\u2014 the number of dead light bulbs of red, blue, yellow and green colors accordingly.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\n\u041a\u0430\u0440\u0442\u0430 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u00a0\u2014 \u044d\u0442\u043e \u043b\u0438\u0431\u043e \u00ab.\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043d\u0435\u0431\u0430), \u043b\u0438\u0431\u043e \u00ab*\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0437\u0432\u0435\u0437\u0434\u0430). \n\n\u041d\u043e\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u044b \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043b\u0438\u0441\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0437\u0432\u0435\u0437\u0434\u044b. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.\n\n\n-----Input-----\n\nThe single line of the input contains a pair of integers m, s (1 \u2264 m \u2264 100, 0 \u2264 s \u2264 900) \u2014 the length and the sum of the digits of the required numbers.\n\n\n-----Output-----\n\nIn the output print the pair of the required non-negative integer numbers \u2014 first the minimum possible number, then \u2014 the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers \"-1 -1\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nBear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\n\n-----Input-----\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10)\u00a0\u2014 the weight of Limak and the weight of Bob respectively.\n\n\n-----Output-----\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\n\u041a\u0430\u0440\u0442\u0430 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u00a0\u2014 \u044d\u0442\u043e \u043b\u0438\u0431\u043e \u00ab.\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043d\u0435\u0431\u0430), \u043b\u0438\u0431\u043e \u00ab*\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0437\u0432\u0435\u0437\u0434\u0430). \n\n\u041d\u043e\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u044b \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043b\u0438\u0441\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0437\u0432\u0435\u0437\u0434\u044b. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAt an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n - The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n - Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n - R points for winning with Rock;\n - S points for winning with Scissors;\n - P points for winning with Paper.\n - However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is r, the machine will play Rock in the i-th round. Similarly, p and s stand for Paper and Scissors, respectively.\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\n-----Notes-----\nIn this problem, Rock Paper Scissors can be thought of as a two-player game, in which each player simultaneously forms Rock, Paper, or Scissors with a hand.\n - If a player chooses Rock and the other chooses Scissors, the player choosing Rock wins;\n - if a player chooses Scissors and the other chooses Paper, the player choosing Scissors wins;\n - if a player chooses Paper and the other chooses Rock, the player choosing Paper wins;\n - if both players play the same hand, it is a draw.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N-1\n - 1 \\leq R,S,P \\leq 10^4\n - N,K,R,S, and P are all integers.\n - |T| = N\n - T consists of r, p, and s.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nR S P\nT\n\n-----Output-----\nPrint the maximum total score earned in the game.\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 \u2264 w \u2264 10^9, 1 \u2264 m \u2264 10^9) \u2014 the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\n\u041a\u0430\u0440\u0442\u0430 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u00a0\u2014 \u044d\u0442\u043e \u043b\u0438\u0431\u043e \u00ab.\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043d\u0435\u0431\u0430), \u043b\u0438\u0431\u043e \u00ab*\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0437\u0432\u0435\u0437\u0434\u0430). \n\n\u041d\u043e\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u044b \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043b\u0438\u0441\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0437\u0432\u0435\u0437\u0434\u044b. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA frog lives on the axis Ox and needs to reach home which is in the point n. She starts from the point 1. The frog can jump to the right at a distance not more than d. So, after she jumped from the point x she can reach the point x + a, where a is an integer from 1 to d.\n\nFor each point from 1 to n is known if there is a lily flower in it. The frog can jump only in points with a lilies. Guaranteed that there are lilies in the points 1 and n.\n\nDetermine the minimal number of jumps that the frog needs to reach home which is in the point n from the point 1. Consider that initially the frog is in the point 1. If the frog can not reach home, print -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and d (2 \u2264 n \u2264 100, 1 \u2264 d \u2264 n - 1) \u2014 the point, which the frog wants to reach, and the maximal length of the frog jump.\n\nThe second line contains a string s of length n, consisting of zeros and ones. If a character of the string s equals to zero, then in the corresponding point there is no lily flower. In the other case, in the corresponding point there is a lily flower. Guaranteed that the first and the last characters of the string s equal to one.\n\n\n-----Output-----\n\nIf the frog can not reach the home, print -1.\n\nIn the other case, print the minimal number of jumps that the frog needs to reach the home which is in the point n from the point 1.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nInnokentiy decides to change the password in the social net \"Contact!\", but he is too lazy to invent a new password by himself. That is why he needs your help. \n\nInnokentiy decides that new password should satisfy the following conditions:  the length of the password must be equal to n,  the password should consist only of lowercase Latin letters,  the number of distinct symbols in the password must be equal to k,  any two consecutive symbols in the password must be distinct. \n\nYour task is to help Innokentiy and to invent a new password which will satisfy all given conditions. \n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (2 \u2264 n \u2264 100, 2 \u2264 k \u2264 min(n, 26)) \u2014 the length of the password and the number of distinct symbols in it. \n\nPay attention that a desired new password always exists.\n\n\n-----Output-----\n\nPrint any password which satisfies all conditions given by Innokentiy.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nArpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 n, 1 \u2264 t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe following problem is well-known: given integers n and m, calculate $2^{n} \\operatorname{mod} m$, \n\nwhere 2^{n} = 2\u00b72\u00b7...\u00b72 (n factors), and $x \\operatorname{mod} y$ denotes the remainder of division of x by y.\n\nYou are asked to solve the \"reverse\" problem. Given integers n and m, calculate $m \\operatorname{mod} 2^{n}$. \n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^8).\n\nThe second line contains a single integer m (1 \u2264 m \u2264 10^8).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the value of $m \\operatorname{mod} 2^{n}$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him t_{j} minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.\n\nBy solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.\n\nPolycarp has M minutes of time. What is the maximum number of points he can earn?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, k and M (1 \u2264 n \u2264 45, 1 \u2264 k \u2264 45, 0 \u2264 M \u2264 2\u00b710^9).\n\nThe second line contains k integer numbers, values t_{j} (1 \u2264 t_{j} \u2264 1000000), where t_{j} is the time in minutes required to solve j-th subtask of any task.\n\n\n-----Output-----\n\nPrint the maximum amount of points Polycarp can earn in M minutes.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two strings $s$ and $t$, both consisting only of lowercase Latin letters.\n\nThe substring $s[l..r]$ is the string which is obtained by taking characters $s_l, s_{l + 1}, \\dots, s_r$ without changing the order.\n\nEach of the occurrences of string $a$ in a string $b$ is a position $i$ ($1 \\le i \\le |b| - |a| + 1$) such that $b[i..i + |a| - 1] = a$ ($|a|$ is the length of string $a$).\n\nYou are asked $q$ queries: for the $i$-th query you are required to calculate the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n\n-----Input-----\n\nThe first line contains three integer numbers $n$, $m$ and $q$ ($1 \\le n, m \\le 10^3$, $1 \\le q \\le 10^5$) \u2014 the length of string $s$, the length of string $t$ and the number of queries, respectively.\n\nThe second line is a string $s$ ($|s| = n$), consisting only of lowercase Latin letters.\n\nThe third line is a string $t$ ($|t| = m$), consisting only of lowercase Latin letters.\n\nEach of the next $q$ lines contains two integer numbers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the arguments for the $i$-th query.\n\n\n-----Output-----\n\nPrint $q$ lines \u2014 the $i$-th line should contain the answer to the $i$-th query, that is the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWhile Mahmoud and Ehab were practicing for IOI, they found a problem which name was Longest common subsequence. They solved it, and then Ehab challenged Mahmoud with another problem.\n\nGiven two strings a and b, find the length of their longest uncommon subsequence, which is the longest string that is a subsequence of one of them and not a subsequence of the other.\n\nA subsequence of some string is a sequence of characters that appears in the same order in the string, The appearances don't have to be consecutive, for example, strings \"ac\", \"bc\", \"abc\" and \"a\" are subsequences of string \"abc\" while strings \"abbc\" and \"acb\" are not. The empty string is a subsequence of any string. Any string is a subsequence of itself.\n\n\n-----Input-----\n\nThe first line contains string a, and the second line\u00a0\u2014 string b. Both of these strings are non-empty and consist of lowercase letters of English alphabet. The length of each string is not bigger than 10^5 characters.\n\n\n-----Output-----\n\nIf there's no uncommon subsequence, print \"-1\". Otherwise print the length of the longest uncommon subsequence of a and b.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\n\n-----Input-----\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 10^6.\n\n\n-----Output-----\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasya lives in a round building, whose entrances are numbered sequentially by integers from 1 to n. Entrance n and entrance 1 are adjacent.\n\nToday Vasya got bored and decided to take a walk in the yard. Vasya lives in entrance a and he decided that during his walk he will move around the house b entrances in the direction of increasing numbers (in this order entrance n should be followed by entrance 1). The negative value of b corresponds to moving |b| entrances in the order of decreasing numbers (in this order entrance 1 is followed by entrance n). If b = 0, then Vasya prefers to walk beside his entrance. [Image] Illustration for n = 6, a = 2, b =  - 5. \n\nHelp Vasya to determine the number of the entrance, near which he will be at the end of his walk.\n\n\n-----Input-----\n\nThe single line of the input contains three space-separated integers n, a and b (1 \u2264 n \u2264 100, 1 \u2264 a \u2264 n,  - 100 \u2264 b \u2264 100)\u00a0\u2014 the number of entrances at Vasya's place, the number of his entrance and the length of his walk, respectively.\n\n\n-----Output-----\n\nPrint a single integer k (1 \u2264 k \u2264 n)\u00a0\u2014 the number of the entrance where Vasya will be at the end of his walk.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe number \"zero\" is called \"love\" (or \"l'oeuf\" to be precise, literally means \"egg\" in French), for example when denoting the zero score in a game of tennis. \n\nAki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.\n\nHowever, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.\n\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ ($1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given array $a_1, a_2, \\dots, a_n$. Find the subsegment $a_l, a_{l+1}, \\dots, a_r$ ($1 \\le l \\le r \\le n$) with maximum arithmetic mean $\\frac{1}{r - l + 1}\\sum\\limits_{i=l}^{r}{a_i}$ (in floating-point numbers, i.e. without any rounding).\n\nIf there are many such subsegments find the longest one.\n\n\n-----Input-----\n\nThe first line contains single integer $n$ ($1 \\le n \\le 10^5$) \u2014 length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array $a$.\n\n\n-----Output-----\n\nPrint the single integer \u2014 the length of the longest subsegment with maximum possible arithmetic mean.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe number \"zero\" is called \"love\" (or \"l'oeuf\" to be precise, literally means \"egg\" in French), for example when denoting the zero score in a game of tennis. \n\nAki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.\n\nHowever, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.\n\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ ($1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n elements, you must make it a co-prime array in as few moves as possible.\n\nIn each move you can insert any positive integral number you want not greater than 10^9 in any place in the array.\n\nAn array is co-prime if any two adjacent numbers of it are co-prime.\n\nIn the number theory, two integers a and b are said to be co-prime if the only positive integer that divides both of them is 1.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in the given array.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array a.\n\n\n-----Output-----\n\nPrint integer k on the first line \u2014 the least number of elements needed to add to the array a to make it co-prime.\n\nThe second line should contain n + k integers a_{j} \u2014 the elements of the array a after adding k elements to it. Note that the new array should be co-prime, so any two adjacent values should be co-prime. Also the new array should be got from the original array a by adding k elements to it.\n\nIf there are multiple answers you can print any one of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThe number \"zero\" is called \"love\" (or \"l'oeuf\" to be precise, literally means \"egg\" in French), for example when denoting the zero score in a game of tennis. \n\nAki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.\n\nHowever, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.\n\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ ($1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe flag of Berland is such rectangular field n \u00d7 m that satisfies following conditions:\n\n  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. \n\nYou are given a field n \u00d7 m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the field.\n\nEach of the following n lines consisting of m characters 'R', 'G' and 'B' \u2014 the description of the field.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOne day, the Grasshopper was jumping on the lawn and found a piece of paper with a string. Grasshopper became interested what is the minimum jump ability he should have in order to be able to reach the far end of the string, jumping only on vowels of the English alphabet. Jump ability is the maximum possible length of his jump. \n\nFormally, consider that at the begginning the Grasshopper is located directly in front of the leftmost character of the string. His goal is to reach the position right after the rightmost character of the string. In one jump the Grasshopper could jump to the right any distance from 1 to the value of his jump ability. [Image] The picture corresponds to the first example. \n\nThe following letters are vowels: 'A', 'E', 'I', 'O', 'U' and 'Y'.\n\n\n-----Input-----\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100. \n\n\n-----Output-----\n\nPrint single integer a\u00a0\u2014 the minimum jump ability of the Grasshopper (in the number of symbols) that is needed to overcome the given string, jumping only on vowels.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Berland State University is hosting a ballroom dance in celebration of its 100500-th anniversary! n boys and m girls are already busy rehearsing waltz, minuet, polonaise and quadrille moves.\n\nWe know that several boy&girl pairs are going to be invited to the ball. However, the partners' dancing skill in each pair must differ by at most one.\n\nFor each boy, we know his dancing skills. Similarly, for each girl we know her dancing skills. Write a code that can determine the largest possible number of pairs that can be formed from n boys and m girls.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of boys. The second line contains sequence a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100), where a_{i} is the i-th boy's dancing skill.\n\nSimilarly, the third line contains an integer m (1 \u2264 m \u2264 100) \u2014 the number of girls. The fourth line contains sequence b_1, b_2, ..., b_{m} (1 \u2264 b_{j} \u2264 100), where b_{j} is the j-th girl's dancing skill.\n\n\n-----Output-----\n\nPrint a single number \u2014 the required maximum possible number of pairs.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLet's call a string good if and only if it consists of only two types of letters\u00a0\u2014 'a' and 'b' and every two consecutive letters are distinct. For example \"baba\" and \"aba\" are good strings and \"abb\" is a bad string.\n\nYou have $a$ strings \"a\", $b$ strings \"b\" and $c$ strings \"ab\". You want to choose some subset of these strings and concatenate them in any arbitrarily order.\n\nWhat is the length of the longest good string you can obtain this way?\n\n\n-----Input-----\n\nThe first line contains three positive integers $a$, $b$, $c$ ($1 \\leq a, b, c \\leq 10^9$)\u00a0\u2014 the number of strings \"a\", \"b\" and \"ab\" respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the maximum possible length of the good string you can obtain.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nQuite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.\n\nA k-tree is an infinite rooted tree where:\n\n  each vertex has exactly k children;  each edge has some weight;  if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. \n\nThe picture below shows a part of a 3-tree.\n\n \n\n [Image]\n\n    As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: \"How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?\".\n\nHelp Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (10^9 + 7). \n\n\n-----Input-----\n\nA single line contains three space-separated integers: n, k and d (1 \u2264 n, k \u2264 100; 1 \u2264 d \u2264 k).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7). \n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWinnie-the-Pooh likes honey very much! That is why he decided to visit his friends. Winnie has got three best friends: Rabbit, Owl and Eeyore, each of them lives in his own house. There are winding paths between each pair of houses. The length of a path between Rabbit's and Owl's houses is a meters, between Rabbit's and Eeyore's house is b meters, between Owl's and Eeyore's house is c meters.\n\nFor enjoying his life and singing merry songs Winnie-the-Pooh should have a meal n times a day. Now he is in the Rabbit's house and has a meal for the first time. Each time when in the friend's house where Winnie is now the supply of honey is about to end, Winnie leaves that house. If Winnie has not had a meal the required amount of times, he comes out from the house and goes to someone else of his two friends. For this he chooses one of two adjacent paths, arrives to the house on the other end and visits his friend. You may assume that when Winnie is eating in one of his friend's house, the supply of honey in other friend's houses recover (most probably, they go to the supply store).\n\nWinnie-the-Pooh does not like physical activity. He wants to have a meal n times, traveling minimum possible distance. Help him to find this distance.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 distance between Rabbit's and Owl's houses.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 distance between Rabbit's and Eeyore's houses.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 distance between Owl's and Eeyore's houses.\n\n\n-----Output-----\n\nOutput one number\u00a0\u2014 minimum distance in meters Winnie must go through to have a meal n times.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied:   the i-th letter occurs in the string no more than a_{i} times;  the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2  \u2264  n  \u2264  26)\u00a0\u2014 the number of letters in the alphabet.\n\nThe next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has two arrays $A$ and $B$ of lengths $n$ and $m$, respectively.\n\nHe can perform the following operation arbitrary number of times (possibly zero): he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment. For example, from the array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$, and from array $[1, 2, 3]$ Vasya can obtain array $[6]$.\n\nTwo arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n\nVasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal. Moreover, the lengths of the resulting arrays should be maximal possible.\n\nHelp Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n~(1 \\le n \\le 3 \\cdot 10^5)$ \u2014 the length of the first array.\n\nThe second line contains $n$ integers $a_1, a_2, \\cdots, a_n~(1 \\le a_i \\le 10^9)$ \u2014 elements of the array $A$.\n\nThe third line contains a single integer $m~(1 \\le m \\le 3 \\cdot 10^5)$ \u2014 the length of the second array.\n\nThe fourth line contains $m$ integers $b_1, b_2, \\cdots, b_m~(1 \\le b_i \\le 10^9)$ - elements of the array $B$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the resulting arrays after some operations were performed on arrays $A$ and $B$ in such a way that they became equal.\n\nIf there is no way to make array equal, print \"-1\".\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYear 2118. Androids are in mass production for decades now, and they do all the work for humans. But androids have to go to school to be able to solve creative tasks. Just like humans before.\n\nIt turns out that high school struggles are not gone. If someone is not like others, he is bullied. Vasya-8800 is an economy-class android which is produced by a little-known company. His design is not perfect, his characteristics also could be better. So he is bullied by other androids.\n\nOne of the popular pranks on Vasya is to force him to compare $x^y$ with $y^x$. Other androids can do it in milliseconds while Vasya's memory is too small to store such big numbers.\n\nPlease help Vasya! Write a fast program to compare $x^y$ with $y^x$ for Vasya, maybe then other androids will respect him.\n\n\n-----Input-----\n\nOn the only line of input there are two integers $x$ and $y$ ($1 \\le x, y \\le 10^{9}$).\n\n\n-----Output-----\n\nIf $x^y < y^x$, then print '<' (without quotes). If $x^y > y^x$, then print '>' (without quotes). If $x^y = y^x$, then print '=' (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Fair Nut likes kvass very much. On his birthday parents presented him $n$ kegs of kvass. There are $v_i$ liters of kvass in the $i$-th keg. Each keg has a lever. You can pour your glass by exactly $1$ liter pulling this lever. The Fair Nut likes this drink very much, so he wants to pour his glass by $s$ liters of kvass. But he wants to do it, so kvass level in the least keg is as much as possible.\n\nHelp him find out how much kvass can be in the least keg or define it's not possible to pour his glass by $s$ liters of kvass.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1 \\le n \\le 10^3$, $1 \\le s \\le 10^{12}$)\u00a0\u2014 the number of kegs and glass volume.\n\nThe second line contains $n$ integers $v_1, v_2, \\ldots, v_n$ ($1 \\le v_i \\le 10^9$)\u00a0\u2014 the volume of $i$-th keg.\n\n\n-----Output-----\n\nIf the Fair Nut cannot pour his glass by $s$ liters of kvass, print $-1$. Otherwise, print a single integer\u00a0\u2014 how much kvass in the least keg can be.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length l_{i}.\n\nIlya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.\n\nSticks with lengths a_1, a_2, a_3 and a_4 can make a rectangle if the following properties are observed:  a_1 \u2264 a_2 \u2264 a_3 \u2264 a_4  a_1 = a_2  a_3 = a_4 \n\nA rectangle can be made of sticks with lengths of, for example, 3\u00a03\u00a03\u00a03 or 2\u00a02\u00a04\u00a04. A rectangle cannot be made of, for example, sticks 5\u00a05\u00a05\u00a07.\n\nIlya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.\n\nYou have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of the available sticks.\n\nThe second line of the input contains n positive integers l_{i} (2 \u2264 l_{i} \u2264 10^6)\u00a0\u2014\u00a0the lengths of the sticks.\n\n\n-----Output-----\n\nThe first line of the output must contain a single non-negative integer\u00a0\u2014\u00a0the maximum total area of the rectangles that Ilya can make from the available sticks.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.\n\nThe pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches $2 \\cdot x, 3 \\cdot x, \\ldots, \\lfloor \\frac{y}{x} \\rfloor \\cdot x$.\n\nKeeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.\n\nIn other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Duck song\n\nFor simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.\n\nAndrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen: Andrew, Dmitry and Michal should eat at least $x$, $y$ and $z$ grapes, respectively. Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only. On the other hand, Dmitry is not a fan of black grapes\u00a0\u2014 any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes. Michal has a common taste\u00a0\u2014 he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.\n\nKnowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with $a$ green grapes, $b$ purple grapes and $c$ black grapes.\n\nHowever, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?\n\nIt is not required to distribute all the grapes, so it's possible that some of them will remain unused.\n\n\n-----Input-----\n\nThe first line contains three integers $x$, $y$ and $z$ ($1 \\le x, y, z \\le 10^5$)\u00a0\u2014 the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers $a$, $b$, $c$ ($1 \\le a, b, c \\le 10^5$)\u00a0\u2014 the number of green, purple and black grapes in the box.\n\n\n-----Output-----\n\nIf there is a grape distribution that allows everyone to be happy, print \"YES\", otherwise print \"NO\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have unlimited number of coins with values $1, 2, \\ldots, n$. You want to select some set of coins having the total value of $S$. \n\nIt is allowed to have multiple coins with the same value in the set. What is the minimum number of coins required to get sum $S$?\n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $S$ ($1 \\le n \\le 100\\,000$, $1 \\le S \\le 10^9$)\n\n\n-----Output-----\n\nPrint exactly one integer\u00a0\u2014 the minimum number of coins required to obtain sum $S$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.\n\nFor example, the string \"Hello\" for p = 2, q = 3 can be split to the two strings \"Hel\" and \"lo\" or to the two strings \"He\" and \"llo\".\n\nNote it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).\n\n\n-----Input-----\n\nThe first line contains three positive integers n, p, q (1 \u2264 p, q \u2264 n \u2264 100).\n\nThe second line contains the string s consists of lowercase and uppercase latin letters and digits.\n\n\n-----Output-----\n\nIf it's impossible to split the string s to the strings of length p and q print the only number \"-1\".\n\nOtherwise in the first line print integer k \u2014 the number of strings in partition of s.\n\nEach of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s \u2014 from left to right.\n\nIf there are several solutions print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA and B are preparing themselves for programming contests.\n\nAn important part of preparing for a competition is sharing programming knowledge from the experienced members to those who are just beginning to deal with the contests. Therefore, during the next team training A decided to make teams so that newbies are solving problems together with experienced participants.\n\nA believes that the optimal team of three people should consist of one experienced participant and two newbies. Thus, each experienced participant can share the experience with a large number of people.\n\nHowever, B believes that the optimal team should have two experienced members plus one newbie. Thus, each newbie can gain more knowledge and experience.\n\nAs a result, A and B have decided that all the teams during the training session should belong to one of the two types described above. Furthermore, they agree that the total number of teams should be as much as possible.\n\nThere are n experienced members and m newbies on the training session. Can you calculate what maximum number of teams can be formed?\n\n\n-----Input-----\n\nThe first line contains two integers n and m (0 \u2264 n, m \u2264 5\u00b710^5) \u2014 the number of experienced participants and newbies that are present at the training session. \n\n\n-----Output-----\n\nPrint the maximum number of teams that can be formed.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.\n\nFor example, the string \"Hello\" for p = 2, q = 3 can be split to the two strings \"Hel\" and \"lo\" or to the two strings \"He\" and \"llo\".\n\nNote it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).\n\n\n-----Input-----\n\nThe first line contains three positive integers n, p, q (1 \u2264 p, q \u2264 n \u2264 100).\n\nThe second line contains the string s consists of lowercase and uppercase latin letters and digits.\n\n\n-----Output-----\n\nIf it's impossible to split the string s to the strings of length p and q print the only number \"-1\".\n\nOtherwise in the first line print integer k \u2014 the number of strings in partition of s.\n\nEach of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s \u2014 from left to right.\n\nIf there are several solutions print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer\u00a0\u2014 the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.\n\nFor example, the string \"Hello\" for p = 2, q = 3 can be split to the two strings \"Hel\" and \"lo\" or to the two strings \"He\" and \"llo\".\n\nNote it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).\n\n\n-----Input-----\n\nThe first line contains three positive integers n, p, q (1 \u2264 p, q \u2264 n \u2264 100).\n\nThe second line contains the string s consists of lowercase and uppercase latin letters and digits.\n\n\n-----Output-----\n\nIf it's impossible to split the string s to the strings of length p and q print the only number \"-1\".\n\nOtherwise in the first line print integer k \u2014 the number of strings in partition of s.\n\nEach of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s \u2014 from left to right.\n\nIf there are several solutions print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nOne very important person has a piece of paper in the form of a rectangle a \u00d7 b.\n\nAlso, he has n seals. Each seal leaves an impression on the paper in the form of a rectangle of the size x_{i} \u00d7 y_{i}. Each impression must be parallel to the sides of the piece of paper (but seal can be rotated by 90 degrees).\n\nA very important person wants to choose two different seals and put them two impressions. Each of the selected seals puts exactly one impression. Impressions should not overlap (but they can touch sides), and the total area occupied by them should be the largest possible. What is the largest area that can be occupied by two seals?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, a and b (1 \u2264 n, a, b \u2264 100).\n\nEach of the next n lines contain two numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 100).\n\n\n-----Output-----\n\nPrint the largest total area that can be occupied by two seals. If you can not select two seals, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMonocarp has decided to buy a new TV set and hang it on the wall in his flat. The wall has enough free space so Monocarp can buy a TV set with screen width not greater than $a$ and screen height not greater than $b$. Monocarp is also used to TV sets with a certain aspect ratio: formally, if the width of the screen is $w$, and the height of the screen is $h$, then the following condition should be met: $\\frac{w}{h} = \\frac{x}{y}$.\n\nThere are many different TV sets in the shop. Monocarp is sure that for any pair of positive integers $w$ and $h$ there is a TV set with screen width $w$ and height $h$ in the shop.\n\nMonocarp isn't ready to choose the exact TV set he is going to buy. Firstly he wants to determine the optimal screen resolution. He has decided to try all possible variants of screen size. But he must count the number of pairs of positive integers $w$ and $h$, beforehand, such that $(w \\le a)$, $(h \\le b)$ and $(\\frac{w}{h} = \\frac{x}{y})$.\n\nIn other words, Monocarp wants to determine the number of TV sets having aspect ratio $\\frac{x}{y}$, screen width not exceeding $a$, and screen height not exceeding $b$. Two TV sets are considered different if they have different screen width or different screen height.\n\n\n-----Input-----\n\nThe first line contains four integers $a$, $b$, $x$, $y$ ($1 \\le a, b, x, y \\le 10^{18}$)\u00a0\u2014 the constraints on the screen width and height, and on the aspect ratio.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of different variants to choose TV screen width and screen height so that they meet the aforementioned constraints.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\n\n-----Input-----\n\nThe first line of the input contains two integers s and x (2 \u2264 s \u2264 10^12, 0 \u2264 x \u2264 10^12), the sum and bitwise xor of the pair of positive integers, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLuba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly a_{i} each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.\n\nLuba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length a_{i} if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.\n\nSee the examples for better understanding.\n\n\n-----Input-----\n\nThe first line of input contains two integer numbers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers a_{i} (1 \u2264 a_{i} \u2264 100) \u2014 the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.\n\n\n-----Output-----\n\nPrint one integer number \u2014 the minimum number of hours required to water the garden.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\n\n-----Input-----\n\nThe first line of the input contains two integers s and x (2 \u2264 s \u2264 10^12, 0 \u2264 x \u2264 10^12), the sum and bitwise xor of the pair of positive integers, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\n\n-----Input-----\n\nThe first line of the input contains two integers s and x (2 \u2264 s \u2264 10^12, 0 \u2264 x \u2264 10^12), the sum and bitwise xor of the pair of positive integers, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given n switches and m lamps. The i-th switch turns on some subset of the lamps. This information is given as the matrix a consisting of n rows and m columns where a_{i}, j = 1 if the i-th switch turns on the j-th lamp and a_{i}, j = 0 if the i-th switch is not connected to the j-th lamp.\n\nInitially all m lamps are turned off.\n\nSwitches change state only from \"off\" to \"on\". It means that if you press two or more switches connected to the same lamp then the lamp will be turned on after any of this switches is pressed and will remain its state even if any switch connected to this lamp is pressed afterwards.\n\nIt is guaranteed that if you push all n switches then all m lamps will be turned on.\n\nYour think that you have too many switches and you would like to ignore one of them. \n\nYour task is to say if there exists such a switch that if you will ignore (not use) it but press all the other n - 1 switches then all the m lamps will be turned on.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 2000) \u2014 the number of the switches and the number of the lamps.\n\nThe following n lines contain m characters each. The character a_{i}, j is equal to '1' if the i-th switch turns on the j-th lamp and '0' otherwise.\n\nIt is guaranteed that if you press all n switches all m lamps will be turned on.\n\n\n-----Output-----\n\nPrint \"YES\" if there is a switch that if you will ignore it and press all the other n - 1 switches then all m lamps will be turned on. Print \"NO\" if there is no such switch.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe number \"zero\" is called \"love\" (or \"l'oeuf\" to be precise, literally means \"egg\" in French), for example when denoting the zero score in a game of tennis. \n\nAki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.\n\nHowever, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.\n\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ ($1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThose days, many boys use beautiful girls' photos as avatars in forums. So it is pretty hard to tell the gender of a user at the first glance. Last year, our hero went to a forum and had a nice chat with a beauty (he thought so). After that they talked very often and eventually they became a couple in the network. \n\nBut yesterday, he came to see \"her\" in the real world and found out \"she\" is actually a very strong man! Our hero is very sad and he is too tired to love again now. So he came up with a way to recognize users' genders by their user names.\n\nThis is his method: if the number of distinct characters in one's user name is odd, then he is a male, otherwise she is a female. You are given the string that denotes the user name, please help our hero to determine the gender of this user by his method.\n\n\n-----Input-----\n\nThe first line contains a non-empty string, that contains only lowercase English letters \u2014 the user name. This string contains at most 100 letters.\n\n\n-----Output-----\n\nIf it is a female by our hero's method, print \"CHAT WITH HER!\" (without the quotes), otherwise, print \"IGNORE HIM!\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nKevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\n\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is $\\operatorname{max}(0.3 x,(1 - \\frac{m}{250}) x - 50 w)$. His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\n\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\n\n\n-----Input-----\n\nThe first line of the input contains five space-separated integers m_1, m_2, m_3, m_4, m_5, where m_{i} (0 \u2264 m_{i} \u2264 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w_1, w_2, w_3, w_4, w_5, where w_{i} (0 \u2264 w_{i} \u2264 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers h_{s} and h_{u} (0 \u2264 h_{s}, h_{u} \u2264 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the value of Kevin's final score.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 n)\u00a0\u2014 the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVector Willman and Array Bolt are the two most famous athletes of Byteforces. They are going to compete in a race with a distance of L meters today.\n\n [Image] \n\nWillman and Bolt have exactly the same speed, so when they compete the result is always a tie. That is a problem for the organizers because they want a winner. \n\nWhile watching previous races the organizers have noticed that Willman can perform only steps of length equal to w meters, and Bolt can perform only steps of length equal to b meters. Organizers decided to slightly change the rules of the race. Now, at the end of the racetrack there will be an abyss, and the winner will be declared the athlete, who manages to run farther from the starting point of the the racetrack (which is not the subject to change by any of the athletes). \n\nNote that none of the athletes can run infinitely far, as they both will at some moment of time face the point, such that only one step further will cause them to fall in the abyss. In other words, the athlete will not fall into the abyss if the total length of all his steps will be less or equal to the chosen distance L.\n\nSince the organizers are very fair, the are going to set the length of the racetrack as an integer chosen randomly and uniformly in range from 1 to t (both are included). What is the probability that Willman and Bolt tie again today?\n\n\n-----Input-----\n\nThe first line of the input contains three integers t, w and b (1 \u2264 t, w, b \u2264 5\u00b710^18) \u2014 the maximum possible length of the racetrack, the length of Willman's steps and the length of Bolt's steps respectively.\n\n\n-----Output-----\n\nPrint the answer to the problem as an irreducible fraction [Image]. Follow the format of the samples output.\n\nThe fraction [Image] (p and q are integers, and both p \u2265 0 and q > 0 holds) is called irreducible, if there is no such integer d > 1, that both p and q are divisible by d.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have unlimited number of coins with values $1, 2, \\ldots, n$. You want to select some set of coins having the total value of $S$. \n\nIt is allowed to have multiple coins with the same value in the set. What is the minimum number of coins required to get sum $S$?\n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $S$ ($1 \\le n \\le 100\\,000$, $1 \\le S \\le 10^9$)\n\n\n-----Output-----\n\nPrint exactly one integer\u00a0\u2014 the minimum number of coins required to obtain sum $S$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.\n\n\n-----Input-----\n\nThe single line of the input contains a pair of integers m, s (1 \u2264 m \u2264 100, 0 \u2264 s \u2264 900) \u2014 the length and the sum of the digits of the required numbers.\n\n\n-----Output-----\n\nIn the output print the pair of the required non-negative integer numbers \u2014 first the minimum possible number, then \u2014 the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers \"-1 -1\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths \u2013 from a base to its assigned spaceship \u2013 do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers R, B(1 \u2264 R, B \u2264 10). For 1 \u2264 i \u2264 R, the i + 1-th line contains two space-separated integers x_{i} and y_{i} (|x_{i}|, |y_{i}| \u2264 10000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.\n\n\n-----Output-----\n\nIf it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAfter lessons Nastya decided to read a book. The book contains $n$ chapters, going one after another, so that one page of the book belongs to exactly one chapter and each chapter contains at least one page.\n\nYesterday evening Nastya did not manage to finish reading the book, so she marked the page with number $k$ as the first page which was not read (i.e. she read all pages from the $1$-st to the $(k-1)$-th).\n\nThe next day Nastya's friend Igor came and asked her, how many chapters remain to be read by Nastya? Nastya is too busy now, so she asks you to compute the number of chapters she has not completely read yet (i.e. the number of chapters she has not started to read or has finished reading somewhere in the middle).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 100$)\u00a0\u2014 the number of chapters in the book.\n\nThere are $n$ lines then. The $i$-th of these lines contains two integers $l_i$, $r_i$ separated by space ($l_1 = 1$, $l_i \\leq r_i$)\u00a0\u2014 numbers of the first and the last pages of the $i$-th chapter. It's guaranteed that $l_{i+1} = r_i + 1$ for all $1 \\leq i \\leq n-1$, and also that every chapter contains at most $100$ pages.\n\nThe $(n+2)$-th line contains a single integer $k$ ($1 \\leq k \\leq r_n$)\u00a0\u2014 the index of the marked page. \n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of chapters which has not been completely read so far.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOne day Alex decided to remember childhood when computers were not too powerful and lots of people played only default games. Alex enjoyed playing Minesweeper that time. He imagined that he saved world from bombs planted by terrorists, but he rarely won.\n\nAlex has grown up since then, so he easily wins the most difficult levels. This quickly bored him, and he thought: what if the computer gave him invalid fields in the childhood and Alex could not win because of it?\n\nHe needs your help to check it.\n\nA Minesweeper field is a rectangle $n \\times m$, where each cell is either empty, or contains a digit from $1$ to $8$, or a bomb. The field is valid if for each cell:   if there is a digit $k$ in the cell, then exactly $k$ neighboring cells have bombs.  if the cell is empty, then all neighboring cells have no bombs. \n\nTwo cells are neighbors if they have a common side or a corner (i.\u00a0e. a cell has at most $8$ neighboring cells).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 100$) \u2014 the sizes of the field.\n\nThe next $n$ lines contain the description of the field. Each line contains $m$ characters, each of them is \".\" (if this cell is empty), \"*\" (if there is bomb in this cell), or a digit from $1$ to $8$, inclusive.\n\n\n-----Output-----\n\nPrint \"YES\", if the field is valid and \"NO\" otherwise.\n\nYou can choose the case (lower or upper) for each letter arbitrarily.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given n switches and m lamps. The i-th switch turns on some subset of the lamps. This information is given as the matrix a consisting of n rows and m columns where a_{i}, j = 1 if the i-th switch turns on the j-th lamp and a_{i}, j = 0 if the i-th switch is not connected to the j-th lamp.\n\nInitially all m lamps are turned off.\n\nSwitches change state only from \"off\" to \"on\". It means that if you press two or more switches connected to the same lamp then the lamp will be turned on after any of this switches is pressed and will remain its state even if any switch connected to this lamp is pressed afterwards.\n\nIt is guaranteed that if you push all n switches then all m lamps will be turned on.\n\nYour think that you have too many switches and you would like to ignore one of them. \n\nYour task is to say if there exists such a switch that if you will ignore (not use) it but press all the other n - 1 switches then all the m lamps will be turned on.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 2000) \u2014 the number of the switches and the number of the lamps.\n\nThe following n lines contain m characters each. The character a_{i}, j is equal to '1' if the i-th switch turns on the j-th lamp and '0' otherwise.\n\nIt is guaranteed that if you press all n switches all m lamps will be turned on.\n\n\n-----Output-----\n\nPrint \"YES\" if there is a switch that if you will ignore it and press all the other n - 1 switches then all m lamps will be turned on. Print \"NO\" if there is no such switch.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOne day Alex decided to remember childhood when computers were not too powerful and lots of people played only default games. Alex enjoyed playing Minesweeper that time. He imagined that he saved world from bombs planted by terrorists, but he rarely won.\n\nAlex has grown up since then, so he easily wins the most difficult levels. This quickly bored him, and he thought: what if the computer gave him invalid fields in the childhood and Alex could not win because of it?\n\nHe needs your help to check it.\n\nA Minesweeper field is a rectangle $n \\times m$, where each cell is either empty, or contains a digit from $1$ to $8$, or a bomb. The field is valid if for each cell:   if there is a digit $k$ in the cell, then exactly $k$ neighboring cells have bombs.  if the cell is empty, then all neighboring cells have no bombs. \n\nTwo cells are neighbors if they have a common side or a corner (i.\u00a0e. a cell has at most $8$ neighboring cells).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 100$) \u2014 the sizes of the field.\n\nThe next $n$ lines contain the description of the field. Each line contains $m$ characters, each of them is \".\" (if this cell is empty), \"*\" (if there is bomb in this cell), or a digit from $1$ to $8$, inclusive.\n\n\n-----Output-----\n\nPrint \"YES\", if the field is valid and \"NO\" otherwise.\n\nYou can choose the case (lower or upper) for each letter arbitrarily.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA telephone number is a sequence of exactly $11$ digits such that its first digit is 8.\n\nVasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.\n\nYou have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($13 \\le n < 10^5$, $n$ is odd) \u2014 the length of string $s$.\n\nThe second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.\n\n\n-----Output-----\n\nIf Vasya has a strategy that guarantees him victory, print YES.\n\nOtherwise print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOne day Alex decided to remember childhood when computers were not too powerful and lots of people played only default games. Alex enjoyed playing Minesweeper that time. He imagined that he saved world from bombs planted by terrorists, but he rarely won.\n\nAlex has grown up since then, so he easily wins the most difficult levels. This quickly bored him, and he thought: what if the computer gave him invalid fields in the childhood and Alex could not win because of it?\n\nHe needs your help to check it.\n\nA Minesweeper field is a rectangle $n \\times m$, where each cell is either empty, or contains a digit from $1$ to $8$, or a bomb. The field is valid if for each cell:   if there is a digit $k$ in the cell, then exactly $k$ neighboring cells have bombs.  if the cell is empty, then all neighboring cells have no bombs. \n\nTwo cells are neighbors if they have a common side or a corner (i.\u00a0e. a cell has at most $8$ neighboring cells).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 100$) \u2014 the sizes of the field.\n\nThe next $n$ lines contain the description of the field. Each line contains $m$ characters, each of them is \".\" (if this cell is empty), \"*\" (if there is bomb in this cell), or a digit from $1$ to $8$, inclusive.\n\n\n-----Output-----\n\nPrint \"YES\", if the field is valid and \"NO\" otherwise.\n\nYou can choose the case (lower or upper) for each letter arbitrarily.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have two variables a and b. Consider the following sequence of actions performed with these variables: If a = 0 or b = 0, end the process. Otherwise, go to step 2; If a \u2265 2\u00b7b, then set the value of a to a - 2\u00b7b, and repeat step 1. Otherwise, go to step 3; If b \u2265 2\u00b7a, then set the value of b to b - 2\u00b7a, and repeat step 1. Otherwise, end the process.\n\nInitially the values of a and b are positive integers, and so the process will be finite.\n\nYou have to determine the values of a and b after the process ends.\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 \u2264 n, m \u2264 10^18). n is the initial value of variable a, and m is the initial value of variable b.\n\n\n-----Output-----\n\nPrint two integers \u2014 the values of a and b after the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThere are n children in Jzzhu's school. Jzzhu is going to give some candies to them. Let's number all the children from 1 to n. The i-th child wants to get at least a_{i} candies.\n\nJzzhu asks children to line up. Initially, the i-th child stands at the i-th place of the line. Then Jzzhu start distribution of the candies. He follows the algorithm:\n\n  Give m candies to the first child of the line.  If this child still haven't got enough candies, then the child goes to the end of the line, else the child go home.  Repeat the first two steps while the line is not empty. \n\nConsider all the children in the order they go home. Jzzhu wants to know, which child will be the last in this order?\n\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n \u2264 100;\u00a01 \u2264 m \u2264 100). The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100).\n\n\n-----Output-----\n\nOutput a single integer, representing the number of the last child.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOne day Alex was creating a contest about his friends, but accidentally deleted it. Fortunately, all the problems were saved, but now he needs to find them among other problems.\n\nBut there are too many problems, to do it manually. Alex asks you to write a program, which will determine if a problem is from this contest by its name.\n\nIt is known, that problem is from this contest if and only if its name contains one of Alex's friends' name exactly once. His friends' names are \"Danil\", \"Olya\", \"Slava\", \"Ann\" and \"Nikita\".\n\nNames are case sensitive.\n\n\n-----Input-----\n\nThe only line contains string from lowercase and uppercase letters and \"_\" symbols of length, not more than 100 \u2014 the name of the problem.\n\n\n-----Output-----\n\nPrint \"YES\", if problem is from this contest, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPetya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n\nArithmetic progression is a sequence a_1, a_1 + d, a_1 + 2d, ..., a_1 + (n - 1)d, where a_1 and d are any numbers.\n\nGeometric progression is a sequence b_1, b_2 = b_1q, ..., b_{n} = b_{n} - 1q, where b_1 \u2260 0, q \u2260 0, q \u2260 1. \n\nHelp Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.\n\n\n-----Input-----\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.\n\n\n-----Output-----\n\nPrint the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element.\n\nPrint 42 if the given sequence is not an arithmetic or geometric progression.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer $p$ (which may be positive, negative, or zero). To combine their tastes, they invented $p$-binary numbers of the form $2^x + p$, where $x$ is a non-negative integer.\n\nFor example, some $-9$-binary (\"minus nine\" binary) numbers are: $-8$ (minus eight), $7$ and $1015$ ($-8=2^0-9$, $7=2^4-9$, $1015=2^{10}-9$).\n\nThe boys now use $p$-binary numbers to represent everything. They now face a problem: given a positive integer $n$, what's the smallest number of $p$-binary numbers (not necessarily distinct) they need to represent $n$ as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.\n\nFor example, if $p=0$ we can represent $7$ as $2^0 + 2^1 + 2^2$.\n\nAnd if $p=-9$ we can represent $7$ as one number $(2^4-9)$.\n\nNote that negative $p$-binary numbers are allowed to be in the sum (see the Notes section for an example).\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $p$ ($1 \\leq n \\leq 10^9$, $-1000 \\leq p \\leq 1000$).\n\n\n-----Output-----\n\nIf it is impossible to represent $n$ as the sum of any number of $p$-binary numbers, print a single integer $-1$. Otherwise, print the smallest possible number of summands.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nChouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \\ldots, x_k$.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\leq k \\leq n \\leq 10^5$, $n-1 \\leq m \\leq 10^5$)\u00a0\u2014 the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains $k$ distinct integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$).\n\nEach of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \\leq u,v \\leq n, 1 \\leq w \\leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\n\n-----Output-----\n\nThe first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIs it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the number of round participants.\n\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 4126)\u00a0\u2014 the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.\n\n\n-----Output-----\n\nIf the round is rated for sure, print \"rated\". If the round is unrated for sure, print \"unrated\". If it's impossible to determine whether the round is rated or not, print \"maybe\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nChouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \\ldots, x_k$.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\leq k \\leq n \\leq 10^5$, $n-1 \\leq m \\leq 10^5$)\u00a0\u2014 the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains $k$ distinct integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$).\n\nEach of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \\leq u,v \\leq n, 1 \\leq w \\leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\n\n-----Output-----\n\nThe first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer $p$ (which may be positive, negative, or zero). To combine their tastes, they invented $p$-binary numbers of the form $2^x + p$, where $x$ is a non-negative integer.\n\nFor example, some $-9$-binary (\"minus nine\" binary) numbers are: $-8$ (minus eight), $7$ and $1015$ ($-8=2^0-9$, $7=2^4-9$, $1015=2^{10}-9$).\n\nThe boys now use $p$-binary numbers to represent everything. They now face a problem: given a positive integer $n$, what's the smallest number of $p$-binary numbers (not necessarily distinct) they need to represent $n$ as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.\n\nFor example, if $p=0$ we can represent $7$ as $2^0 + 2^1 + 2^2$.\n\nAnd if $p=-9$ we can represent $7$ as one number $(2^4-9)$.\n\nNote that negative $p$-binary numbers are allowed to be in the sum (see the Notes section for an example).\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $p$ ($1 \\leq n \\leq 10^9$, $-1000 \\leq p \\leq 1000$).\n\n\n-----Output-----\n\nIf it is impossible to represent $n$ as the sum of any number of $p$-binary numbers, print a single integer $-1$. Otherwise, print the smallest possible number of summands.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nChouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \\ldots, x_k$.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\leq k \\leq n \\leq 10^5$, $n-1 \\leq m \\leq 10^5$)\u00a0\u2014 the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains $k$ distinct integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$).\n\nEach of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \\leq u,v \\leq n, 1 \\leq w \\leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\n\n-----Output-----\n\nThe first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nBran and his older sister Arya are from the same house. Bran like candies so much, so Arya is going to give him some Candies.\n\nAt first, Arya and Bran have 0 Candies. There are n days, at the i-th day, Arya finds a_{i} candies in a box, that is given by the Many-Faced God. Every day she can give Bran at most 8 of her candies. If she don't give him the candies at the same day, they are saved for her and she can give them to him later.\n\nYour task is to find the minimum number of days Arya needs to give Bran k candies before the end of the n-th day. Formally, you need to output the minimum day index to the end of which k candies will be given out (the days are indexed from 1 to n).\n\nPrint -1 if she can't give him k candies during n given days.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10000).\n\nThe second line contains n integers a_1, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 100).\n\n\n-----Output-----\n\nIf it is impossible for Arya to give Bran k candies within n days, print -1.\n\nOtherwise print a single integer\u00a0\u2014 the minimum number of days Arya needs to give Bran k candies before the end of the n-th day.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). \n\nYour task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5). Next n lines contain four integers each, describing a single rectangle: x_1, y_1, x_2, y_2 (0 \u2264 x_1 < x_2 \u2264 31400, 0 \u2264 y_1 < y_2 \u2264 31400) \u2014 x_1 and x_2 are x-coordinates of the left and right edges of the rectangle, and y_1 and y_2 are y-coordinates of the bottom and top edges of the rectangle. \n\nNo two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).\n\n\n-----Output-----\n\nIn a single line print \"YES\", if the given rectangles form a square, or \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.\n\nWhat is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.\n\n\n-----Input-----\n\nThe only line contains 4 integers n, a, b, c (1 \u2264 n, a, b, c \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). \n\nYour task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5). Next n lines contain four integers each, describing a single rectangle: x_1, y_1, x_2, y_2 (0 \u2264 x_1 < x_2 \u2264 31400, 0 \u2264 y_1 < y_2 \u2264 31400) \u2014 x_1 and x_2 are x-coordinates of the left and right edges of the rectangle, and y_1 and y_2 are y-coordinates of the bottom and top edges of the rectangle. \n\nNo two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).\n\n\n-----Output-----\n\nIn a single line print \"YES\", if the given rectangles form a square, or \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya received a gift on New Year\u00a0\u2014 a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).\n\nUnfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. \n\nNastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.\n\nNastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.\n\n\n-----Input-----\n\nThe only line contains two integers x and k (0 \u2264 x, k \u2264 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.\n\n\n-----Output-----\n\nIn the only line print a single integer\u00a0\u2014 the expected number of dresses Nastya will own one year later modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). \n\nYour task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5). Next n lines contain four integers each, describing a single rectangle: x_1, y_1, x_2, y_2 (0 \u2264 x_1 < x_2 \u2264 31400, 0 \u2264 y_1 < y_2 \u2264 31400) \u2014 x_1 and x_2 are x-coordinates of the left and right edges of the rectangle, and y_1 and y_2 are y-coordinates of the bottom and top edges of the rectangle. \n\nNo two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).\n\n\n-----Output-----\n\nIn a single line print \"YES\", if the given rectangles form a square, or \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nFind the number of k-divisible numbers on the segment [a, b]. In other words you need to find the number of such integer values x that a \u2264 x \u2264 b and x is divisible by k.\n\n\n-----Input-----\n\nThe only line contains three space-separated integers k, a and b (1 \u2264 k \u2264 10^18; - 10^18 \u2264 a \u2264 b \u2264 10^18).\n\n\n-----Output-----\n\nPrint the required number.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's consider equation:x^2 + s(x)\u00b7x - n = 0,  \n\nwhere x, n are positive integers, s(x) is the function, equal to the sum of digits of number x in the decimal number system.\n\nYou are given an integer n, find the smallest positive integer root of equation x, or else determine that there are no such roots.\n\n\n-----Input-----\n\nA single line contains integer n (1 \u2264 n \u2264 10^18) \u2014 the equation parameter.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier. \n\n\n-----Output-----\n\nPrint -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer x (x > 0), that the equation given in the statement holds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits\u00a0\u2014 lemons, apples and pears\u00a0\u2014 should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\n\n-----Input-----\n\nThe first line contains the positive integer a (1 \u2264 a \u2264 1000)\u00a0\u2014 the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 \u2264 b \u2264 1000)\u00a0\u2014 the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 \u2264 c \u2264 1000)\u00a0\u2014 the number of pears Nikolay has.\n\n\n-----Output-----\n\nPrint the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSummer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part-time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant.\n\nShop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i-th day k_{i} products will be put up for sale and exactly l_{i} clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren't any left, leaves the shop without buying anything. Moreover, due to the short shelf-life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren't kept on the next day and are sent to the dump.\n\nFor advertising purposes manager offered to start a sell-out in the shop. He asked Noora to choose any f days from n next for sell-outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i-th day shop planned to put up for sale k_{i} products and Noora has chosen this day for sell-out, shelves of the shop would keep 2\u00b7k_{i} products. Consequently, there is an opportunity to sell two times more products on days of sell-out.\n\nNoora's task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.\n\n\n-----Input-----\n\nThe first line contains two integers n and f (1 \u2264 n \u2264 10^5, 0 \u2264 f \u2264 n) denoting the number of days in shop's plan and the number of days that Noora has to choose for sell-out.\n\nEach line of the following n subsequent lines contains two integers k_{i}, l_{i} (0 \u2264 k_{i}, l_{i} \u2264 10^9) denoting the number of products on the shelves of the shop on the i-th day and the number of clients that will come to the shop on i-th day.\n\n\n-----Output-----\n\nPrint a single integer denoting the maximal number of products that shop can sell.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nArray of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him t_{j} minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.\n\nBy solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.\n\nPolycarp has M minutes of time. What is the maximum number of points he can earn?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, k and M (1 \u2264 n \u2264 45, 1 \u2264 k \u2264 45, 0 \u2264 M \u2264 2\u00b710^9).\n\nThe second line contains k integer numbers, values t_{j} (1 \u2264 t_{j} \u2264 1000000), where t_{j} is the time in minutes required to solve j-th subtask of any task.\n\n\n-----Output-----\n\nPrint the maximum amount of points Polycarp can earn in M minutes.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMonocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.\n\nMonocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\\frac{n}{2}$ digits.\n\nMonocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.\n\nIf the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.\n\n\n-----Input-----\n\nThe first line contains one even integer $n$ $(2 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the number of digits in the ticket.\n\nThe second line contains a string of $n$ digits and \"?\" characters \u2014 the ticket which Monocarp and Bicarp have found. If the $i$-th character is \"?\", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of \"?\" characters is even.\n\n\n-----Output-----\n\nIf Monocarp wins, print \"Monocarp\" (without quotes). Otherwise print \"Bicarp\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nWe get more and more news about DDoS-attacks of popular websites.\n\nArseny is an admin and he thinks that a website is under a DDoS-attack if the total number of requests for a some period of time exceeds $100 \\cdot t$, where $t$ \u2014 the number of seconds in this time segment. \n\nArseny knows statistics on the number of requests per second since the server is booted. He knows the sequence $r_1, r_2, \\dots, r_n$, where $r_i$ \u2014 the number of requests in the $i$-th second after boot. \n\nDetermine the length of the longest continuous period of time, which Arseny considers to be a DDoS-attack. A seeking time period should not go beyond the boundaries of the segment $[1, n]$.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 5000$) \u2014 number of seconds since server has been booted. The second line contains sequence of integers $r_1, r_2, \\dots, r_n$ ($0 \\le r_i \\le 5000$), $r_i$ \u2014 number of requests in the $i$-th second.\n\n\n-----Output-----\n\nPrint the only integer number \u2014 the length of the longest time period which is considered to be a DDoS-attack by Arseny. If it doesn't exist print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSomeone gave Alyona an array containing n positive integers a_1, a_2, ..., a_{n}. In one operation, Alyona can choose any element of the array and decrease it, i.e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all.\n\nFormally, after applying some operations Alyona will get an array of n positive integers b_1, b_2, ..., b_{n} such that 1 \u2264 b_{i} \u2264 a_{i} for every 1 \u2264 i \u2264 n. Your task is to determine the maximum possible value of mex of this array.\n\nMex of an array in this problem is the minimum positive integer that doesn't appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of elements in the Alyona's array.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint one positive integer\u00a0\u2014 the maximum possible value of mex of the array after Alyona applies some (possibly none) operations.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMonocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.\n\nMonocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\\frac{n}{2}$ digits.\n\nMonocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.\n\nIf the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.\n\n\n-----Input-----\n\nThe first line contains one even integer $n$ $(2 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the number of digits in the ticket.\n\nThe second line contains a string of $n$ digits and \"?\" characters \u2014 the ticket which Monocarp and Bicarp have found. If the $i$-th character is \"?\", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of \"?\" characters is even.\n\n\n-----Output-----\n\nIf Monocarp wins, print \"Monocarp\" (without quotes). Otherwise print \"Bicarp\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining two segments, using the first two as a guide:  [Image] \n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] \n\nAfter that, she can draw the remaining four segments, using the first three as a guide:  [Image] \n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\n\n-----Input-----\n\nThe only line of input contains a single integer $n$ ($1 \\le n \\le 10^{9}$), the number of squares that Sofia wants to draw.\n\n\n-----Output-----\n\nPrint single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMonocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.\n\nMonocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\\frac{n}{2}$ digits.\n\nMonocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.\n\nIf the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.\n\n\n-----Input-----\n\nThe first line contains one even integer $n$ $(2 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the number of digits in the ticket.\n\nThe second line contains a string of $n$ digits and \"?\" characters \u2014 the ticket which Monocarp and Bicarp have found. If the $i$-th character is \"?\", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of \"?\" characters is even.\n\n\n-----Output-----\n\nIf Monocarp wins, print \"Monocarp\" (without quotes). Otherwise print \"Bicarp\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nRight now she actually isn't. But she will be, if you don't solve this problem.\n\nYou are given integers n, k, A and B. There is a number x, which is initially equal to n. You are allowed to perform two types of operations:   Subtract 1 from x. This operation costs you A coins.  Divide x by k. Can be performed only if x is divisible by k. This operation costs you B coins.  What is the minimum amount of coins you have to pay to make x equal to 1?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^9).\n\nThe second line contains a single integer k (1 \u2264 k \u2264 2\u00b710^9).\n\nThe third line contains a single integer A (1 \u2264 A \u2264 2\u00b710^9).\n\nThe fourth line contains a single integer B (1 \u2264 B \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of coins you have to pay to make x equal to 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAllen has a LOT of money. He has $n$ dollars in the bank. For security reasons, he wants to withdraw it in cash (we will not disclose the reasons here). The denominations for dollar bills are $1$, $5$, $10$, $20$, $100$. What is the minimum number of bills Allen could receive after withdrawing his entire balance?\n\n\n-----Input-----\n\nThe first and only line of input contains a single integer $n$ ($1 \\le n \\le 10^9$).\n\n\n-----Output-----\n\nOutput the minimum number of bills that Allen could receive.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 \u2264 w \u2264 10^9, 1 \u2264 m \u2264 10^9) \u2014 the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBeroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.\n\nBeroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.\n\nFor example:\n\n  the following words have typos: \"hellno\", \"hackcerrs\" and \"backtothefutttture\";  the following words don't have typos: \"helllllooooo\", \"tobeornottobe\" and \"oooooo\". \n\nWhen Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.\n\nImplement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.\n\n\n-----Input-----\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.\n\n\n-----Output-----\n\nPrint the given word without any changes if there are no typos.\n\nIf there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA company of $n$ friends wants to order exactly two pizzas. It is known that in total there are $9$ pizza ingredients in nature, which are denoted by integers from $1$ to $9$.\n\nEach of the $n$ friends has one or more favorite ingredients: the $i$-th of friends has the number of favorite ingredients equal to $f_i$ ($1 \\le f_i \\le 9$) and your favorite ingredients form the sequence $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nThe website of CodePizza restaurant has exactly $m$ ($m \\ge 2$) pizzas. Each pizza is characterized by a set of $r_j$ ingredients $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le r_j \\le 9$, $1 \\le a_{jt} \\le 9$) , which are included in it, and its price is $c_j$.\n\nHelp your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 2 \\le m \\le 10^5$) \u2014 the number of friends in the company and the number of pizzas, respectively.\n\nNext, the $n$ lines contain descriptions of favorite ingredients of the friends: the $i$-th of them contains the number of favorite ingredients $f_i$ ($1 \\le f_i \\le 9$) and a sequence of distinct integers $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nNext, the $m$ lines contain pizza descriptions: the $j$-th of them contains the integer price of the pizza $c_j$ ($1 \\le c_j \\le 10^9$), the number of ingredients $r_j$ ($1 \\le r_j \\le 9$) and the ingredients themselves as a sequence of distinct integers $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le a_{jt} \\le 9$).\n\n\n-----Output-----\n\nOutput two integers $j_1$ and $j_2$ ($1 \\le j_1,j_2 \\le m$, $j_1 \\ne j_2$) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVictor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.\n\nVictor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.\n\nYou are given a word s. Can you predict what will it become after correction?\n\nIn this problem letters a, e, i, o, u and y are considered to be vowels.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters \u2014 the word before the correction.\n\n\n-----Output-----\n\nOutput the word s after the correction.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA company of $n$ friends wants to order exactly two pizzas. It is known that in total there are $9$ pizza ingredients in nature, which are denoted by integers from $1$ to $9$.\n\nEach of the $n$ friends has one or more favorite ingredients: the $i$-th of friends has the number of favorite ingredients equal to $f_i$ ($1 \\le f_i \\le 9$) and your favorite ingredients form the sequence $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nThe website of CodePizza restaurant has exactly $m$ ($m \\ge 2$) pizzas. Each pizza is characterized by a set of $r_j$ ingredients $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le r_j \\le 9$, $1 \\le a_{jt} \\le 9$) , which are included in it, and its price is $c_j$.\n\nHelp your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 2 \\le m \\le 10^5$) \u2014 the number of friends in the company and the number of pizzas, respectively.\n\nNext, the $n$ lines contain descriptions of favorite ingredients of the friends: the $i$-th of them contains the number of favorite ingredients $f_i$ ($1 \\le f_i \\le 9$) and a sequence of distinct integers $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nNext, the $m$ lines contain pizza descriptions: the $j$-th of them contains the integer price of the pizza $c_j$ ($1 \\le c_j \\le 10^9$), the number of ingredients $r_j$ ($1 \\le r_j \\le 9$) and the ingredients themselves as a sequence of distinct integers $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le a_{jt} \\le 9$).\n\n\n-----Output-----\n\nOutput two integers $j_1$ and $j_2$ ($1 \\le j_1,j_2 \\le m$, $j_1 \\ne j_2$) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nSagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given a sequence a_1, a_2, ..., a_{n} of one-dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment a_{i} lies within segment a_{j}.\n\nSegment [l_1, r_1] lies within segment [l_2, r_2] iff l_1 \u2265 l_2 and r_1 \u2264 r_2.\n\nPrint indices i and j. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of segments.\n\nEach of the next n lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9) \u2014 the i-th segment.\n\n\n-----Output-----\n\nPrint two distinct indices i and j such that segment a_{i} lies within segment a_{j}. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA company of $n$ friends wants to order exactly two pizzas. It is known that in total there are $9$ pizza ingredients in nature, which are denoted by integers from $1$ to $9$.\n\nEach of the $n$ friends has one or more favorite ingredients: the $i$-th of friends has the number of favorite ingredients equal to $f_i$ ($1 \\le f_i \\le 9$) and your favorite ingredients form the sequence $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nThe website of CodePizza restaurant has exactly $m$ ($m \\ge 2$) pizzas. Each pizza is characterized by a set of $r_j$ ingredients $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le r_j \\le 9$, $1 \\le a_{jt} \\le 9$) , which are included in it, and its price is $c_j$.\n\nHelp your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 2 \\le m \\le 10^5$) \u2014 the number of friends in the company and the number of pizzas, respectively.\n\nNext, the $n$ lines contain descriptions of favorite ingredients of the friends: the $i$-th of them contains the number of favorite ingredients $f_i$ ($1 \\le f_i \\le 9$) and a sequence of distinct integers $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nNext, the $m$ lines contain pizza descriptions: the $j$-th of them contains the integer price of the pizza $c_j$ ($1 \\le c_j \\le 10^9$), the number of ingredients $r_j$ ($1 \\le r_j \\le 9$) and the ingredients themselves as a sequence of distinct integers $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le a_{jt} \\le 9$).\n\n\n-----Output-----\n\nOutput two integers $j_1$ and $j_2$ ($1 \\le j_1,j_2 \\le m$, $j_1 \\ne j_2$) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA telephone number is a sequence of exactly $11$ digits such that its first digit is 8.\n\nVasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.\n\nYou have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($13 \\le n < 10^5$, $n$ is odd) \u2014 the length of string $s$.\n\nThe second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.\n\n\n-----Output-----\n\nIf Vasya has a strategy that guarantees him victory, print YES.\n\nOtherwise print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.\n\n\n-----Input-----\n\nThe single line of the input contains a pair of integers m, s (1 \u2264 m \u2264 100, 0 \u2264 s \u2264 900) \u2014 the length and the sum of the digits of the required numbers.\n\n\n-----Output-----\n\nIn the output print the pair of the required non-negative integer numbers \u2014 first the minimum possible number, then \u2014 the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers \"-1 -1\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThere are n children in Jzzhu's school. Jzzhu is going to give some candies to them. Let's number all the children from 1 to n. The i-th child wants to get at least a_{i} candies.\n\nJzzhu asks children to line up. Initially, the i-th child stands at the i-th place of the line. Then Jzzhu start distribution of the candies. He follows the algorithm:\n\n  Give m candies to the first child of the line.  If this child still haven't got enough candies, then the child goes to the end of the line, else the child go home.  Repeat the first two steps while the line is not empty. \n\nConsider all the children in the order they go home. Jzzhu wants to know, which child will be the last in this order?\n\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n \u2264 100;\u00a01 \u2264 m \u2264 100). The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100).\n\n\n-----Output-----\n\nOutput a single integer, representing the number of the last child.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.\n\n\n-----Input-----\n\nThe single line of the input contains a pair of integers m, s (1 \u2264 m \u2264 100, 0 \u2264 s \u2264 900) \u2014 the length and the sum of the digits of the required numbers.\n\n\n-----Output-----\n\nIn the output print the pair of the required non-negative integer numbers \u2014 first the minimum possible number, then \u2014 the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers \"-1 -1\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nOn the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n elements, you must make it a co-prime array in as few moves as possible.\n\nIn each move you can insert any positive integral number you want not greater than 10^9 in any place in the array.\n\nAn array is co-prime if any two adjacent numbers of it are co-prime.\n\nIn the number theory, two integers a and b are said to be co-prime if the only positive integer that divides both of them is 1.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in the given array.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array a.\n\n\n-----Output-----\n\nPrint integer k on the first line \u2014 the least number of elements needed to add to the array a to make it co-prime.\n\nThe second line should contain n + k integers a_{j} \u2014 the elements of the array a after adding k elements to it. Note that the new array should be co-prime, so any two adjacent values should be co-prime. Also the new array should be got from the original array a by adding k elements to it.\n\nIf there are multiple answers you can print any one of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.\n\n\n-----Input-----\n\nThe single line of the input contains a pair of integers m, s (1 \u2264 m \u2264 100, 0 \u2264 s \u2264 900) \u2014 the length and the sum of the digits of the required numbers.\n\n\n-----Output-----\n\nIn the output print the pair of the required non-negative integer numbers \u2014 first the minimum possible number, then \u2014 the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers \"-1 -1\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA telephone number is a sequence of exactly $11$ digits such that its first digit is 8.\n\nVasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.\n\nYou have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($13 \\le n < 10^5$, $n$ is odd) \u2014 the length of string $s$.\n\nThe second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.\n\n\n-----Output-----\n\nIf Vasya has a strategy that guarantees him victory, print YES.\n\nOtherwise print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two strings $s$ and $t$, both consisting only of lowercase Latin letters.\n\nThe substring $s[l..r]$ is the string which is obtained by taking characters $s_l, s_{l + 1}, \\dots, s_r$ without changing the order.\n\nEach of the occurrences of string $a$ in a string $b$ is a position $i$ ($1 \\le i \\le |b| - |a| + 1$) such that $b[i..i + |a| - 1] = a$ ($|a|$ is the length of string $a$).\n\nYou are asked $q$ queries: for the $i$-th query you are required to calculate the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n\n-----Input-----\n\nThe first line contains three integer numbers $n$, $m$ and $q$ ($1 \\le n, m \\le 10^3$, $1 \\le q \\le 10^5$) \u2014 the length of string $s$, the length of string $t$ and the number of queries, respectively.\n\nThe second line is a string $s$ ($|s| = n$), consisting only of lowercase Latin letters.\n\nThe third line is a string $t$ ($|t| = m$), consisting only of lowercase Latin letters.\n\nEach of the next $q$ lines contains two integer numbers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the arguments for the $i$-th query.\n\n\n-----Output-----\n\nPrint $q$ lines \u2014 the $i$-th line should contain the answer to the $i$-th query, that is the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nImp is watching a documentary about cave painting. [Image] \n\nSome numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.\n\nImp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \\text{mod} i$, 1 \u2264 i \u2264 k, are distinct, i.\u00a0e. there is no such pair (i, j) that:   1 \u2264 i < j \u2264 k,  $n \\operatorname{mod} i = n \\operatorname{mod} j$, where $x \\operatorname{mod} y$ is the remainder of division x by y. \n\n\n-----Input-----\n\nThe only line contains two integers n, k (1 \u2264 n, k \u2264 10^18).\n\n\n-----Output-----\n\nPrint \"Yes\", if all the remainders are distinct, and \"No\" otherwise.\n\nYou can print each letter in arbitrary case (lower or upper).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nGalois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named \u00abPawnChess\u00bb.\n\nThis new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.  $8$ \n\nLets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r, c) the cell located at the row r and at the column c.\n\nThere are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.\n\nPlayer A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.\n\nMoving upward means that the pawn located in (r, c) will go to the cell (r - 1, c), while moving down means the pawn located in (r, c) will go to the cell (r + 1, c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.\n\nGiven the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.\n\n\n-----Input-----\n\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'. \n\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.\n\n\n-----Output-----\n\nPrint 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLuba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly a_{i} each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.\n\nLuba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length a_{i} if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.\n\nSee the examples for better understanding.\n\n\n-----Input-----\n\nThe first line of input contains two integer numbers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers a_{i} (1 \u2264 a_{i} \u2264 100) \u2014 the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.\n\n\n-----Output-----\n\nPrint one integer number \u2014 the minimum number of hours required to water the garden.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe flag of Berland is such rectangular field n \u00d7 m that satisfies following conditions:\n\n  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. \n\nYou are given a field n \u00d7 m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the field.\n\nEach of the following n lines consisting of m characters 'R', 'G' and 'B' \u2014 the description of the field.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAfter lessons Nastya decided to read a book. The book contains $n$ chapters, going one after another, so that one page of the book belongs to exactly one chapter and each chapter contains at least one page.\n\nYesterday evening Nastya did not manage to finish reading the book, so she marked the page with number $k$ as the first page which was not read (i.e. she read all pages from the $1$-st to the $(k-1)$-th).\n\nThe next day Nastya's friend Igor came and asked her, how many chapters remain to be read by Nastya? Nastya is too busy now, so she asks you to compute the number of chapters she has not completely read yet (i.e. the number of chapters she has not started to read or has finished reading somewhere in the middle).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 100$)\u00a0\u2014 the number of chapters in the book.\n\nThere are $n$ lines then. The $i$-th of these lines contains two integers $l_i$, $r_i$ separated by space ($l_1 = 1$, $l_i \\leq r_i$)\u00a0\u2014 numbers of the first and the last pages of the $i$-th chapter. It's guaranteed that $l_{i+1} = r_i + 1$ for all $1 \\leq i \\leq n-1$, and also that every chapter contains at most $100$ pages.\n\nThe $(n+2)$-th line contains a single integer $k$ ($1 \\leq k \\leq r_n$)\u00a0\u2014 the index of the marked page. \n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of chapters which has not been completely read so far.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWhile swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 9)\u00a0\u2014 the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's consider equation:x^2 + s(x)\u00b7x - n = 0,  \n\nwhere x, n are positive integers, s(x) is the function, equal to the sum of digits of number x in the decimal number system.\n\nYou are given an integer n, find the smallest positive integer root of equation x, or else determine that there are no such roots.\n\n\n-----Input-----\n\nA single line contains integer n (1 \u2264 n \u2264 10^18) \u2014 the equation parameter.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier. \n\n\n-----Output-----\n\nPrint -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer x (x > 0), that the equation given in the statement holds.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMasha lives in a multi-storey building, where floors are numbered with positive integers. Two floors are called adjacent if their numbers differ by one. Masha decided to visit Egor. Masha lives on the floor $x$, Egor on the floor $y$ (not on the same floor with Masha).\n\nThe house has a staircase and an elevator. If Masha uses the stairs, it takes $t_1$ seconds for her to walk between adjacent floors (in each direction). The elevator passes between adjacent floors (in each way) in $t_2$ seconds. The elevator moves with doors closed. The elevator spends $t_3$ seconds to open or close the doors. We can assume that time is not spent on any action except moving between adjacent floors and waiting for the doors to open or close. If Masha uses the elevator, it immediately goes directly to the desired floor.\n\nComing out of the apartment on her floor, Masha noticed that the elevator is now on the floor $z$ and has closed doors. Now she has to choose whether to use the stairs or use the elevator. \n\nIf the time that Masha needs to get to the Egor's floor by the stairs is strictly less than the time it will take her using the elevator, then she will use the stairs, otherwise she will choose the elevator.\n\nHelp Mary to understand whether to use the elevator or the stairs.\n\n\n-----Input-----\n\nThe only line contains six integers $x$, $y$, $z$, $t_1$, $t_2$, $t_3$ ($1 \\leq x, y, z, t_1, t_2, t_3 \\leq 1000$)\u00a0\u2014 the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that $x \\ne y$.\n\n\n-----Output-----\n\nIf the time it will take to use the elevator is not greater than the time it will take to use the stairs, print \u00abYES\u00bb (without quotes), otherwise print \u00abNO> (without quotes).\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.\n\nFor example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.\n\nLet's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (1 \u2264 n \u2264 5000, 1 \u2264 k \u2264 20).\n\nThe next line contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 10^7) \u2014 the denominations of the bills that are used in the country. Numbers a_{i} follow in the strictly increasing order.\n\nThe next line contains integer q (1 \u2264 q \u2264 20) \u2014 the number of requests for cash withdrawal that you will make.\n\nThe next q lines contain numbers x_{i} (1 \u2264 x_{i} \u2264 2\u00b710^8) \u2014 the sums of money in burles that you are going to withdraw from the ATM.\n\n\n-----Output-----\n\nFor each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 \u00d7 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\\rightarrow$ \n\nIn order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.\n\n\n-----Input-----\n\nThe first two lines of the input consist of a 2 \u00d7 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 \u00d7 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.\n\n\n-----Output-----\n\nOutput \"YES\"(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAnton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.\n\nYour task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. \n\n\n-----Input-----\n\nThe first line contains the positive integer x (1 \u2264 x \u2264 10^18) \u2014 the integer which Anton has. \n\n\n-----Output-----\n\nPrint the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\n\nAll levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\n\nPolycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\n\nSo he peeked at the stats $n$ times and wrote down $n$ pairs of integers \u2014 $(p_1, c_1), (p_2, c_2), \\dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n\nBetween two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\n\nFinally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\n\nHelp him to check the correctness of his records.\n\nFor your convenience you have to answer multiple independent test cases.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 500)$ \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of moments of time Polycarp peeked at the stats.\n\nEach of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \\le p_i, c_i \\le 1000$) \u2014 the number of plays and the number of clears of the level at the $i$-th moment of time.\n\nNote that the stats are given in chronological order.\n\n\n-----Output-----\n\nFor each test case print a single line.\n\nIf there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \"YES\".\n\nOtherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVitya has just started learning Berlanese language. It is known that Berlanese uses the Latin alphabet. Vowel letters are \"a\", \"o\", \"u\", \"i\", and \"e\". Other letters are consonant.\n\nIn Berlanese, there has to be a vowel after every consonant, but there can be any letter after any vowel. The only exception is a consonant \"n\"; after this letter, there can be any letter (not only a vowel) or there can be no letter at all. For example, the words \"harakiri\", \"yupie\", \"man\", and \"nbo\" are Berlanese while the words \"horse\", \"king\", \"my\", and \"nz\" are not.\n\nHelp Vitya find out if a word $s$ is Berlanese.\n\n\n-----Input-----\n\nThe first line of the input contains the string $s$ consisting of $|s|$ ($1\\leq |s|\\leq 100$) lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if there is a vowel after every consonant except \"n\", otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nValera has got n domino pieces in a row. Each piece consists of two halves \u2014 the upper one and the lower one. Each of the halves contains a number from 1 to 6. Valera loves even integers very much, so he wants the sum of the numbers on the upper halves and the sum of the numbers on the lower halves to be even.\n\nTo do that, Valera can rotate the dominoes by 180 degrees. After the rotation the upper and the lower halves swap places. This action takes one second. Help Valera find out the minimum time he must spend rotating dominoes to make his wish come true.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of dominoes Valera has. Next n lines contain two space-separated integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 6). Number x_{i} is initially written on the upper half of the i-th domino, y_{i} is initially written on the lower half.\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum required number of seconds. If Valera can't do the task in any time, print  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.\n\nBob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?\n\n\n-----Input-----\n\nThe first and the only line of the input contains two distinct integers n and m (1 \u2264 n, m \u2264 10^4), separated by a space .\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSuppose you are performing the following algorithm. There is an array $v_1, v_2, \\dots, v_n$ filled with zeroes at start. The following operation is applied to the array several times \u2014 at $i$-th step ($0$-indexed) you can:   either choose position $pos$ ($1 \\le pos \\le n$) and increase $v_{pos}$ by $k^i$;  or not choose any position and skip this step. \n\nYou can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array $v$ equal to the given array $a$ ($v_j = a_j$ for each $j$) after some step?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases. Next $2T$ lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 30$, $2 \\le k \\le 100$) \u2014 the size of arrays $v$ and $a$ and value $k$ used in the algorithm.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{16}$) \u2014 the array you'd like to achieve.\n\n\n-----Output-----\n\nFor each test case print YES (case insensitive) if you can achieve the array $a$ after some step or NO (case insensitive) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nValera has got n domino pieces in a row. Each piece consists of two halves \u2014 the upper one and the lower one. Each of the halves contains a number from 1 to 6. Valera loves even integers very much, so he wants the sum of the numbers on the upper halves and the sum of the numbers on the lower halves to be even.\n\nTo do that, Valera can rotate the dominoes by 180 degrees. After the rotation the upper and the lower halves swap places. This action takes one second. Help Valera find out the minimum time he must spend rotating dominoes to make his wish come true.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of dominoes Valera has. Next n lines contain two space-separated integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 6). Number x_{i} is initially written on the upper half of the i-th domino, y_{i} is initially written on the lower half.\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum required number of seconds. If Valera can't do the task in any time, print  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he has a positive integer $n$. He wants to split $n$ into $3$ positive integers $a,b,c$, such that $a+b+c=n$ and none of the $3$ integers is a multiple of $3$. Help him to find a solution.\n\n\n-----Input-----\n\nA single line containing one integer $n$ ($3 \\leq n \\leq 10^9$) \u2014 the integer Little C has.\n\n\n-----Output-----\n\nPrint $3$ positive integers $a,b,c$ in a single line, such that $a+b+c=n$ and none of them is a multiple of $3$.\n\nIt can be proved that there is at least one solution. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nValera has got n domino pieces in a row. Each piece consists of two halves \u2014 the upper one and the lower one. Each of the halves contains a number from 1 to 6. Valera loves even integers very much, so he wants the sum of the numbers on the upper halves and the sum of the numbers on the lower halves to be even.\n\nTo do that, Valera can rotate the dominoes by 180 degrees. After the rotation the upper and the lower halves swap places. This action takes one second. Help Valera find out the minimum time he must spend rotating dominoes to make his wish come true.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of dominoes Valera has. Next n lines contain two space-separated integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 6). Number x_{i} is initially written on the upper half of the i-th domino, y_{i} is initially written on the lower half.\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum required number of seconds. If Valera can't do the task in any time, print  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWinnie-the-Pooh likes honey very much! That is why he decided to visit his friends. Winnie has got three best friends: Rabbit, Owl and Eeyore, each of them lives in his own house. There are winding paths between each pair of houses. The length of a path between Rabbit's and Owl's houses is a meters, between Rabbit's and Eeyore's house is b meters, between Owl's and Eeyore's house is c meters.\n\nFor enjoying his life and singing merry songs Winnie-the-Pooh should have a meal n times a day. Now he is in the Rabbit's house and has a meal for the first time. Each time when in the friend's house where Winnie is now the supply of honey is about to end, Winnie leaves that house. If Winnie has not had a meal the required amount of times, he comes out from the house and goes to someone else of his two friends. For this he chooses one of two adjacent paths, arrives to the house on the other end and visits his friend. You may assume that when Winnie is eating in one of his friend's house, the supply of honey in other friend's houses recover (most probably, they go to the supply store).\n\nWinnie-the-Pooh does not like physical activity. He wants to have a meal n times, traveling minimum possible distance. Help him to find this distance.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 distance between Rabbit's and Owl's houses.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 distance between Rabbit's and Eeyore's houses.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 distance between Owl's and Eeyore's houses.\n\n\n-----Output-----\n\nOutput one number\u00a0\u2014 minimum distance in meters Winnie must go through to have a meal n times.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nRight now she actually isn't. But she will be, if you don't solve this problem.\n\nYou are given integers n, k, A and B. There is a number x, which is initially equal to n. You are allowed to perform two types of operations:   Subtract 1 from x. This operation costs you A coins.  Divide x by k. Can be performed only if x is divisible by k. This operation costs you B coins.  What is the minimum amount of coins you have to pay to make x equal to 1?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^9).\n\nThe second line contains a single integer k (1 \u2264 k \u2264 2\u00b710^9).\n\nThe third line contains a single integer A (1 \u2264 A \u2264 2\u00b710^9).\n\nThe fourth line contains a single integer B (1 \u2264 B \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of coins you have to pay to make x equal to 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIvan has number $b$. He is sorting through the numbers $a$ from $1$ to $10^{18}$, and for every $a$ writes $\\frac{[a, \\,\\, b]}{a}$ on blackboard. Here $[a, \\,\\, b]$ stands for least common multiple of $a$ and $b$. Ivan is very lazy, that's why this task bored him soon. But he is interested in how many different numbers he would write on the board if he would finish the task. Help him to find the quantity of different numbers he would write on the board.\n\n\n-----Input-----\n\nThe only line contains one integer\u00a0\u2014 $b$ $(1 \\le b \\le 10^{10})$.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 answer for the problem.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nRight now she actually isn't. But she will be, if you don't solve this problem.\n\nYou are given integers n, k, A and B. There is a number x, which is initially equal to n. You are allowed to perform two types of operations:   Subtract 1 from x. This operation costs you A coins.  Divide x by k. Can be performed only if x is divisible by k. This operation costs you B coins.  What is the minimum amount of coins you have to pay to make x equal to 1?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^9).\n\nThe second line contains a single integer k (1 \u2264 k \u2264 2\u00b710^9).\n\nThe third line contains a single integer A (1 \u2264 A \u2264 2\u00b710^9).\n\nThe fourth line contains a single integer B (1 \u2264 B \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of coins you have to pay to make x equal to 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array.\n\nFor some indices i (1 \u2264 i \u2264 n - 1) it is possible to swap i-th element with (i + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i-th element with (i + 1)-th (if the position is not forbidden).\n\nCan you make this array sorted in ascending order performing some sequence of swapping operations?\n\n\n-----Input-----\n\nThe first line contains one integer n (2 \u2264 n \u2264 200000) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 200000) \u2014 the elements of the array. Each integer from 1 to n appears exactly once.\n\nThe third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th.\n\n\n-----Output-----\n\nIf it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nRight now she actually isn't. But she will be, if you don't solve this problem.\n\nYou are given integers n, k, A and B. There is a number x, which is initially equal to n. You are allowed to perform two types of operations:   Subtract 1 from x. This operation costs you A coins.  Divide x by k. Can be performed only if x is divisible by k. This operation costs you B coins.  What is the minimum amount of coins you have to pay to make x equal to 1?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^9).\n\nThe second line contains a single integer k (1 \u2264 k \u2264 2\u00b710^9).\n\nThe third line contains a single integer A (1 \u2264 A \u2264 2\u00b710^9).\n\nThe fourth line contains a single integer B (1 \u2264 B \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of coins you have to pay to make x equal to 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.\n\nRules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.\n\nIn average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.\n\nMishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!\n\n\n-----Input-----\n\nThe first line of the input contains single integer n n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of game rounds.\n\nThe next n lines contains rounds description. i-th of them contains pair of integers m_{i} and c_{i} (1 \u2264 m_{i},  c_{i} \u2264 6)\u00a0\u2014 values on dice upper face after Mishka's and Chris' throws in i-th round respectively.\n\n\n-----Output-----\n\nIf Mishka is the winner of the game, print \"Mishka\" (without quotes) in the only line.\n\nIf Chris is the winner of the game, print \"Chris\" (without quotes) in the only line.\n\nIf the result of the game is draw, print \"Friendship is magic!^^\" (without quotes) in the only line.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAt an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n - The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n - Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n - R points for winning with Rock;\n - S points for winning with Scissors;\n - P points for winning with Paper.\n - However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is r, the machine will play Rock in the i-th round. Similarly, p and s stand for Paper and Scissors, respectively.\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\n-----Notes-----\nIn this problem, Rock Paper Scissors can be thought of as a two-player game, in which each player simultaneously forms Rock, Paper, or Scissors with a hand.\n - If a player chooses Rock and the other chooses Scissors, the player choosing Rock wins;\n - if a player chooses Scissors and the other chooses Paper, the player choosing Scissors wins;\n - if a player chooses Paper and the other chooses Rock, the player choosing Paper wins;\n - if both players play the same hand, it is a draw.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N-1\n - 1 \\leq R,S,P \\leq 10^4\n - N,K,R,S, and P are all integers.\n - |T| = N\n - T consists of r, p, and s.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nR S P\nT\n\n-----Output-----\nPrint the maximum total score earned in the game.\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\n\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u043c\u0435\u0447\u0442\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u043c \u0438 \u0444\u0430\u043d\u0430\u0442\u0435\u0435\u0442 \u043e\u0442 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0434\u0432\u043e\u0439\u043a\u0438. \u0421\u0440\u0435\u0434\u0438 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u0435\u043c\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0447\u0438\u0441\u043b\u0430 2. \n\n\u041f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0446\u0435\u043b\u044b\u0445 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2, ..., a_{n} \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 r\u00a0\u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0447\u0438\u0441\u043b\u0430 2, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b a_{i}, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 r.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAt an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n - The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n - Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n - R points for winning with Rock;\n - S points for winning with Scissors;\n - P points for winning with Paper.\n - However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is r, the machine will play Rock in the i-th round. Similarly, p and s stand for Paper and Scissors, respectively.\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\n-----Notes-----\nIn this problem, Rock Paper Scissors can be thought of as a two-player game, in which each player simultaneously forms Rock, Paper, or Scissors with a hand.\n - If a player chooses Rock and the other chooses Scissors, the player choosing Rock wins;\n - if a player chooses Scissors and the other chooses Paper, the player choosing Scissors wins;\n - if a player chooses Paper and the other chooses Rock, the player choosing Paper wins;\n - if both players play the same hand, it is a draw.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N-1\n - 1 \\leq R,S,P \\leq 10^4\n - N,K,R,S, and P are all integers.\n - |T| = N\n - T consists of r, p, and s.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nR S P\nT\n\n-----Output-----\nPrint the maximum total score earned in the game.\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 \u2264 w \u2264 10^9, 1 \u2264 m \u2264 10^9) \u2014 the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAt an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n - The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n - Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n - R points for winning with Rock;\n - S points for winning with Scissors;\n - P points for winning with Paper.\n - However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is r, the machine will play Rock in the i-th round. Similarly, p and s stand for Paper and Scissors, respectively.\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\n-----Notes-----\nIn this problem, Rock Paper Scissors can be thought of as a two-player game, in which each player simultaneously forms Rock, Paper, or Scissors with a hand.\n - If a player chooses Rock and the other chooses Scissors, the player choosing Rock wins;\n - if a player chooses Scissors and the other chooses Paper, the player choosing Scissors wins;\n - if a player chooses Paper and the other chooses Rock, the player choosing Paper wins;\n - if both players play the same hand, it is a draw.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N-1\n - 1 \\leq R,S,P \\leq 10^4\n - N,K,R,S, and P are all integers.\n - |T| = N\n - T consists of r, p, and s.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nR S P\nT\n\n-----Output-----\nPrint the maximum total score earned in the game.\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nJamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have two variables a and b. Consider the following sequence of actions performed with these variables: If a = 0 or b = 0, end the process. Otherwise, go to step 2; If a \u2265 2\u00b7b, then set the value of a to a - 2\u00b7b, and repeat step 1. Otherwise, go to step 3; If b \u2265 2\u00b7a, then set the value of b to b - 2\u00b7a, and repeat step 1. Otherwise, end the process.\n\nInitially the values of a and b are positive integers, and so the process will be finite.\n\nYou have to determine the values of a and b after the process ends.\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 \u2264 n, m \u2264 10^18). n is the initial value of variable a, and m is the initial value of variable b.\n\n\n-----Output-----\n\nPrint two integers \u2014 the values of a and b after the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere is an array with n elements a_1, a_2, ..., a_{n} and the number x.\n\nIn one operation you can select some i (1 \u2264 i \u2264 n) and replace element a_{i} with a_{i} & x, where & denotes the bitwise and operation.\n\nYou want the array to have at least two equal elements after applying some operations (possibly, none). In other words, there should be at least two distinct indices i \u2260 j such that a_{i} = a_{j}. Determine whether it is possible to achieve and, if possible, the minimal number of operations to apply.\n\n\n-----Input-----\n\nThe first line contains integers n and x (2 \u2264 n \u2264 100 000, 1 \u2264 x \u2264 100 000), number of elements in the array and the number to and with.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000), the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer denoting the minimal number of operations to do, or -1, if it is impossible.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSuppose you are performing the following algorithm. There is an array $v_1, v_2, \\dots, v_n$ filled with zeroes at start. The following operation is applied to the array several times \u2014 at $i$-th step ($0$-indexed) you can:   either choose position $pos$ ($1 \\le pos \\le n$) and increase $v_{pos}$ by $k^i$;  or not choose any position and skip this step. \n\nYou can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array $v$ equal to the given array $a$ ($v_j = a_j$ for each $j$) after some step?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases. Next $2T$ lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 30$, $2 \\le k \\le 100$) \u2014 the size of arrays $v$ and $a$ and value $k$ used in the algorithm.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{16}$) \u2014 the array you'd like to achieve.\n\n\n-----Output-----\n\nFor each test case print YES (case insensitive) if you can achieve the array $a$ after some step or NO (case insensitive) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAnton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.\n\nYour task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. \n\n\n-----Input-----\n\nThe first line contains the positive integer x (1 \u2264 x \u2264 10^18) \u2014 the integer which Anton has. \n\n\n-----Output-----\n\nPrint the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.\n\nYou want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) \u2014 the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer \u2014 maximum number of painted sections if you hire $q - 2$ painters.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOne day Kefa found n baloons. For convenience, we denote color of i-th baloon as s_{i} \u2014 lowercase letter of the Latin alphabet. Also Kefa has k friends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out all baloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset \u2014 print \u00abYES\u00bb, if he can, and \u00abNO\u00bb, otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of baloons and friends.\n\nNext line contains string s \u2014 colors of baloons.\n\n\n-----Output-----\n\nAnswer to the task \u2014 \u00abYES\u00bb or \u00abNO\u00bb in a single line.\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGalois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named \u00abPawnChess\u00bb.\n\nThis new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.  $8$ \n\nLets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r, c) the cell located at the row r and at the column c.\n\nThere are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.\n\nPlayer A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.\n\nMoving upward means that the pawn located in (r, c) will go to the cell (r - 1, c), while moving down means the pawn located in (r, c) will go to the cell (r + 1, c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.\n\nGiven the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.\n\n\n-----Input-----\n\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'. \n\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.\n\n\n-----Output-----\n\nPrint 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n elements, you must make it a co-prime array in as few moves as possible.\n\nIn each move you can insert any positive integral number you want not greater than 10^9 in any place in the array.\n\nAn array is co-prime if any two adjacent numbers of it are co-prime.\n\nIn the number theory, two integers a and b are said to be co-prime if the only positive integer that divides both of them is 1.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in the given array.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array a.\n\n\n-----Output-----\n\nPrint integer k on the first line \u2014 the least number of elements needed to add to the array a to make it co-prime.\n\nThe second line should contain n + k integers a_{j} \u2014 the elements of the array a after adding k elements to it. Note that the new array should be co-prime, so any two adjacent values should be co-prime. Also the new array should be got from the original array a by adding k elements to it.\n\nIf there are multiple answers you can print any one of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGalois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named \u00abPawnChess\u00bb.\n\nThis new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.  $8$ \n\nLets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r, c) the cell located at the row r and at the column c.\n\nThere are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.\n\nPlayer A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.\n\nMoving upward means that the pawn located in (r, c) will go to the cell (r - 1, c), while moving down means the pawn located in (r, c) will go to the cell (r + 1, c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.\n\nGiven the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.\n\n\n-----Input-----\n\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'. \n\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.\n\n\n-----Output-----\n\nPrint 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya received a gift on New Year\u00a0\u2014 a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).\n\nUnfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. \n\nNastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.\n\nNastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.\n\n\n-----Input-----\n\nThe only line contains two integers x and k (0 \u2264 x, k \u2264 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.\n\n\n-----Output-----\n\nIn the only line print a single integer\u00a0\u2014 the expected number of dresses Nastya will own one year later modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nGalois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named \u00abPawnChess\u00bb.\n\nThis new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.  $8$ \n\nLets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r, c) the cell located at the row r and at the column c.\n\nThere are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.\n\nPlayer A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.\n\nMoving upward means that the pawn located in (r, c) will go to the cell (r - 1, c), while moving down means the pawn located in (r, c) will go to the cell (r + 1, c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.\n\nGiven the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.\n\n\n-----Input-----\n\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'. \n\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.\n\n\n-----Output-----\n\nPrint 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.\n\nWhat is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.\n\n\n-----Input-----\n\nThe only line contains 4 integers n, a, b, c (1 \u2264 n, a, b, c \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has two arrays $A$ and $B$ of lengths $n$ and $m$, respectively.\n\nHe can perform the following operation arbitrary number of times (possibly zero): he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment. For example, from the array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$, and from array $[1, 2, 3]$ Vasya can obtain array $[6]$.\n\nTwo arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n\nVasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal. Moreover, the lengths of the resulting arrays should be maximal possible.\n\nHelp Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n~(1 \\le n \\le 3 \\cdot 10^5)$ \u2014 the length of the first array.\n\nThe second line contains $n$ integers $a_1, a_2, \\cdots, a_n~(1 \\le a_i \\le 10^9)$ \u2014 elements of the array $A$.\n\nThe third line contains a single integer $m~(1 \\le m \\le 3 \\cdot 10^5)$ \u2014 the length of the second array.\n\nThe fourth line contains $m$ integers $b_1, b_2, \\cdots, b_m~(1 \\le b_i \\le 10^9)$ - elements of the array $B$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the resulting arrays after some operations were performed on arrays $A$ and $B$ in such a way that they became equal.\n\nIf there is no way to make array equal, print \"-1\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have two friends. You want to present each of them several positive integers. You want to present cnt_1 numbers to the first friend and cnt_2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\n\n-----Input-----\n\nThe only line contains four positive integers cnt_1, cnt_2, x, y (1 \u2264 cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4)\u00a0\u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has two arrays $A$ and $B$ of lengths $n$ and $m$, respectively.\n\nHe can perform the following operation arbitrary number of times (possibly zero): he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment. For example, from the array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$, and from array $[1, 2, 3]$ Vasya can obtain array $[6]$.\n\nTwo arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n\nVasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal. Moreover, the lengths of the resulting arrays should be maximal possible.\n\nHelp Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n~(1 \\le n \\le 3 \\cdot 10^5)$ \u2014 the length of the first array.\n\nThe second line contains $n$ integers $a_1, a_2, \\cdots, a_n~(1 \\le a_i \\le 10^9)$ \u2014 elements of the array $A$.\n\nThe third line contains a single integer $m~(1 \\le m \\le 3 \\cdot 10^5)$ \u2014 the length of the second array.\n\nThe fourth line contains $m$ integers $b_1, b_2, \\cdots, b_m~(1 \\le b_i \\le 10^9)$ - elements of the array $B$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the resulting arrays after some operations were performed on arrays $A$ and $B$ in such a way that they became equal.\n\nIf there is no way to make array equal, print \"-1\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAt an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n - The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n - Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n - R points for winning with Rock;\n - S points for winning with Scissors;\n - P points for winning with Paper.\n - However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is r, the machine will play Rock in the i-th round. Similarly, p and s stand for Paper and Scissors, respectively.\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\n-----Notes-----\nIn this problem, Rock Paper Scissors can be thought of as a two-player game, in which each player simultaneously forms Rock, Paper, or Scissors with a hand.\n - If a player chooses Rock and the other chooses Scissors, the player choosing Rock wins;\n - if a player chooses Scissors and the other chooses Paper, the player choosing Scissors wins;\n - if a player chooses Paper and the other chooses Rock, the player choosing Paper wins;\n - if both players play the same hand, it is a draw.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N-1\n - 1 \\leq R,S,P \\leq 10^4\n - N,K,R,S, and P are all integers.\n - |T| = N\n - T consists of r, p, and s.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nR S P\nT\n\n-----Output-----\nPrint the maximum total score earned in the game.\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^18, k \u2264 n)\u00a0\u2014 the number of sticks drawn by Sasha and the number k\u00a0\u2014 the number of sticks to be crossed out on each turn.\n\n\n-----Output-----\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has two arrays $A$ and $B$ of lengths $n$ and $m$, respectively.\n\nHe can perform the following operation arbitrary number of times (possibly zero): he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment. For example, from the array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$, and from array $[1, 2, 3]$ Vasya can obtain array $[6]$.\n\nTwo arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n\nVasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal. Moreover, the lengths of the resulting arrays should be maximal possible.\n\nHelp Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n~(1 \\le n \\le 3 \\cdot 10^5)$ \u2014 the length of the first array.\n\nThe second line contains $n$ integers $a_1, a_2, \\cdots, a_n~(1 \\le a_i \\le 10^9)$ \u2014 elements of the array $A$.\n\nThe third line contains a single integer $m~(1 \\le m \\le 3 \\cdot 10^5)$ \u2014 the length of the second array.\n\nThe fourth line contains $m$ integers $b_1, b_2, \\cdots, b_m~(1 \\le b_i \\le 10^9)$ - elements of the array $B$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the resulting arrays after some operations were performed on arrays $A$ and $B$ in such a way that they became equal.\n\nIf there is no way to make array equal, print \"-1\".\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMedicine faculty of Berland State University has just finished their admission campaign. As usual, about $80\\%$ of applicants are girls and majority of them are going to live in the university dormitory for the next $4$ (hopefully) years.\n\nThe dormitory consists of $n$ rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number $i$ costs $c_i$ burles. Rooms are numbered from $1$ to $n$.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room $i$ in second $t$ then it will run to room $a_i$ in second $t + 1$ without visiting any other rooms inbetween ($i = a_i$ means that mouse won't leave room $i$). It's second $0$ in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from $1$ to $n$ at second $0$.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\n\n-----Input-----\n\nThe first line contains as single integers $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the dormitory.\n\nThe second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 10^4$) \u2014 $c_i$ is the cost of setting the trap in room number $i$.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 $a_i$ is the room the mouse will run to the next second after being in room $i$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he has a positive integer $n$. He wants to split $n$ into $3$ positive integers $a,b,c$, such that $a+b+c=n$ and none of the $3$ integers is a multiple of $3$. Help him to find a solution.\n\n\n-----Input-----\n\nA single line containing one integer $n$ ($3 \\leq n \\leq 10^9$) \u2014 the integer Little C has.\n\n\n-----Output-----\n\nPrint $3$ positive integers $a,b,c$ in a single line, such that $a+b+c=n$ and none of them is a multiple of $3$.\n\nIt can be proved that there is at least one solution. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.\n\nAn unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.\n\nAfter her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.\n\nNote that she can paint tiles in any order she wants.\n\nGiven the required information, find the maximum\u00a0number of chocolates Joty can get.\n\n\n-----Input-----\n\nThe only line contains five integers n, a, b, p and q (1 \u2264 n, a, b, p, q \u2264 10^9).\n\n\n-----Output-----\n\nPrint the only integer s \u2014 the maximum number of chocolates Joty can get.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMelody Pond was stolen from her parents as a newborn baby by Madame Kovarian, to become a weapon of the Silence in their crusade against the Doctor. Madame Kovarian changed Melody's name to River Song, giving her a new identity that allowed her to kill the Eleventh Doctor.\n\nHeidi figured out that Madame Kovarian uses a very complicated hashing function in order to change the names of the babies she steals. In order to prevent this from happening to future Doctors, Heidi decided to prepare herself by learning some basic hashing techniques.\n\nThe first hashing function she designed is as follows.\n\nGiven two positive integers $(x, y)$ she defines $H(x,y):=x^2+2xy+x+1$.\n\nNow, Heidi wonders if the function is reversible. That is, given a positive integer $r$, can you find a pair $(x, y)$ (of positive integers) such that $H(x, y) = r$?\n\nIf multiple such pairs exist, output the one with smallest possible $x$. If there is no such pair, output \"NO\".\n\n\n-----Input-----\n\nThe first and only line contains an integer $r$ ($1 \\le r \\le 10^{12}$).\n\n\n-----Output-----\n\nOutput integers $x, y$ such that $H(x,y) = r$ and $x$ is smallest possible, or \"NO\" if no such pair exists.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA and B are preparing themselves for programming contests.\n\nAn important part of preparing for a competition is sharing programming knowledge from the experienced members to those who are just beginning to deal with the contests. Therefore, during the next team training A decided to make teams so that newbies are solving problems together with experienced participants.\n\nA believes that the optimal team of three people should consist of one experienced participant and two newbies. Thus, each experienced participant can share the experience with a large number of people.\n\nHowever, B believes that the optimal team should have two experienced members plus one newbie. Thus, each newbie can gain more knowledge and experience.\n\nAs a result, A and B have decided that all the teams during the training session should belong to one of the two types described above. Furthermore, they agree that the total number of teams should be as much as possible.\n\nThere are n experienced members and m newbies on the training session. Can you calculate what maximum number of teams can be formed?\n\n\n-----Input-----\n\nThe first line contains two integers n and m (0 \u2264 n, m \u2264 5\u00b710^5) \u2014 the number of experienced participants and newbies that are present at the training session. \n\n\n-----Output-----\n\nPrint the maximum number of teams that can be formed.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMonocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.\n\nMonocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\\frac{n}{2}$ digits.\n\nMonocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.\n\nIf the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.\n\n\n-----Input-----\n\nThe first line contains one even integer $n$ $(2 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the number of digits in the ticket.\n\nThe second line contains a string of $n$ digits and \"?\" characters \u2014 the ticket which Monocarp and Bicarp have found. If the $i$-th character is \"?\", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of \"?\" characters is even.\n\n\n-----Output-----\n\nIf Monocarp wins, print \"Monocarp\" (without quotes). Otherwise print \"Bicarp\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya received a gift on New Year\u00a0\u2014 a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).\n\nUnfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. \n\nNastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.\n\nNastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.\n\n\n-----Input-----\n\nThe only line contains two integers x and k (0 \u2264 x, k \u2264 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.\n\n\n-----Output-----\n\nIn the only line print a single integer\u00a0\u2014 the expected number of dresses Nastya will own one year later modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLet's call a string good if and only if it consists of only two types of letters\u00a0\u2014 'a' and 'b' and every two consecutive letters are distinct. For example \"baba\" and \"aba\" are good strings and \"abb\" is a bad string.\n\nYou have $a$ strings \"a\", $b$ strings \"b\" and $c$ strings \"ab\". You want to choose some subset of these strings and concatenate them in any arbitrarily order.\n\nWhat is the length of the longest good string you can obtain this way?\n\n\n-----Input-----\n\nThe first line contains three positive integers $a$, $b$, $c$ ($1 \\leq a, b, c \\leq 10^9$)\u00a0\u2014 the number of strings \"a\", \"b\" and \"ab\" respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the maximum possible length of the good string you can obtain.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nRecently Luba learned about a special kind of numbers that she calls beautiful numbers. The number is called beautiful iff its binary representation consists of k + 1 consecutive ones, and then k consecutive zeroes.\n\nSome examples of beautiful numbers:   1_2 (1_10);  110_2 (6_10);  1111000_2 (120_10);  111110000_2 (496_10). \n\nMore formally, the number is beautiful iff there exists some positive integer k such that the number is equal to (2^{k} - 1) * (2^{k} - 1).\n\nLuba has got an integer number n, and she wants to find its greatest beautiful divisor. Help her to find it!\n\n\n-----Input-----\n\nThe only line of input contains one number n (1 \u2264 n \u2264 10^5) \u2014 the number Luba has got.\n\n\n-----Output-----\n\nOutput one number \u2014 the greatest beautiful divisor of Luba's number. It is obvious that the answer always exists.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two strings $s$ and $t$, both consisting only of lowercase Latin letters.\n\nThe substring $s[l..r]$ is the string which is obtained by taking characters $s_l, s_{l + 1}, \\dots, s_r$ without changing the order.\n\nEach of the occurrences of string $a$ in a string $b$ is a position $i$ ($1 \\le i \\le |b| - |a| + 1$) such that $b[i..i + |a| - 1] = a$ ($|a|$ is the length of string $a$).\n\nYou are asked $q$ queries: for the $i$-th query you are required to calculate the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n\n-----Input-----\n\nThe first line contains three integer numbers $n$, $m$ and $q$ ($1 \\le n, m \\le 10^3$, $1 \\le q \\le 10^5$) \u2014 the length of string $s$, the length of string $t$ and the number of queries, respectively.\n\nThe second line is a string $s$ ($|s| = n$), consisting only of lowercase Latin letters.\n\nThe third line is a string $t$ ($|t| = m$), consisting only of lowercase Latin letters.\n\nEach of the next $q$ lines contains two integer numbers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the arguments for the $i$-th query.\n\n\n-----Output-----\n\nPrint $q$ lines \u2014 the $i$-th line should contain the answer to the $i$-th query, that is the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nOn the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1)\u00a0\u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\n\n-----Output-----\n\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nKevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\n\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is $\\operatorname{max}(0.3 x,(1 - \\frac{m}{250}) x - 50 w)$. His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\n\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\n\n\n-----Input-----\n\nThe first line of the input contains five space-separated integers m_1, m_2, m_3, m_4, m_5, where m_{i} (0 \u2264 m_{i} \u2264 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w_1, w_2, w_3, w_4, w_5, where w_{i} (0 \u2264 w_{i} \u2264 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers h_{s} and h_{u} (0 \u2264 h_{s}, h_{u} \u2264 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the value of Kevin's final score.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two strings $s$ and $t$, both consisting only of lowercase Latin letters.\n\nThe substring $s[l..r]$ is the string which is obtained by taking characters $s_l, s_{l + 1}, \\dots, s_r$ without changing the order.\n\nEach of the occurrences of string $a$ in a string $b$ is a position $i$ ($1 \\le i \\le |b| - |a| + 1$) such that $b[i..i + |a| - 1] = a$ ($|a|$ is the length of string $a$).\n\nYou are asked $q$ queries: for the $i$-th query you are required to calculate the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n\n-----Input-----\n\nThe first line contains three integer numbers $n$, $m$ and $q$ ($1 \\le n, m \\le 10^3$, $1 \\le q \\le 10^5$) \u2014 the length of string $s$, the length of string $t$ and the number of queries, respectively.\n\nThe second line is a string $s$ ($|s| = n$), consisting only of lowercase Latin letters.\n\nThe third line is a string $t$ ($|t| = m$), consisting only of lowercase Latin letters.\n\nEach of the next $q$ lines contains two integer numbers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the arguments for the $i$-th query.\n\n\n-----Output-----\n\nPrint $q$ lines \u2014 the $i$-th line should contain the answer to the $i$-th query, that is the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nSomeone gave Alyona an array containing n positive integers a_1, a_2, ..., a_{n}. In one operation, Alyona can choose any element of the array and decrease it, i.e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all.\n\nFormally, after applying some operations Alyona will get an array of n positive integers b_1, b_2, ..., b_{n} such that 1 \u2264 b_{i} \u2264 a_{i} for every 1 \u2264 i \u2264 n. Your task is to determine the maximum possible value of mex of this array.\n\nMex of an array in this problem is the minimum positive integer that doesn't appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of elements in the Alyona's array.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint one positive integer\u00a0\u2014 the maximum possible value of mex of the array after Alyona applies some (possibly none) operations.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given two strings $s$ and $t$, both consisting only of lowercase Latin letters.\n\nThe substring $s[l..r]$ is the string which is obtained by taking characters $s_l, s_{l + 1}, \\dots, s_r$ without changing the order.\n\nEach of the occurrences of string $a$ in a string $b$ is a position $i$ ($1 \\le i \\le |b| - |a| + 1$) such that $b[i..i + |a| - 1] = a$ ($|a|$ is the length of string $a$).\n\nYou are asked $q$ queries: for the $i$-th query you are required to calculate the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n\n-----Input-----\n\nThe first line contains three integer numbers $n$, $m$ and $q$ ($1 \\le n, m \\le 10^3$, $1 \\le q \\le 10^5$) \u2014 the length of string $s$, the length of string $t$ and the number of queries, respectively.\n\nThe second line is a string $s$ ($|s| = n$), consisting only of lowercase Latin letters.\n\nThe third line is a string $t$ ($|t| = m$), consisting only of lowercase Latin letters.\n\nEach of the next $q$ lines contains two integer numbers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the arguments for the $i$-th query.\n\n\n-----Output-----\n\nPrint $q$ lines \u2014 the $i$-th line should contain the answer to the $i$-th query, that is the number of occurrences of string $t$ in a substring $s[l_i..r_i]$.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA necklace can be described as a string of links ('-') and pearls ('o'), with the last link or pearl connected to the first one. $0$ \n\nYou can remove a link or a pearl and insert it between two other existing links or pearls (or between a link and a pearl) on the necklace. This process can be repeated as many times as you like, but you can't throw away any parts.\n\nCan you make the number of links between every two adjacent pearls equal? Two pearls are considered to be adjacent if there is no other pearl between them.\n\nNote that the final necklace should remain as one circular part of the same length as the initial necklace.\n\n\n-----Input-----\n\nThe only line of input contains a string $s$ ($3 \\leq |s| \\leq 100$), representing the necklace, where a dash '-' represents a link and the lowercase English letter 'o' represents a pearl.\n\n\n-----Output-----\n\nPrint \"YES\" if the links and pearls can be rejoined such that the number of links between adjacent pearls is equal. Otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nQuite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.\n\nA k-tree is an infinite rooted tree where:\n\n  each vertex has exactly k children;  each edge has some weight;  if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. \n\nThe picture below shows a part of a 3-tree.\n\n \n\n [Image]\n\n    As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: \"How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?\".\n\nHelp Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (10^9 + 7). \n\n\n-----Input-----\n\nA single line contains three space-separated integers: n, k and d (1 \u2264 n, k \u2264 100; 1 \u2264 d \u2264 k).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7). \n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\n\n-----Input-----\n\nThe first line of the input contains two integers s and x (2 \u2264 s \u2264 10^12, 0 \u2264 x \u2264 10^12), the sum and bitwise xor of the pair of positive integers, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nBran and his older sister Arya are from the same house. Bran like candies so much, so Arya is going to give him some Candies.\n\nAt first, Arya and Bran have 0 Candies. There are n days, at the i-th day, Arya finds a_{i} candies in a box, that is given by the Many-Faced God. Every day she can give Bran at most 8 of her candies. If she don't give him the candies at the same day, they are saved for her and she can give them to him later.\n\nYour task is to find the minimum number of days Arya needs to give Bran k candies before the end of the n-th day. Formally, you need to output the minimum day index to the end of which k candies will be given out (the days are indexed from 1 to n).\n\nPrint -1 if she can't give him k candies during n given days.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10000).\n\nThe second line contains n integers a_1, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 100).\n\n\n-----Output-----\n\nIf it is impossible for Arya to give Bran k candies within n days, print -1.\n\nOtherwise print a single integer\u00a0\u2014 the minimum number of days Arya needs to give Bran k candies before the end of the n-th day.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nQuite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.\n\nA k-tree is an infinite rooted tree where:\n\n  each vertex has exactly k children;  each edge has some weight;  if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. \n\nThe picture below shows a part of a 3-tree.\n\n \n\n [Image]\n\n    As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: \"How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?\".\n\nHelp Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (10^9 + 7). \n\n\n-----Input-----\n\nA single line contains three space-separated integers: n, k and d (1 \u2264 n, k \u2264 100; 1 \u2264 d \u2264 k).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7). \n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\n\u041a\u0430\u0440\u0442\u0430 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u00a0\u2014 \u044d\u0442\u043e \u043b\u0438\u0431\u043e \u00ab.\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043d\u0435\u0431\u0430), \u043b\u0438\u0431\u043e \u00ab*\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0437\u0432\u0435\u0437\u0434\u0430). \n\n\u041d\u043e\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u044b \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u043e \u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043b\u0438\u0441\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0437\u0432\u0435\u0437\u0434\u044b. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA telephone number is a sequence of exactly $11$ digits such that its first digit is 8.\n\nVasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.\n\nYou have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($13 \\le n < 10^5$, $n$ is odd) \u2014 the length of string $s$.\n\nThe second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.\n\n\n-----Output-----\n\nIf Vasya has a strategy that guarantees him victory, print YES.\n\nOtherwise print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nQuite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.\n\nA k-tree is an infinite rooted tree where:\n\n  each vertex has exactly k children;  each edge has some weight;  if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. \n\nThe picture below shows a part of a 3-tree.\n\n \n\n [Image]\n\n    As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: \"How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?\".\n\nHelp Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (10^9 + 7). \n\n\n-----Input-----\n\nA single line contains three space-separated integers: n, k and d (1 \u2264 n, k \u2264 100; 1 \u2264 d \u2264 k).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7). \n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 n)\u00a0\u2014 the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIs it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the number of round participants.\n\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 4126)\u00a0\u2014 the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.\n\n\n-----Output-----\n\nIf the round is rated for sure, print \"rated\". If the round is unrated for sure, print \"unrated\". If it's impossible to determine whether the round is rated or not, print \"maybe\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nTonio has a keyboard with only two letters, \"V\" and \"K\".\n\nOne day, he has typed out a string s with only these two letters. He really likes it when the string \"VK\" appears, so he wishes to change at most one letter in the string (or do no changes) to maximize the number of occurrences of that string. Compute the maximum number of times \"VK\" can appear as a substring (i.\u00a0e. a letter \"K\" right after a letter \"V\") in the resulting string.\n\n\n-----Input-----\n\nThe first line will contain a string s consisting only of uppercase English letters \"V\" and \"K\" with length not less than 1 and not greater than 100.\n\n\n-----Output-----\n\nOutput a single integer, the maximum number of times \"VK\" can appear as a substring of the given string after changing at most one character.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nRecently Adaltik discovered japanese crosswords. Japanese crossword is a picture, represented as a table sized a \u00d7 b squares, and each square is colored white or black. There are integers to the left of the rows and to the top of the columns, encrypting the corresponding row or column. The number of integers represents how many groups of black squares there are in corresponding row or column, and the integers themselves represents the number of consecutive black squares in corresponding group (you can find more detailed explanation in Wikipedia https://en.wikipedia.org/wiki/Japanese_crossword).\n\nAdaltik decided that the general case of japanese crossword is too complicated and drew a row consisting of n squares (e.g. japanese crossword sized 1 \u00d7 n), which he wants to encrypt in the same way as in japanese crossword. [Image] The example of encrypting of a single row of japanese crossword. \n\nHelp Adaltik find the numbers encrypting the row he drew.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W'\u00a0\u2014 to white square in the row that Adaltik drew).\n\n\n-----Output-----\n\nThe first line should contain a single integer k\u00a0\u2014 the number of integers encrypting the row, e.g. the number of groups of black squares in the row.\n\nThe second line should contain k integers, encrypting the row, e.g. corresponding to sizes of groups of consecutive black squares in the order from left to right.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nTwo little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\n\n-----Output-----\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYear 2118. Androids are in mass production for decades now, and they do all the work for humans. But androids have to go to school to be able to solve creative tasks. Just like humans before.\n\nIt turns out that high school struggles are not gone. If someone is not like others, he is bullied. Vasya-8800 is an economy-class android which is produced by a little-known company. His design is not perfect, his characteristics also could be better. So he is bullied by other androids.\n\nOne of the popular pranks on Vasya is to force him to compare $x^y$ with $y^x$. Other androids can do it in milliseconds while Vasya's memory is too small to store such big numbers.\n\nPlease help Vasya! Write a fast program to compare $x^y$ with $y^x$ for Vasya, maybe then other androids will respect him.\n\n\n-----Input-----\n\nOn the only line of input there are two integers $x$ and $y$ ($1 \\le x, y \\le 10^{9}$).\n\n\n-----Output-----\n\nIf $x^y < y^x$, then print '<' (without quotes). If $x^y > y^x$, then print '>' (without quotes). If $x^y = y^x$, then print '=' (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA group of $n$ dancers rehearses a performance for the closing ceremony. The dancers are arranged in a row, they've studied their dancing moves and can't change positions. For some of them, a white dancing suit is already bought, for some of them \u2014 a black one, and for the rest the suit will be bought in the future.\n\nOn the day when the suits were to be bought, the director was told that the participants of the olympiad will be happy if the colors of the suits on the scene will form a palindrome. A palindrome is a sequence that is the same when read from left to right and when read from right to left. The director liked the idea, and she wants to buy suits so that the color of the leftmost dancer's suit is the same as the color of the rightmost dancer's suit, the 2nd left is the same as 2nd right, and so on.\n\nThe director knows how many burls it costs to buy a white suit, and how many burls to buy a black suit. You need to find out whether it is possible to buy suits to form a palindrome, and if it's possible, what's the minimal cost of doing so. Remember that dancers can not change positions, and due to bureaucratic reasons it is not allowed to buy new suits for the dancers who already have suits, even if it reduces the overall spending.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $a$, and $b$ ($1 \\leq n \\leq 20$, $1 \\leq a, b \\leq 100$)\u00a0\u2014 the number of dancers, the cost of a white suit, and the cost of a black suit.\n\nThe next line contains $n$ numbers $c_i$, $i$-th of which denotes the color of the suit of the $i$-th dancer. Number $0$ denotes the white color, $1$\u00a0\u2014 the black color, and $2$ denotes that a suit for this dancer is still to be bought.\n\n\n-----Output-----\n\nIf it is not possible to form a palindrome without swapping dancers and buying new suits for those who have one, then output -1. Otherwise, output the minimal price to get the desired visual effect.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nRecently Adaltik discovered japanese crosswords. Japanese crossword is a picture, represented as a table sized a \u00d7 b squares, and each square is colored white or black. There are integers to the left of the rows and to the top of the columns, encrypting the corresponding row or column. The number of integers represents how many groups of black squares there are in corresponding row or column, and the integers themselves represents the number of consecutive black squares in corresponding group (you can find more detailed explanation in Wikipedia https://en.wikipedia.org/wiki/Japanese_crossword).\n\nAdaltik decided that the general case of japanese crossword is too complicated and drew a row consisting of n squares (e.g. japanese crossword sized 1 \u00d7 n), which he wants to encrypt in the same way as in japanese crossword. [Image] The example of encrypting of a single row of japanese crossword. \n\nHelp Adaltik find the numbers encrypting the row he drew.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W'\u00a0\u2014 to white square in the row that Adaltik drew).\n\n\n-----Output-----\n\nThe first line should contain a single integer k\u00a0\u2014 the number of integers encrypting the row, e.g. the number of groups of black squares in the row.\n\nThe second line should contain k integers, encrypting the row, e.g. corresponding to sizes of groups of consecutive black squares in the order from left to right.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA group of $n$ dancers rehearses a performance for the closing ceremony. The dancers are arranged in a row, they've studied their dancing moves and can't change positions. For some of them, a white dancing suit is already bought, for some of them \u2014 a black one, and for the rest the suit will be bought in the future.\n\nOn the day when the suits were to be bought, the director was told that the participants of the olympiad will be happy if the colors of the suits on the scene will form a palindrome. A palindrome is a sequence that is the same when read from left to right and when read from right to left. The director liked the idea, and she wants to buy suits so that the color of the leftmost dancer's suit is the same as the color of the rightmost dancer's suit, the 2nd left is the same as 2nd right, and so on.\n\nThe director knows how many burls it costs to buy a white suit, and how many burls to buy a black suit. You need to find out whether it is possible to buy suits to form a palindrome, and if it's possible, what's the minimal cost of doing so. Remember that dancers can not change positions, and due to bureaucratic reasons it is not allowed to buy new suits for the dancers who already have suits, even if it reduces the overall spending.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $a$, and $b$ ($1 \\leq n \\leq 20$, $1 \\leq a, b \\leq 100$)\u00a0\u2014 the number of dancers, the cost of a white suit, and the cost of a black suit.\n\nThe next line contains $n$ numbers $c_i$, $i$-th of which denotes the color of the suit of the $i$-th dancer. Number $0$ denotes the white color, $1$\u00a0\u2014 the black color, and $2$ denotes that a suit for this dancer is still to be bought.\n\n\n-----Output-----\n\nIf it is not possible to form a palindrome without swapping dancers and buying new suits for those who have one, then output -1. Otherwise, output the minimal price to get the desired visual effect.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer $p$ (which may be positive, negative, or zero). To combine their tastes, they invented $p$-binary numbers of the form $2^x + p$, where $x$ is a non-negative integer.\n\nFor example, some $-9$-binary (\"minus nine\" binary) numbers are: $-8$ (minus eight), $7$ and $1015$ ($-8=2^0-9$, $7=2^4-9$, $1015=2^{10}-9$).\n\nThe boys now use $p$-binary numbers to represent everything. They now face a problem: given a positive integer $n$, what's the smallest number of $p$-binary numbers (not necessarily distinct) they need to represent $n$ as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.\n\nFor example, if $p=0$ we can represent $7$ as $2^0 + 2^1 + 2^2$.\n\nAnd if $p=-9$ we can represent $7$ as one number $(2^4-9)$.\n\nNote that negative $p$-binary numbers are allowed to be in the sum (see the Notes section for an example).\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $p$ ($1 \\leq n \\leq 10^9$, $-1000 \\leq p \\leq 1000$).\n\n\n-----Output-----\n\nIf it is impossible to represent $n$ as the sum of any number of $p$-binary numbers, print a single integer $-1$. Otherwise, print the smallest possible number of summands.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nA group of $n$ dancers rehearses a performance for the closing ceremony. The dancers are arranged in a row, they've studied their dancing moves and can't change positions. For some of them, a white dancing suit is already bought, for some of them \u2014 a black one, and for the rest the suit will be bought in the future.\n\nOn the day when the suits were to be bought, the director was told that the participants of the olympiad will be happy if the colors of the suits on the scene will form a palindrome. A palindrome is a sequence that is the same when read from left to right and when read from right to left. The director liked the idea, and she wants to buy suits so that the color of the leftmost dancer's suit is the same as the color of the rightmost dancer's suit, the 2nd left is the same as 2nd right, and so on.\n\nThe director knows how many burls it costs to buy a white suit, and how many burls to buy a black suit. You need to find out whether it is possible to buy suits to form a palindrome, and if it's possible, what's the minimal cost of doing so. Remember that dancers can not change positions, and due to bureaucratic reasons it is not allowed to buy new suits for the dancers who already have suits, even if it reduces the overall spending.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $a$, and $b$ ($1 \\leq n \\leq 20$, $1 \\leq a, b \\leq 100$)\u00a0\u2014 the number of dancers, the cost of a white suit, and the cost of a black suit.\n\nThe next line contains $n$ numbers $c_i$, $i$-th of which denotes the color of the suit of the $i$-th dancer. Number $0$ denotes the white color, $1$\u00a0\u2014 the black color, and $2$ denotes that a suit for this dancer is still to be bought.\n\n\n-----Output-----\n\nIf it is not possible to form a palindrome without swapping dancers and buying new suits for those who have one, then output -1. Otherwise, output the minimal price to get the desired visual effect.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 10^18).\n\n\n-----Output-----\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYear 2118. Androids are in mass production for decades now, and they do all the work for humans. But androids have to go to school to be able to solve creative tasks. Just like humans before.\n\nIt turns out that high school struggles are not gone. If someone is not like others, he is bullied. Vasya-8800 is an economy-class android which is produced by a little-known company. His design is not perfect, his characteristics also could be better. So he is bullied by other androids.\n\nOne of the popular pranks on Vasya is to force him to compare $x^y$ with $y^x$. Other androids can do it in milliseconds while Vasya's memory is too small to store such big numbers.\n\nPlease help Vasya! Write a fast program to compare $x^y$ with $y^x$ for Vasya, maybe then other androids will respect him.\n\n\n-----Input-----\n\nOn the only line of input there are two integers $x$ and $y$ ($1 \\le x, y \\le 10^{9}$).\n\n\n-----Output-----\n\nIf $x^y < y^x$, then print '<' (without quotes). If $x^y > y^x$, then print '>' (without quotes). If $x^y = y^x$, then print '=' (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array.\n\nFor some indices i (1 \u2264 i \u2264 n - 1) it is possible to swap i-th element with (i + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i-th element with (i + 1)-th (if the position is not forbidden).\n\nCan you make this array sorted in ascending order performing some sequence of swapping operations?\n\n\n-----Input-----\n\nThe first line contains one integer n (2 \u2264 n \u2264 200000) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 200000) \u2014 the elements of the array. Each integer from 1 to n appears exactly once.\n\nThe third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th.\n\n\n-----Output-----\n\nIf it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe number \"zero\" is called \"love\" (or \"l'oeuf\" to be precise, literally means \"egg\" in French), for example when denoting the zero score in a game of tennis. \n\nAki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.\n\nHowever, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.\n\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ ($1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.\n\nThe pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches $2 \\cdot x, 3 \\cdot x, \\ldots, \\lfloor \\frac{y}{x} \\rfloor \\cdot x$.\n\nKeeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.\n\nIn other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nStudents Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 360) \u00a0\u2014 the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 360) \u00a0\u2014 the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.\n\n\n-----Output-----\n\nPrint one integer \u00a0\u2014 the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length l_{i}.\n\nIlya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.\n\nSticks with lengths a_1, a_2, a_3 and a_4 can make a rectangle if the following properties are observed:  a_1 \u2264 a_2 \u2264 a_3 \u2264 a_4  a_1 = a_2  a_3 = a_4 \n\nA rectangle can be made of sticks with lengths of, for example, 3\u00a03\u00a03\u00a03 or 2\u00a02\u00a04\u00a04. A rectangle cannot be made of, for example, sticks 5\u00a05\u00a05\u00a07.\n\nIlya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.\n\nYou have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of the available sticks.\n\nThe second line of the input contains n positive integers l_{i} (2 \u2264 l_{i} \u2264 10^6)\u00a0\u2014\u00a0the lengths of the sticks.\n\n\n-----Output-----\n\nThe first line of the output must contain a single non-negative integer\u00a0\u2014\u00a0the maximum total area of the rectangles that Ilya can make from the available sticks.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nZane the wizard had never loved anyone before, until he fell in love with a girl, whose name remains unknown to us.\n\n [Image] \n\nThe girl lives in house m of a village. There are n houses in that village, lining in a straight line from left to right: house 1, house 2, ..., house n. The village is also well-structured: house i and house i + 1 (1 \u2264 i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a_1, a_2, ..., a_{n} that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then a_{i} equals 0. Otherwise, house i can be bought, and a_{i} represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\n\n-----Input-----\n\nThe first line contains three integers n, m, and k (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 100)\u00a0\u2014 the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 100)\u00a0\u2014 denoting the availability and the prices of the houses.\n\nIt is guaranteed that a_{m} = 0 and that it is possible to purchase some house with no more than k dollars.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum distance, in meters, from the house where the girl Zane likes lives to the house Zane can buy.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length l_{i}.\n\nIlya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.\n\nSticks with lengths a_1, a_2, a_3 and a_4 can make a rectangle if the following properties are observed:  a_1 \u2264 a_2 \u2264 a_3 \u2264 a_4  a_1 = a_2  a_3 = a_4 \n\nA rectangle can be made of sticks with lengths of, for example, 3\u00a03\u00a03\u00a03 or 2\u00a02\u00a04\u00a04. A rectangle cannot be made of, for example, sticks 5\u00a05\u00a05\u00a07.\n\nIlya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.\n\nYou have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of the available sticks.\n\nThe second line of the input contains n positive integers l_{i} (2 \u2264 l_{i} \u2264 10^6)\u00a0\u2014\u00a0the lengths of the sticks.\n\n\n-----Output-----\n\nThe first line of the output must contain a single non-negative integer\u00a0\u2014\u00a0the maximum total area of the rectangles that Ilya can make from the available sticks.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA little girl loves problems on bitwise operations very much. Here's one of them.\n\nYou are given two integers l and r. Let's consider the values of $a \\oplus b$ for all pairs of integers a and b (l \u2264 a \u2264 b \u2264 r). Your task is to find the maximum value among all considered ones.\n\nExpression $x \\oplus y$ means applying bitwise excluding or operation to integers x and y. The given operation exists in all modern programming languages, for example, in languages C++ and Java it is represented as \"^\", in Pascal \u2014 as \u00abxor\u00bb.\n\n\n-----Input-----\n\nThe single line contains space-separated integers l and r (1 \u2264 l \u2264 r \u2264 10^18).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the maximum value of $a \\oplus b$ for all pairs of integers a, b (l \u2264 a \u2264 b \u2264 r).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIn the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length l_{i}.\n\nIlya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.\n\nSticks with lengths a_1, a_2, a_3 and a_4 can make a rectangle if the following properties are observed:  a_1 \u2264 a_2 \u2264 a_3 \u2264 a_4  a_1 = a_2  a_3 = a_4 \n\nA rectangle can be made of sticks with lengths of, for example, 3\u00a03\u00a03\u00a03 or 2\u00a02\u00a04\u00a04. A rectangle cannot be made of, for example, sticks 5\u00a05\u00a05\u00a07.\n\nIlya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.\n\nYou have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of the available sticks.\n\nThe second line of the input contains n positive integers l_{i} (2 \u2264 l_{i} \u2264 10^6)\u00a0\u2014\u00a0the lengths of the sticks.\n\n\n-----Output-----\n\nThe first line of the output must contain a single non-negative integer\u00a0\u2014\u00a0the maximum total area of the rectangles that Ilya can make from the available sticks.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere are $n$ consecutive seat places in a railway carriage. Each place is either empty or occupied by a passenger.\n\nThe university team for the Olympiad consists of $a$ student-programmers and $b$ student-athletes. Determine the largest number of students from all $a+b$ students, which you can put in the railway carriage so that:  no student-programmer is sitting next to the student-programmer;  and no student-athlete is sitting next to the student-athlete. \n\nIn the other words, there should not be two consecutive (adjacent) places where two student-athletes or two student-programmers are sitting.\n\nConsider that initially occupied seat places are occupied by jury members (who obviously are not students at all).\n\n\n-----Input-----\n\nThe first line contain three integers $n$, $a$ and $b$ ($1 \\le n \\le 2\\cdot10^{5}$, $0 \\le a, b \\le 2\\cdot10^{5}$, $a + b > 0$) \u2014 total number of seat places in the railway carriage, the number of student-programmers and the number of student-athletes.\n\nThe second line contains a string with length $n$, consisting of characters \".\" and \"*\". The dot means that the corresponding place is empty. The asterisk means that the corresponding place is occupied by the jury member.\n\n\n-----Output-----\n\nPrint the largest number of students, which you can put in the railway carriage so that no student-programmer is sitting next to a student-programmer and no student-athlete is sitting next to a student-athlete.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array $a_1, a_2, \\dots , a_n$ and two integers $m$ and $k$.\n\nYou can choose some subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$. \n\nThe cost of subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$ is equal to $\\sum\\limits_{i=l}^{r} a_i - k \\lceil \\frac{r - l + 1}{m} \\rceil$, where $\\lceil x \\rceil$ is the least integer greater than or equal to $x$. \n\nThe cost of empty subarray is equal to zero.\n\nFor example, if $m = 3$, $k = 10$ and $a = [2, -4, 15, -3, 4, 8, 3]$, then the cost of some subarrays are:  $a_3 \\dots a_3: 15 - k \\lceil \\frac{1}{3} \\rceil = 15 - 10 = 5$;  $a_3 \\dots a_4: (15 - 3) - k \\lceil \\frac{2}{3} \\rceil = 12 - 10 = 2$;  $a_3 \\dots a_5: (15 - 3 + 4) - k \\lceil \\frac{3}{3} \\rceil = 16 - 10 = 6$;  $a_3 \\dots a_6: (15 - 3 + 4 + 8) - k \\lceil \\frac{4}{3} \\rceil = 24 - 20 = 4$;  $a_3 \\dots a_7: (15 - 3 + 4 + 8 + 3) - k \\lceil \\frac{5}{3} \\rceil = 27 - 20 = 7$. \n\nYour task is to find the maximum cost of some subarray (possibly empty) of array $a$.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$, and $k$ ($1 \\le n \\le 3 \\cdot 10^5, 1 \\le m \\le 10, 1 \\le k \\le 10^9$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint the maximum cost of some subarray of array $a$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given n switches and m lamps. The i-th switch turns on some subset of the lamps. This information is given as the matrix a consisting of n rows and m columns where a_{i}, j = 1 if the i-th switch turns on the j-th lamp and a_{i}, j = 0 if the i-th switch is not connected to the j-th lamp.\n\nInitially all m lamps are turned off.\n\nSwitches change state only from \"off\" to \"on\". It means that if you press two or more switches connected to the same lamp then the lamp will be turned on after any of this switches is pressed and will remain its state even if any switch connected to this lamp is pressed afterwards.\n\nIt is guaranteed that if you push all n switches then all m lamps will be turned on.\n\nYour think that you have too many switches and you would like to ignore one of them. \n\nYour task is to say if there exists such a switch that if you will ignore (not use) it but press all the other n - 1 switches then all the m lamps will be turned on.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 2000) \u2014 the number of the switches and the number of the lamps.\n\nThe following n lines contain m characters each. The character a_{i}, j is equal to '1' if the i-th switch turns on the j-th lamp and '0' otherwise.\n\nIt is guaranteed that if you press all n switches all m lamps will be turned on.\n\n\n-----Output-----\n\nPrint \"YES\" if there is a switch that if you will ignore it and press all the other n - 1 switches then all m lamps will be turned on. Print \"NO\" if there is no such switch.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\n\n-----Input-----\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. \n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if there is no such way to remove some digits from number n. \n\nOtherwise, print \"YES\" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.\n\nIf there are multiple possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe three friends, Kuro, Shiro, and Katie, met up again! It's time for a party...\n\nWhat the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now $n$ cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle.\n\nKatie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are $m$ cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment?\n\nCould you help her with this curiosity?\n\nYou can see the examples and their descriptions with pictures in the \"Note\" section.\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m$ ($2 \\leq n \\leq 1000$, $0 \\leq m \\leq n$)\u00a0\u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of groups of cats at the moment Katie observes.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.\n\nBob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?\n\n\n-----Input-----\n\nThe first and the only line of the input contains two distinct integers n and m (1 \u2264 n, m \u2264 10^4), separated by a space .\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.\n\nBob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?\n\n\n-----Input-----\n\nThe first and the only line of the input contains two distinct integers n and m (1 \u2264 n, m \u2264 10^4), separated by a space .\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nWhile swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 9)\u00a0\u2014 the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.\n\nBob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?\n\n\n-----Input-----\n\nThe first and the only line of the input contains two distinct integers n and m (1 \u2264 n, m \u2264 10^4), separated by a space .\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIn the city of Saint Petersburg, a day lasts for $2^{100}$ minutes. From the main station of Saint Petersburg, a train departs after $1$ minute, $4$ minutes, $16$ minutes, and so on; in other words, the train departs at time $4^k$ for each integer $k \\geq 0$. Team BowWow has arrived at the station at the time $s$ and it is trying to count how many trains have they missed; in other words, the number of trains that have departed strictly before time $s$. For example if $s = 20$, then they missed trains which have departed at $1$, $4$ and $16$. As you are the only one who knows the time, help them!\n\nNote that the number $s$ will be given you in a binary representation without leading zeroes.\n\n\n-----Input-----\n\nThe first line contains a single binary number $s$ ($0 \\leq s < 2^{100}$) without leading zeroes.\n\n\n-----Output-----\n\nOutput a single number\u00a0\u2014 the number of trains which have departed strictly before the time $s$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nVasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.\n\nBob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?\n\n\n-----Input-----\n\nThe first and the only line of the input contains two distinct integers n and m (1 \u2264 n, m \u2264 10^4), separated by a space .\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nOne very important person has a piece of paper in the form of a rectangle a \u00d7 b.\n\nAlso, he has n seals. Each seal leaves an impression on the paper in the form of a rectangle of the size x_{i} \u00d7 y_{i}. Each impression must be parallel to the sides of the piece of paper (but seal can be rotated by 90 degrees).\n\nA very important person wants to choose two different seals and put them two impressions. Each of the selected seals puts exactly one impression. Impressions should not overlap (but they can touch sides), and the total area occupied by them should be the largest possible. What is the largest area that can be occupied by two seals?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, a and b (1 \u2264 n, a, b \u2264 100).\n\nEach of the next n lines contain two numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 100).\n\n\n-----Output-----\n\nPrint the largest total area that can be occupied by two seals. If you can not select two seals, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVitya has just started learning Berlanese language. It is known that Berlanese uses the Latin alphabet. Vowel letters are \"a\", \"o\", \"u\", \"i\", and \"e\". Other letters are consonant.\n\nIn Berlanese, there has to be a vowel after every consonant, but there can be any letter after any vowel. The only exception is a consonant \"n\"; after this letter, there can be any letter (not only a vowel) or there can be no letter at all. For example, the words \"harakiri\", \"yupie\", \"man\", and \"nbo\" are Berlanese while the words \"horse\", \"king\", \"my\", and \"nz\" are not.\n\nHelp Vitya find out if a word $s$ is Berlanese.\n\n\n-----Input-----\n\nThe first line of the input contains the string $s$ consisting of $|s|$ ($1\\leq |s|\\leq 100$) lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if there is a vowel after every consonant except \"n\", otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nWe get more and more news about DDoS-attacks of popular websites.\n\nArseny is an admin and he thinks that a website is under a DDoS-attack if the total number of requests for a some period of time exceeds $100 \\cdot t$, where $t$ \u2014 the number of seconds in this time segment. \n\nArseny knows statistics on the number of requests per second since the server is booted. He knows the sequence $r_1, r_2, \\dots, r_n$, where $r_i$ \u2014 the number of requests in the $i$-th second after boot. \n\nDetermine the length of the longest continuous period of time, which Arseny considers to be a DDoS-attack. A seeking time period should not go beyond the boundaries of the segment $[1, n]$.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 5000$) \u2014 number of seconds since server has been booted. The second line contains sequence of integers $r_1, r_2, \\dots, r_n$ ($0 \\le r_i \\le 5000$), $r_i$ \u2014 number of requests in the $i$-th second.\n\n\n-----Output-----\n\nPrint the only integer number \u2014 the length of the longest time period which is considered to be a DDoS-attack by Arseny. If it doesn't exist print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMelody Pond was stolen from her parents as a newborn baby by Madame Kovarian, to become a weapon of the Silence in their crusade against the Doctor. Madame Kovarian changed Melody's name to River Song, giving her a new identity that allowed her to kill the Eleventh Doctor.\n\nHeidi figured out that Madame Kovarian uses a very complicated hashing function in order to change the names of the babies she steals. In order to prevent this from happening to future Doctors, Heidi decided to prepare herself by learning some basic hashing techniques.\n\nThe first hashing function she designed is as follows.\n\nGiven two positive integers $(x, y)$ she defines $H(x,y):=x^2+2xy+x+1$.\n\nNow, Heidi wonders if the function is reversible. That is, given a positive integer $r$, can you find a pair $(x, y)$ (of positive integers) such that $H(x, y) = r$?\n\nIf multiple such pairs exist, output the one with smallest possible $x$. If there is no such pair, output \"NO\".\n\n\n-----Input-----\n\nThe first and only line contains an integer $r$ ($1 \\le r \\le 10^{12}$).\n\n\n-----Output-----\n\nOutput integers $x, y$ such that $H(x,y) = r$ and $x$ is smallest possible, or \"NO\" if no such pair exists.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nWe get more and more news about DDoS-attacks of popular websites.\n\nArseny is an admin and he thinks that a website is under a DDoS-attack if the total number of requests for a some period of time exceeds $100 \\cdot t$, where $t$ \u2014 the number of seconds in this time segment. \n\nArseny knows statistics on the number of requests per second since the server is booted. He knows the sequence $r_1, r_2, \\dots, r_n$, where $r_i$ \u2014 the number of requests in the $i$-th second after boot. \n\nDetermine the length of the longest continuous period of time, which Arseny considers to be a DDoS-attack. A seeking time period should not go beyond the boundaries of the segment $[1, n]$.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 5000$) \u2014 number of seconds since server has been booted. The second line contains sequence of integers $r_1, r_2, \\dots, r_n$ ($0 \\le r_i \\le 5000$), $r_i$ \u2014 number of requests in the $i$-th second.\n\n\n-----Output-----\n\nPrint the only integer number \u2014 the length of the longest time period which is considered to be a DDoS-attack by Arseny. If it doesn't exist print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPolycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 \u2264 n \u2264 2 000 000 000, 1 \u2264 k \u2264 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w \u2014 the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA one-dimensional Japanese crossword can be represented as a binary string of length x. An encoding of this crossword is an array a of size n, where n is the number of segments formed completely of 1's, and a_{i} is the length of i-th segment. No two segments touch or intersect.\n\nFor example:   If x = 6 and the crossword is 111011, then its encoding is an array {3, 2};  If x = 8 and the crossword is 01101010, then its encoding is an array {2, 1, 1};  If x = 5 and the crossword is 11111, then its encoding is an array {5};  If x = 5 and the crossword is 00000, then its encoding is an empty array. \n\nMishka wants to create a new one-dimensional Japanese crossword. He has already picked the length and the encoding for this crossword. And now he needs to check if there is exactly one crossword such that its length and encoding are equal to the length and encoding he picked. Help him to check it!\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and x (1 \u2264 n \u2264 100000, 1 \u2264 x \u2264 10^9) \u2014 the number of elements in the encoding and the length of the crossword Mishka picked.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10000) \u2014 the encoding.\n\n\n-----Output-----\n\nPrint YES if there exists exaclty one crossword with chosen length and encoding. Otherwise, print NO.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nWe get more and more news about DDoS-attacks of popular websites.\n\nArseny is an admin and he thinks that a website is under a DDoS-attack if the total number of requests for a some period of time exceeds $100 \\cdot t$, where $t$ \u2014 the number of seconds in this time segment. \n\nArseny knows statistics on the number of requests per second since the server is booted. He knows the sequence $r_1, r_2, \\dots, r_n$, where $r_i$ \u2014 the number of requests in the $i$-th second after boot. \n\nDetermine the length of the longest continuous period of time, which Arseny considers to be a DDoS-attack. A seeking time period should not go beyond the boundaries of the segment $[1, n]$.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 5000$) \u2014 number of seconds since server has been booted. The second line contains sequence of integers $r_1, r_2, \\dots, r_n$ ($0 \\le r_i \\le 5000$), $r_i$ \u2014 number of requests in the $i$-th second.\n\n\n-----Output-----\n\nPrint the only integer number \u2014 the length of the longest time period which is considered to be a DDoS-attack by Arseny. If it doesn't exist print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMedicine faculty of Berland State University has just finished their admission campaign. As usual, about $80\\%$ of applicants are girls and majority of them are going to live in the university dormitory for the next $4$ (hopefully) years.\n\nThe dormitory consists of $n$ rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number $i$ costs $c_i$ burles. Rooms are numbered from $1$ to $n$.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room $i$ in second $t$ then it will run to room $a_i$ in second $t + 1$ without visiting any other rooms inbetween ($i = a_i$ means that mouse won't leave room $i$). It's second $0$ in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from $1$ to $n$ at second $0$.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\n\n-----Input-----\n\nThe first line contains as single integers $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the dormitory.\n\nThe second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 10^4$) \u2014 $c_i$ is the cost of setting the trap in room number $i$.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 $a_i$ is the room the mouse will run to the next second after being in room $i$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.\n\nThe pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches $2 \\cdot x, 3 \\cdot x, \\ldots, \\lfloor \\frac{y}{x} \\rfloor \\cdot x$.\n\nKeeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.\n\nIn other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have two friends. You want to present each of them several positive integers. You want to present cnt_1 numbers to the first friend and cnt_2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\n\n-----Input-----\n\nThe only line contains four positive integers cnt_1, cnt_2, x, y (1 \u2264 cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4)\u00a0\u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, ....  [Image] \n\nThe Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.\n\n\n-----Input-----\n\nThe first line of input contains two integers a and b (1 \u2264 a, b \u2264 100). \n\nThe second line contains two integers c and d (1 \u2264 c, d \u2264 100).\n\n\n-----Output-----\n\nPrint the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have two friends. You want to present each of them several positive integers. You want to present cnt_1 numbers to the first friend and cnt_2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\n\n-----Input-----\n\nThe only line contains four positive integers cnt_1, cnt_2, x, y (1 \u2264 cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4)\u00a0\u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nVasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^18, k \u2264 n)\u00a0\u2014 the number of sticks drawn by Sasha and the number k\u00a0\u2014 the number of sticks to be crossed out on each turn.\n\n\n-----Output-----\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have two friends. You want to present each of them several positive integers. You want to present cnt_1 numbers to the first friend and cnt_2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\n\n-----Input-----\n\nThe only line contains four positive integers cnt_1, cnt_2, x, y (1 \u2264 cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4)\u00a0\u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given two $n \\times m$ matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. \n\nFor example, the matrix $\\begin{bmatrix} 9&10&11\\\\ 11&12&14\\\\ \\end{bmatrix}$ is increasing because each individual row and column is strictly increasing. On the other hand, the matrix $\\begin{bmatrix} 1&1\\\\ 2&3\\\\ \\end{bmatrix}$ is not increasing because the first row is not strictly increasing.\n\nLet a position in the $i$-th row (from top) and $j$-th column (from left) in a matrix be denoted as $(i, j)$. \n\nIn one operation, you can choose any two numbers $i$ and $j$ and swap the number located in $(i, j)$ in the first matrix with the number in $(i, j)$ in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.\n\nYou would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print \"Possible\", otherwise, print \"Impossible\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 50$)\u00a0\u2014 the dimensions of each matrix.\n\nEach of the next $n$ lines contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$ ($1 \\leq a_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the first matrix.\n\nEach of the next $n$ lines contains $m$ integers $b_{i1}, b_{i2}, \\ldots, b_{im}$ ($1 \\leq b_{ij} \\leq 10^9$)\u00a0\u2014 the number located in position $(i, j)$ in the second matrix.\n\n\n-----Output-----\n\nPrint a string \"Impossible\" or \"Possible\".\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA new delivery of clothing has arrived today to the clothing store. This delivery consists of $a$ ties, $b$ scarves, $c$ vests and $d$ jackets.\n\nThe store does not sell single clothing items \u2014 instead, it sells suits of two types:  a suit of the first type consists of one tie and one jacket;  a suit of the second type consists of one scarf, one vest and one jacket. \n\nEach suit of the first type costs $e$ coins, and each suit of the second type costs $f$ coins.\n\nCalculate the maximum possible cost of a set of suits that can be composed from the delivered clothing items. Note that one item cannot be used in more than one suit (though some items may be left unused).\n\n\n-----Input-----\n\nThe first line contains one integer $a$ $(1 \\le a \\le 100\\,000)$ \u2014 the number of ties.\n\nThe second line contains one integer $b$ $(1 \\le b \\le 100\\,000)$ \u2014 the number of scarves.\n\nThe third line contains one integer $c$ $(1 \\le c \\le 100\\,000)$ \u2014 the number of vests.\n\nThe fourth line contains one integer $d$ $(1 \\le d \\le 100\\,000)$ \u2014 the number of jackets.\n\nThe fifth line contains one integer $e$ $(1 \\le e \\le 1\\,000)$ \u2014 the cost of one suit of the first type.\n\nThe sixth line contains one integer $f$ $(1 \\le f \\le 1\\,000)$ \u2014 the cost of one suit of the second type.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum total cost of some set of suits that can be composed from the delivered items. \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMedicine faculty of Berland State University has just finished their admission campaign. As usual, about $80\\%$ of applicants are girls and majority of them are going to live in the university dormitory for the next $4$ (hopefully) years.\n\nThe dormitory consists of $n$ rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number $i$ costs $c_i$ burles. Rooms are numbered from $1$ to $n$.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room $i$ in second $t$ then it will run to room $a_i$ in second $t + 1$ without visiting any other rooms inbetween ($i = a_i$ means that mouse won't leave room $i$). It's second $0$ in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from $1$ to $n$ at second $0$.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\n\n-----Input-----\n\nThe first line contains as single integers $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the dormitory.\n\nThe second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 10^4$) \u2014 $c_i$ is the cost of setting the trap in room number $i$.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 $a_i$ is the room the mouse will run to the next second after being in room $i$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nMakes solves problems on Decoforces and lots of other different online judges. Each problem is denoted by its difficulty \u2014 a positive integer number. Difficulties are measured the same across all the judges (the problem with difficulty d on Decoforces is as hard as the problem with difficulty d on any other judge). \n\nMakes has chosen n problems to solve on Decoforces with difficulties a_1, a_2, ..., a_{n}. He can solve these problems in arbitrary order. Though he can solve problem i with difficulty a_{i} only if he had already solved some problem with difficulty $d \\geq \\frac{a_{i}}{2}$ (no matter on what online judge was it).\n\nBefore starting this chosen list of problems, Makes has already solved problems with maximum difficulty k.\n\nWith given conditions it's easy to see that Makes sometimes can't solve all the chosen problems, no matter what order he chooses. So he wants to solve some problems on other judges to finish solving problems from his list. \n\nFor every positive integer y there exist some problem with difficulty y on at least one judge besides Decoforces.\n\nMakes can solve problems on any judge at any time, it isn't necessary to do problems from the chosen list one right after another.\n\nMakes doesn't have too much free time, so he asked you to calculate the minimum number of problems he should solve on other judges in order to solve all the chosen problems from Decoforces.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, k (1 \u2264 n \u2264 10^3, 1 \u2264 k \u2264 10^9).\n\nThe second line contains n space-separated integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint minimum number of problems Makes should solve on other judges in order to solve all chosen problems on Decoforces.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMedicine faculty of Berland State University has just finished their admission campaign. As usual, about $80\\%$ of applicants are girls and majority of them are going to live in the university dormitory for the next $4$ (hopefully) years.\n\nThe dormitory consists of $n$ rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number $i$ costs $c_i$ burles. Rooms are numbered from $1$ to $n$.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room $i$ in second $t$ then it will run to room $a_i$ in second $t + 1$ without visiting any other rooms inbetween ($i = a_i$ means that mouse won't leave room $i$). It's second $0$ in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from $1$ to $n$ at second $0$.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\n\n-----Input-----\n\nThe first line contains as single integers $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the dormitory.\n\nThe second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 10^4$) \u2014 $c_i$ is the cost of setting the trap in room number $i$.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 $a_i$ is the room the mouse will run to the next second after being in room $i$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\n\n-----Input-----\n\nThe only line of input contains a string s of length between 1 and 10^5 consisting of uppercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAfter seeing the \"ALL YOUR BASE ARE BELONG TO US\" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.\n\nYou're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and b_{x} (1 \u2264 n \u2264 10, 2 \u2264 b_{x} \u2264 40), where n is the number of digits in the b_{x}-based representation of X. \n\nThe second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} < b_{x}) \u2014 the digits of X. They are given in the order from the most significant digit to the least significant one.\n\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 \u2264 m \u2264 10, 2 \u2264 b_{y} \u2264 40, b_{x} \u2260 b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 \u2264 y_{i} < b_{y}) \u2014 the digits of Y.\n\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.\n\n\n-----Output-----\n\nOutput a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nMedicine faculty of Berland State University has just finished their admission campaign. As usual, about $80\\%$ of applicants are girls and majority of them are going to live in the university dormitory for the next $4$ (hopefully) years.\n\nThe dormitory consists of $n$ rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number $i$ costs $c_i$ burles. Rooms are numbered from $1$ to $n$.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room $i$ in second $t$ then it will run to room $a_i$ in second $t + 1$ without visiting any other rooms inbetween ($i = a_i$ means that mouse won't leave room $i$). It's second $0$ in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from $1$ to $n$ at second $0$.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\n\n-----Input-----\n\nThe first line contains as single integers $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the dormitory.\n\nThe second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 10^4$) \u2014 $c_i$ is the cost of setting the trap in room number $i$.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 $a_i$ is the room the mouse will run to the next second after being in room $i$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nStudents Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 360) \u00a0\u2014 the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 360) \u00a0\u2014 the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.\n\n\n-----Output-----\n\nPrint one integer \u00a0\u2014 the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 n)\u00a0\u2014 the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). \n\nIn one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.\n\nDetermine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.\n\nAn integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{9}$). The number is given without leading zeroes.\n\n\n-----Output-----\n\nIf it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe circle line of the Roflanpolis subway has $n$ stations.\n\nThere are two parallel routes in the subway. The first one visits stations in order $1 \\to 2 \\to \\ldots \\to n \\to 1 \\to 2 \\to \\ldots$ (so the next stop after station $x$ is equal to $(x+1)$ if $x < n$ and $1$ otherwise). The second route visits stations in order $n \\to (n-1) \\to \\ldots \\to 1 \\to n \\to (n-1) \\to \\ldots$ (so the next stop after station $x$ is equal to $(x-1)$ if $x>1$ and $n$ otherwise). All trains depart their stations simultaneously, and it takes exactly $1$ minute to arrive at the next station.\n\nTwo toads live in this city, their names are Daniel and Vlad.\n\nDaniel is currently in a train of the first route at station $a$ and will exit the subway when his train reaches station $x$.\n\nCoincidentally, Vlad is currently in a train of the second route at station $b$ and he will exit the subway when his train reaches station $y$.\n\nSurprisingly, all numbers $a,x,b,y$ are distinct.\n\nToad Ilya asks you to check if Daniel and Vlad will ever be at the same station at the same time during their journey. In other words, check if there is a moment when their trains stop at the same station. Note that this includes the moments when Daniel or Vlad enter or leave the subway.\n\n\n-----Input-----\n\nThe first line contains five space-separated integers $n$, $a$, $x$, $b$, $y$ ($4 \\leq n \\leq 100$, $1 \\leq a, x, b, y \\leq n$, all numbers among $a$, $x$, $b$, $y$ are distinct)\u00a0\u2014 the number of stations in Roflanpolis, Daniel's start station, Daniel's finish station, Vlad's start station and Vlad's finish station, respectively.\n\n\n-----Output-----\n\nOutput \"YES\" if there is a time moment when Vlad and Daniel are at the same station, and \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 n)\u00a0\u2014 the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.\n\nFor example, the string \"Hello\" for p = 2, q = 3 can be split to the two strings \"Hel\" and \"lo\" or to the two strings \"He\" and \"llo\".\n\nNote it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).\n\n\n-----Input-----\n\nThe first line contains three positive integers n, p, q (1 \u2264 p, q \u2264 n \u2264 100).\n\nThe second line contains the string s consists of lowercase and uppercase latin letters and digits.\n\n\n-----Output-----\n\nIf it's impossible to split the string s to the strings of length p and q print the only number \"-1\".\n\nOtherwise in the first line print integer k \u2014 the number of strings in partition of s.\n\nEach of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s \u2014 from left to right.\n\nIf there are several solutions print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nATMs of a well-known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser (the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations.\n\nFor example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles.\n\nLet's suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (1 \u2264 n \u2264 5000, 1 \u2264 k \u2264 20).\n\nThe next line contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 10^7) \u2014 the denominations of the bills that are used in the country. Numbers a_{i} follow in the strictly increasing order.\n\nThe next line contains integer q (1 \u2264 q \u2264 20) \u2014 the number of requests for cash withdrawal that you will make.\n\nThe next q lines contain numbers x_{i} (1 \u2264 x_{i} \u2264 2\u00b710^8) \u2014 the sums of money in burles that you are going to withdraw from the ATM.\n\n\n-----Output-----\n\nFor each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print  - 1, if it is impossible to get the corresponding sum.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 n)\u00a0\u2014 the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given array $a_1, a_2, \\dots, a_n$. Find the subsegment $a_l, a_{l+1}, \\dots, a_r$ ($1 \\le l \\le r \\le n$) with maximum arithmetic mean $\\frac{1}{r - l + 1}\\sum\\limits_{i=l}^{r}{a_i}$ (in floating-point numbers, i.e. without any rounding).\n\nIf there are many such subsegments find the longest one.\n\n\n-----Input-----\n\nThe first line contains single integer $n$ ($1 \\le n \\le 10^5$) \u2014 length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array $a$.\n\n\n-----Output-----\n\nPrint the single integer \u2014 the length of the longest subsegment with maximum possible arithmetic mean.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the current time in 24-hour format hh:mm. Find and print the time after a minutes.\n\nNote that you should find only the time after a minutes, see the examples to clarify the problem statement.\n\nYou can read more about 24-hour format here https://en.wikipedia.org/wiki/24-hour_clock.\n\n\n-----Input-----\n\nThe first line contains the current time in the format hh:mm (0 \u2264 hh < 24, 0 \u2264 mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 \u2264 a \u2264 10^4) \u2014 the number of the minutes passed.\n\n\n-----Output-----\n\nThe only line should contain the time after a minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed).\n\nSee the examples to check the input/output format.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNoora is a student of one famous high school. It's her final year in school\u00a0\u2014 she is going to study in university next year. However, she has to get an \u00abA\u00bb graduation certificate in order to apply to a prestigious one.\n\nIn school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784\u00a0\u2014 to 8. \n\nFor instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.\n\nTo graduate with \u00abA\u00bb certificate, Noora has to have mark k.\n\nNoora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 k) denoting marks received by Noora before Leha's hack.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nA company of $n$ friends wants to order exactly two pizzas. It is known that in total there are $9$ pizza ingredients in nature, which are denoted by integers from $1$ to $9$.\n\nEach of the $n$ friends has one or more favorite ingredients: the $i$-th of friends has the number of favorite ingredients equal to $f_i$ ($1 \\le f_i \\le 9$) and your favorite ingredients form the sequence $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nThe website of CodePizza restaurant has exactly $m$ ($m \\ge 2$) pizzas. Each pizza is characterized by a set of $r_j$ ingredients $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le r_j \\le 9$, $1 \\le a_{jt} \\le 9$) , which are included in it, and its price is $c_j$.\n\nHelp your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 2 \\le m \\le 10^5$) \u2014 the number of friends in the company and the number of pizzas, respectively.\n\nNext, the $n$ lines contain descriptions of favorite ingredients of the friends: the $i$-th of them contains the number of favorite ingredients $f_i$ ($1 \\le f_i \\le 9$) and a sequence of distinct integers $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nNext, the $m$ lines contain pizza descriptions: the $j$-th of them contains the integer price of the pizza $c_j$ ($1 \\le c_j \\le 10^9$), the number of ingredients $r_j$ ($1 \\le r_j \\le 9$) and the ingredients themselves as a sequence of distinct integers $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le a_{jt} \\le 9$).\n\n\n-----Output-----\n\nOutput two integers $j_1$ and $j_2$ ($1 \\le j_1,j_2 \\le m$, $j_1 \\ne j_2$) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVanya got an important task \u2014 he should enumerate books in the library and label each book with its number. Each of the n books should be assigned with a number from 1 to n. Naturally, distinct books should be assigned distinct numbers.\n\nVanya wants to know how many digits he will have to write down as he labels the books.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^9) \u2014 the number of books in the library.\n\n\n-----Output-----\n\nPrint the number of digits needed to number all the books.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAfter seeing the \"ALL YOUR BASE ARE BELONG TO US\" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.\n\nYou're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and b_{x} (1 \u2264 n \u2264 10, 2 \u2264 b_{x} \u2264 40), where n is the number of digits in the b_{x}-based representation of X. \n\nThe second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} < b_{x}) \u2014 the digits of X. They are given in the order from the most significant digit to the least significant one.\n\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 \u2264 m \u2264 10, 2 \u2264 b_{y} \u2264 40, b_{x} \u2260 b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 \u2264 y_{i} < b_{y}) \u2014 the digits of Y.\n\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.\n\n\n-----Output-----\n\nOutput a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere are $n$ consecutive seat places in a railway carriage. Each place is either empty or occupied by a passenger.\n\nThe university team for the Olympiad consists of $a$ student-programmers and $b$ student-athletes. Determine the largest number of students from all $a+b$ students, which you can put in the railway carriage so that:  no student-programmer is sitting next to the student-programmer;  and no student-athlete is sitting next to the student-athlete. \n\nIn the other words, there should not be two consecutive (adjacent) places where two student-athletes or two student-programmers are sitting.\n\nConsider that initially occupied seat places are occupied by jury members (who obviously are not students at all).\n\n\n-----Input-----\n\nThe first line contain three integers $n$, $a$ and $b$ ($1 \\le n \\le 2\\cdot10^{5}$, $0 \\le a, b \\le 2\\cdot10^{5}$, $a + b > 0$) \u2014 total number of seat places in the railway carriage, the number of student-programmers and the number of student-athletes.\n\nThe second line contains a string with length $n$, consisting of characters \".\" and \"*\". The dot means that the corresponding place is empty. The asterisk means that the corresponding place is occupied by the jury member.\n\n\n-----Output-----\n\nPrint the largest number of students, which you can put in the railway carriage so that no student-programmer is sitting next to a student-programmer and no student-athlete is sitting next to a student-athlete.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he has a positive integer $n$. He wants to split $n$ into $3$ positive integers $a,b,c$, such that $a+b+c=n$ and none of the $3$ integers is a multiple of $3$. Help him to find a solution.\n\n\n-----Input-----\n\nA single line containing one integer $n$ ($3 \\leq n \\leq 10^9$) \u2014 the integer Little C has.\n\n\n-----Output-----\n\nPrint $3$ positive integers $a,b,c$ in a single line, such that $a+b+c=n$ and none of them is a multiple of $3$.\n\nIt can be proved that there is at least one solution. If there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere are $n$ consecutive seat places in a railway carriage. Each place is either empty or occupied by a passenger.\n\nThe university team for the Olympiad consists of $a$ student-programmers and $b$ student-athletes. Determine the largest number of students from all $a+b$ students, which you can put in the railway carriage so that:  no student-programmer is sitting next to the student-programmer;  and no student-athlete is sitting next to the student-athlete. \n\nIn the other words, there should not be two consecutive (adjacent) places where two student-athletes or two student-programmers are sitting.\n\nConsider that initially occupied seat places are occupied by jury members (who obviously are not students at all).\n\n\n-----Input-----\n\nThe first line contain three integers $n$, $a$ and $b$ ($1 \\le n \\le 2\\cdot10^{5}$, $0 \\le a, b \\le 2\\cdot10^{5}$, $a + b > 0$) \u2014 total number of seat places in the railway carriage, the number of student-programmers and the number of student-athletes.\n\nThe second line contains a string with length $n$, consisting of characters \".\" and \"*\". The dot means that the corresponding place is empty. The asterisk means that the corresponding place is occupied by the jury member.\n\n\n-----Output-----\n\nPrint the largest number of students, which you can put in the railway carriage so that no student-programmer is sitting next to a student-programmer and no student-athlete is sitting next to a student-athlete.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn a small restaurant there are a tables for one person and b tables for two persons. \n\nIt it known that n groups of people come today, each consisting of one or two people. \n\nIf a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.\n\nIf a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.\n\nYou are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 2\u00b710^5) \u2014 the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 \u2264 t_{i} \u2264 2) \u2014 the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.\n\n\n-----Output-----\n\nPrint the total number of people the restaurant denies service to.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou have unlimited number of coins with values $1, 2, \\ldots, n$. You want to select some set of coins having the total value of $S$. \n\nIt is allowed to have multiple coins with the same value in the set. What is the minimum number of coins required to get sum $S$?\n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $S$ ($1 \\le n \\le 100\\,000$, $1 \\le S \\le 10^9$)\n\n\n-----Output-----\n\nPrint exactly one integer\u00a0\u2014 the minimum number of coins required to obtain sum $S$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere are $n$ consecutive seat places in a railway carriage. Each place is either empty or occupied by a passenger.\n\nThe university team for the Olympiad consists of $a$ student-programmers and $b$ student-athletes. Determine the largest number of students from all $a+b$ students, which you can put in the railway carriage so that:  no student-programmer is sitting next to the student-programmer;  and no student-athlete is sitting next to the student-athlete. \n\nIn the other words, there should not be two consecutive (adjacent) places where two student-athletes or two student-programmers are sitting.\n\nConsider that initially occupied seat places are occupied by jury members (who obviously are not students at all).\n\n\n-----Input-----\n\nThe first line contain three integers $n$, $a$ and $b$ ($1 \\le n \\le 2\\cdot10^{5}$, $0 \\le a, b \\le 2\\cdot10^{5}$, $a + b > 0$) \u2014 total number of seat places in the railway carriage, the number of student-programmers and the number of student-athletes.\n\nThe second line contains a string with length $n$, consisting of characters \".\" and \"*\". The dot means that the corresponding place is empty. The asterisk means that the corresponding place is occupied by the jury member.\n\n\n-----Output-----\n\nPrint the largest number of students, which you can put in the railway carriage so that no student-programmer is sitting next to a student-programmer and no student-athlete is sitting next to a student-athlete.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAlice and Bob play 5-in-a-row game. They have a playing field of size 10 \u00d7 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.\n\nIn current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.\n\nAlice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.\n\n\n-----Input-----\n\nYou are given matrix 10 \u00d7 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won.\n\n\n-----Output-----\n\nPrint 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.\n\nThe pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches $2 \\cdot x, 3 \\cdot x, \\ldots, \\lfloor \\frac{y}{x} \\rfloor \\cdot x$.\n\nKeeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.\n\nIn other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nGiven is a string S of length N.\nFind the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\nMore formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n - l_1 + len \\leq l_2\n - S[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)\nIf there is no such integer len, print 0.\n\n-----Constraints-----\n - 2 \\leq N \\leq 5 \\times 10^3\n - |S| = N\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping. If there is no such non-empty string, print 0 instead.\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). \n\nYour task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5). Next n lines contain four integers each, describing a single rectangle: x_1, y_1, x_2, y_2 (0 \u2264 x_1 < x_2 \u2264 31400, 0 \u2264 y_1 < y_2 \u2264 31400) \u2014 x_1 and x_2 are x-coordinates of the left and right edges of the rectangle, and y_1 and y_2 are y-coordinates of the bottom and top edges of the rectangle. \n\nNo two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).\n\n\n-----Output-----\n\nIn a single line print \"YES\", if the given rectangles form a square, or \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nBear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\n\n-----Input-----\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10)\u00a0\u2014 the weight of Limak and the weight of Bob respectively.\n\n\n-----Output-----\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given two lists of non-zero digits.\n\nLet's call an integer pretty if its (base 10) representation has at least one digit from the first list and at least one digit from the second list. What is the smallest positive pretty integer?\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 9) \u2014 the lengths of the first and the second lists, respectively.\n\nThe second line contains n distinct digits a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 9) \u2014 the elements of the first list.\n\nThe third line contains m distinct digits b_1, b_2, ..., b_{m} (1 \u2264 b_{i} \u2264 9) \u2014 the elements of the second list.\n\n\n-----Output-----\n\nPrint the smallest pretty integer.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nBajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nBear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\n\n-----Input-----\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10)\u00a0\u2014 the weight of Limak and the weight of Bob respectively.\n\n\n-----Output-----\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! \n\nEvery day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.\n\nVasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.\n\nAccording to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.\n\n\n-----Input-----\n\nThe only line contains three integers b, d and s (0 \u2264 b, d, s \u2264 10^18,  b + d + s \u2265 1)\u00a0\u2014 the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. \n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the minimum possible number of meals which Vasiliy could have missed during his vacation. \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA necklace can be described as a string of links ('-') and pearls ('o'), with the last link or pearl connected to the first one. $0$ \n\nYou can remove a link or a pearl and insert it between two other existing links or pearls (or between a link and a pearl) on the necklace. This process can be repeated as many times as you like, but you can't throw away any parts.\n\nCan you make the number of links between every two adjacent pearls equal? Two pearls are considered to be adjacent if there is no other pearl between them.\n\nNote that the final necklace should remain as one circular part of the same length as the initial necklace.\n\n\n-----Input-----\n\nThe only line of input contains a string $s$ ($3 \\leq |s| \\leq 100$), representing the necklace, where a dash '-' represents a link and the lowercase English letter 'o' represents a pearl.\n\n\n-----Output-----\n\nPrint \"YES\" if the links and pearls can be rejoined such that the number of links between adjacent pearls is equal. Otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere is an array with n elements a_1, a_2, ..., a_{n} and the number x.\n\nIn one operation you can select some i (1 \u2264 i \u2264 n) and replace element a_{i} with a_{i} & x, where & denotes the bitwise and operation.\n\nYou want the array to have at least two equal elements after applying some operations (possibly, none). In other words, there should be at least two distinct indices i \u2260 j such that a_{i} = a_{j}. Determine whether it is possible to achieve and, if possible, the minimal number of operations to apply.\n\n\n-----Input-----\n\nThe first line contains integers n and x (2 \u2264 n \u2264 100 000, 1 \u2264 x \u2264 100 000), number of elements in the array and the number to and with.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000), the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer denoting the minimal number of operations to do, or -1, if it is impossible.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMedicine faculty of Berland State University has just finished their admission campaign. As usual, about $80\\%$ of applicants are girls and majority of them are going to live in the university dormitory for the next $4$ (hopefully) years.\n\nThe dormitory consists of $n$ rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number $i$ costs $c_i$ burles. Rooms are numbered from $1$ to $n$.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room $i$ in second $t$ then it will run to room $a_i$ in second $t + 1$ without visiting any other rooms inbetween ($i = a_i$ means that mouse won't leave room $i$). It's second $0$ in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from $1$ to $n$ at second $0$.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\n\n-----Input-----\n\nThe first line contains as single integers $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the dormitory.\n\nThe second line contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 10^4$) \u2014 $c_i$ is the cost of setting the trap in room number $i$.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 $a_i$ is the room the mouse will run to the next second after being in room $i$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nInnokentiy decides to change the password in the social net \"Contact!\", but he is too lazy to invent a new password by himself. That is why he needs your help. \n\nInnokentiy decides that new password should satisfy the following conditions:  the length of the password must be equal to n,  the password should consist only of lowercase Latin letters,  the number of distinct symbols in the password must be equal to k,  any two consecutive symbols in the password must be distinct. \n\nYour task is to help Innokentiy and to invent a new password which will satisfy all given conditions. \n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (2 \u2264 n \u2264 100, 2 \u2264 k \u2264 min(n, 26)) \u2014 the length of the password and the number of distinct symbols in it. \n\nPay attention that a desired new password always exists.\n\n\n-----Output-----\n\nPrint any password which satisfies all conditions given by Innokentiy.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere is an array with n elements a_1, a_2, ..., a_{n} and the number x.\n\nIn one operation you can select some i (1 \u2264 i \u2264 n) and replace element a_{i} with a_{i} & x, where & denotes the bitwise and operation.\n\nYou want the array to have at least two equal elements after applying some operations (possibly, none). In other words, there should be at least two distinct indices i \u2260 j such that a_{i} = a_{j}. Determine whether it is possible to achieve and, if possible, the minimal number of operations to apply.\n\n\n-----Input-----\n\nThe first line contains integers n and x (2 \u2264 n \u2264 100 000, 1 \u2264 x \u2264 100 000), number of elements in the array and the number to and with.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000), the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer denoting the minimal number of operations to do, or -1, if it is impossible.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThere is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. \n\nHeidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \\leq \\sum_{i = 1}^{m} k_{i} \\leq n$) \u2013 the desired counts of lightsabers of each color from 1 to m.\n\n\n-----Output-----\n\nOutput YES if an interval with prescribed color counts exists, or output NO if there is none.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA positive integer is called a 2-3-integer, if it is equal to 2^{x}\u00b73^{y} for some non-negative integers x and y. In other words, these integers are such integers that only have 2 and 3 among their prime divisors. For example, integers 1, 6, 9, 16 and 108 \u2014 are 2-3 integers, while 5, 10, 21 and 120 are not.\n\nPrint the number of 2-3-integers on the given segment [l, r], i.\u00a0e. the number of sich 2-3-integers t that l \u2264 t \u2264 r.\n\n\n-----Input-----\n\nThe only line contains two integers l and r (1 \u2264 l \u2264 r \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nPrint a single integer the number of 2-3-integers on the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nThere is an array with n elements a_1, a_2, ..., a_{n} and the number x.\n\nIn one operation you can select some i (1 \u2264 i \u2264 n) and replace element a_{i} with a_{i} & x, where & denotes the bitwise and operation.\n\nYou want the array to have at least two equal elements after applying some operations (possibly, none). In other words, there should be at least two distinct indices i \u2260 j such that a_{i} = a_{j}. Determine whether it is possible to achieve and, if possible, the minimal number of operations to apply.\n\n\n-----Input-----\n\nThe first line contains integers n and x (2 \u2264 n \u2264 100 000, 1 \u2264 x \u2264 100 000), number of elements in the array and the number to and with.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000), the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer denoting the minimal number of operations to do, or -1, if it is impossible.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, ....  [Image] \n\nThe Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.\n\n\n-----Input-----\n\nThe first line of input contains two integers a and b (1 \u2264 a, b \u2264 100). \n\nThe second line contains two integers c and d (1 \u2264 c, d \u2264 100).\n\n\n-----Output-----\n\nPrint the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 \u2264 |s| \u2264 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nInnokentiy decides to change the password in the social net \"Contact!\", but he is too lazy to invent a new password by himself. That is why he needs your help. \n\nInnokentiy decides that new password should satisfy the following conditions:  the length of the password must be equal to n,  the password should consist only of lowercase Latin letters,  the number of distinct symbols in the password must be equal to k,  any two consecutive symbols in the password must be distinct. \n\nYour task is to help Innokentiy and to invent a new password which will satisfy all given conditions. \n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (2 \u2264 n \u2264 100, 2 \u2264 k \u2264 min(n, 26)) \u2014 the length of the password and the number of distinct symbols in it. \n\nPay attention that a desired new password always exists.\n\n\n-----Output-----\n\nPrint any password which satisfies all conditions given by Innokentiy.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPolycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 \u2264 n \u2264 2 000 000 000, 1 \u2264 k \u2264 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w \u2014 the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVictor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.\n\nVictor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.\n\nYou are given a word s. Can you predict what will it become after correction?\n\nIn this problem letters a, e, i, o, u and y are considered to be vowels.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters \u2014 the word before the correction.\n\n\n-----Output-----\n\nOutput the word s after the correction.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou have a given picture with size $w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n  A \"+\" shape has one center nonempty cell.  There should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction.  All other cells are empty. \n\nFind out if the given picture has single \"+\" shape.\n\n\n-----Input-----\n\nThe first line contains two integers $h$ and $w$ ($1 \\le h$, $w \\le 500$)\u00a0\u2014 the height and width of the picture.\n\nThe $i$-th of the next $h$ lines contains string $s_{i}$ of length $w$ consisting \".\" and \"*\" where \".\" denotes the empty space and \"*\" denotes the non-empty space.\n\n\n-----Output-----\n\nIf the given picture satisfies all conditions, print \"YES\". Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nDawid has four bags of candies. The $i$-th of them contains $a_i$ candies. Also, Dawid has two friends. He wants to give each bag to one of his two friends. Is it possible to distribute the bags in such a way that each friend receives the same amount of candies in total?\n\nNote, that you can't keep bags for yourself or throw them away, each bag should be given to one of the friends.\n\n\n-----Input-----\n\nThe only line contains four integers $a_1$, $a_2$, $a_3$ and $a_4$ ($1 \\leq a_i \\leq 100$) \u2014 the numbers of candies in each bag.\n\n\n-----Output-----\n\nOutput YES if it's possible to give the bags to Dawid's friends so that both friends receive the same amount of candies, or NO otherwise. Each character can be printed in any case (either uppercase or lowercase).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's consider equation:x^2 + s(x)\u00b7x - n = 0,  \n\nwhere x, n are positive integers, s(x) is the function, equal to the sum of digits of number x in the decimal number system.\n\nYou are given an integer n, find the smallest positive integer root of equation x, or else determine that there are no such roots.\n\n\n-----Input-----\n\nA single line contains integer n (1 \u2264 n \u2264 10^18) \u2014 the equation parameter.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier. \n\n\n-----Output-----\n\nPrint -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer x (x > 0), that the equation given in the statement holds.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nTwo positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\n\n-----Input-----\n\nThe first line of the input contains two integers s and x (2 \u2264 s \u2264 10^12, 0 \u2264 x \u2264 10^12), the sum and bitwise xor of the pair of positive integers, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nAfter seeing the \"ALL YOUR BASE ARE BELONG TO US\" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.\n\nYou're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and b_{x} (1 \u2264 n \u2264 10, 2 \u2264 b_{x} \u2264 40), where n is the number of digits in the b_{x}-based representation of X. \n\nThe second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} < b_{x}) \u2014 the digits of X. They are given in the order from the most significant digit to the least significant one.\n\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 \u2264 m \u2264 10, 2 \u2264 b_{y} \u2264 40, b_{x} \u2260 b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 \u2264 y_{i} < b_{y}) \u2014 the digits of Y.\n\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.\n\n\n-----Output-----\n\nOutput a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y \n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's consider equation:x^2 + s(x)\u00b7x - n = 0,  \n\nwhere x, n are positive integers, s(x) is the function, equal to the sum of digits of number x in the decimal number system.\n\nYou are given an integer n, find the smallest positive integer root of equation x, or else determine that there are no such roots.\n\n\n-----Input-----\n\nA single line contains integer n (1 \u2264 n \u2264 10^18) \u2014 the equation parameter.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier. \n\n\n-----Output-----\n\nPrint -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer x (x > 0), that the equation given in the statement holds.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIn the city of Saint Petersburg, a day lasts for $2^{100}$ minutes. From the main station of Saint Petersburg, a train departs after $1$ minute, $4$ minutes, $16$ minutes, and so on; in other words, the train departs at time $4^k$ for each integer $k \\geq 0$. Team BowWow has arrived at the station at the time $s$ and it is trying to count how many trains have they missed; in other words, the number of trains that have departed strictly before time $s$. For example if $s = 20$, then they missed trains which have departed at $1$, $4$ and $16$. As you are the only one who knows the time, help them!\n\nNote that the number $s$ will be given you in a binary representation without leading zeroes.\n\n\n-----Input-----\n\nThe first line contains a single binary number $s$ ($0 \\leq s < 2^{100}$) without leading zeroes.\n\n\n-----Output-----\n\nOutput a single number\u00a0\u2014 the number of trains which have departed strictly before the time $s$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLet's consider equation:x^2 + s(x)\u00b7x - n = 0,  \n\nwhere x, n are positive integers, s(x) is the function, equal to the sum of digits of number x in the decimal number system.\n\nYou are given an integer n, find the smallest positive integer root of equation x, or else determine that there are no such roots.\n\n\n-----Input-----\n\nA single line contains integer n (1 \u2264 n \u2264 10^18) \u2014 the equation parameter.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier. \n\n\n-----Output-----\n\nPrint -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer x (x > 0), that the equation given in the statement holds.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nA company of $n$ friends wants to order exactly two pizzas. It is known that in total there are $9$ pizza ingredients in nature, which are denoted by integers from $1$ to $9$.\n\nEach of the $n$ friends has one or more favorite ingredients: the $i$-th of friends has the number of favorite ingredients equal to $f_i$ ($1 \\le f_i \\le 9$) and your favorite ingredients form the sequence $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nThe website of CodePizza restaurant has exactly $m$ ($m \\ge 2$) pizzas. Each pizza is characterized by a set of $r_j$ ingredients $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le r_j \\le 9$, $1 \\le a_{jt} \\le 9$) , which are included in it, and its price is $c_j$.\n\nHelp your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 2 \\le m \\le 10^5$) \u2014 the number of friends in the company and the number of pizzas, respectively.\n\nNext, the $n$ lines contain descriptions of favorite ingredients of the friends: the $i$-th of them contains the number of favorite ingredients $f_i$ ($1 \\le f_i \\le 9$) and a sequence of distinct integers $b_{i1}, b_{i2}, \\dots, b_{if_i}$ ($1 \\le b_{it} \\le 9$).\n\nNext, the $m$ lines contain pizza descriptions: the $j$-th of them contains the integer price of the pizza $c_j$ ($1 \\le c_j \\le 10^9$), the number of ingredients $r_j$ ($1 \\le r_j \\le 9$) and the ingredients themselves as a sequence of distinct integers $a_{j1}, a_{j2}, \\dots, a_{jr_j}$ ($1 \\le a_{jt} \\le 9$).\n\n\n-----Output-----\n\nOutput two integers $j_1$ and $j_2$ ($1 \\le j_1,j_2 \\le m$, $j_1 \\ne j_2$) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nVasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer $p$ (which may be positive, negative, or zero). To combine their tastes, they invented $p$-binary numbers of the form $2^x + p$, where $x$ is a non-negative integer.\n\nFor example, some $-9$-binary (\"minus nine\" binary) numbers are: $-8$ (minus eight), $7$ and $1015$ ($-8=2^0-9$, $7=2^4-9$, $1015=2^{10}-9$).\n\nThe boys now use $p$-binary numbers to represent everything. They now face a problem: given a positive integer $n$, what's the smallest number of $p$-binary numbers (not necessarily distinct) they need to represent $n$ as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.\n\nFor example, if $p=0$ we can represent $7$ as $2^0 + 2^1 + 2^2$.\n\nAnd if $p=-9$ we can represent $7$ as one number $(2^4-9)$.\n\nNote that negative $p$-binary numbers are allowed to be in the sum (see the Notes section for an example).\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $p$ ($1 \\leq n \\leq 10^9$, $-1000 \\leq p \\leq 1000$).\n\n\n-----Output-----\n\nIf it is impossible to represent $n$ as the sum of any number of $p$-binary numbers, print a single integer $-1$. Otherwise, print the smallest possible number of summands.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOne very important person has a piece of paper in the form of a rectangle a \u00d7 b.\n\nAlso, he has n seals. Each seal leaves an impression on the paper in the form of a rectangle of the size x_{i} \u00d7 y_{i}. Each impression must be parallel to the sides of the piece of paper (but seal can be rotated by 90 degrees).\n\nA very important person wants to choose two different seals and put them two impressions. Each of the selected seals puts exactly one impression. Impressions should not overlap (but they can touch sides), and the total area occupied by them should be the largest possible. What is the largest area that can be occupied by two seals?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, a and b (1 \u2264 n, a, b \u2264 100).\n\nEach of the next n lines contain two numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 100).\n\n\n-----Output-----\n\nPrint the largest total area that can be occupied by two seals. If you can not select two seals, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^18, k \u2264 n)\u00a0\u2014 the number of sticks drawn by Sasha and the number k\u00a0\u2014 the number of sticks to be crossed out on each turn.\n\n\n-----Output-----\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOne very important person has a piece of paper in the form of a rectangle a \u00d7 b.\n\nAlso, he has n seals. Each seal leaves an impression on the paper in the form of a rectangle of the size x_{i} \u00d7 y_{i}. Each impression must be parallel to the sides of the piece of paper (but seal can be rotated by 90 degrees).\n\nA very important person wants to choose two different seals and put them two impressions. Each of the selected seals puts exactly one impression. Impressions should not overlap (but they can touch sides), and the total area occupied by them should be the largest possible. What is the largest area that can be occupied by two seals?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, a and b (1 \u2264 n, a, b \u2264 100).\n\nEach of the next n lines contain two numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 100).\n\n\n-----Output-----\n\nPrint the largest total area that can be occupied by two seals. If you can not select two seals, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nOn his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.\n\nThere are $n$ bricks lined in a row on the ground. Chouti has got $m$ paint buckets of different colors at hand, so he painted each brick in one of those $m$ colors.\n\nHaving finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are $k$ bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).\n\nSo as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first and only line contains three integers $n$, $m$ and $k$ ($1 \\leq n,m \\leq 2000, 0 \\leq k \\leq n-1$)\u00a0\u2014 the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of ways to color bricks modulo $998\\,244\\,353$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nOne very important person has a piece of paper in the form of a rectangle a \u00d7 b.\n\nAlso, he has n seals. Each seal leaves an impression on the paper in the form of a rectangle of the size x_{i} \u00d7 y_{i}. Each impression must be parallel to the sides of the piece of paper (but seal can be rotated by 90 degrees).\n\nA very important person wants to choose two different seals and put them two impressions. Each of the selected seals puts exactly one impression. Impressions should not overlap (but they can touch sides), and the total area occupied by them should be the largest possible. What is the largest area that can be occupied by two seals?\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, a and b (1 \u2264 n, a, b \u2264 100).\n\nEach of the next n lines contain two numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 100).\n\n\n-----Output-----\n\nPrint the largest total area that can be occupied by two seals. If you can not select two seals, print 0.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\n\n-----Input-----\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 5), where a_{i} is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 5), where b_{i} is academic performance of the i-th student of the group B.\n\n\n-----Output-----\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nLittle Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.\n\nAn unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.\n\nAfter her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.\n\nNote that she can paint tiles in any order she wants.\n\nGiven the required information, find the maximum\u00a0number of chocolates Joty can get.\n\n\n-----Input-----\n\nThe only line contains five integers n, a, b, p and q (1 \u2264 n, a, b, p, q \u2264 10^9).\n\n\n-----Output-----\n\nPrint the only integer s \u2014 the maximum number of chocolates Joty can get.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\n\n-----Input-----\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 10^6.\n\n\n-----Output-----\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe Berland State University is hosting a ballroom dance in celebration of its 100500-th anniversary! n boys and m girls are already busy rehearsing waltz, minuet, polonaise and quadrille moves.\n\nWe know that several boy&girl pairs are going to be invited to the ball. However, the partners' dancing skill in each pair must differ by at most one.\n\nFor each boy, we know his dancing skills. Similarly, for each girl we know her dancing skills. Write a code that can determine the largest possible number of pairs that can be formed from n boys and m girls.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of boys. The second line contains sequence a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100), where a_{i} is the i-th boy's dancing skill.\n\nSimilarly, the third line contains an integer m (1 \u2264 m \u2264 100) \u2014 the number of girls. The fourth line contains sequence b_1, b_2, ..., b_{m} (1 \u2264 b_{j} \u2264 100), where b_{j} is the j-th girl's dancing skill.\n\n\n-----Output-----\n\nPrint a single number \u2014 the required maximum possible number of pairs.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\n\n-----Input-----\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 10^6.\n\n\n-----Output-----\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAlice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are $n$ parties, numbered from $1$ to $n$. The $i$-th party has received $a_i$ seats in the parliament.\n\nAlice's party has number $1$. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil:   The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has $200$ (or $201$) seats, then the majority is $101$ or more seats.  Alice's party must have at least $2$ times more seats than any other party in the coalition. For example, to invite a party with $50$ seats, Alice's party must have at least $100$ seats. \n\nFor example, if $n=4$ and $a=[51, 25, 99, 25]$ (note that Alice'a party has $51$ seats), then the following set $[a_1=51, a_2=25, a_4=25]$ can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  $[a_2=25, a_3=99, a_4=25]$ since Alice's party is not there;  $[a_1=51, a_2=25]$ since coalition should have a strict majority;  $[a_1=51, a_2=25, a_3=99]$ since Alice's party should have at least $2$ times more seats than any other party in the coalition. \n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of parties.\n\nThe second line contains $n$ space separated integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 100$)\u00a0\u2014 the number of seats the $i$-th party has.\n\n\n-----Output-----\n\nIf no coalition satisfying both conditions is possible, output a single line with an integer $0$.\n\nOtherwise, suppose there are $k$ ($1 \\leq k \\leq n$) parties in the coalition (Alice does not have to minimise the number of parties in a coalition), and their indices are $c_1, c_2, \\dots, c_k$ ($1 \\leq c_i \\leq n$). Output two lines, first containing the integer $k$, and the second the space-separated indices $c_1, c_2, \\dots, c_k$. \n\nYou may print the parties in any order. Alice's party (number $1$) must be on that list. If there are multiple solutions, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nBerland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built $n$ commentary boxes. $m$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf $n$ is not divisible by $m$, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying $a$ burles and demolish a commentary box paying $b$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)?\n\n\n-----Input-----\n\nThe only line contains four integer numbers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 10^{12}$, $1 \\le a, b \\le 100$), where $n$ is the initial number of the commentary boxes, $m$ is the number of delegations to come, $a$ is the fee to build a box and $b$ is the fee to demolish a box.\n\n\n-----Output-----\n\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$). It is allowed that the final number of the boxes is equal to $0$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nYou are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\n\n-----Input-----\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 10^6.\n\n\n-----Output-----\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nRunning with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nTranslator's note: in Russia's most widespread grading system, there are four grades: 5, 4, 3, 2, the higher the better, roughly corresponding to A, B, C and F respectively in American grading system.\n\nThe term is coming to an end and students start thinking about their grades. Today, a professor told his students that the grades for his course would be given out automatically \u00a0\u2014 he would calculate the simple average (arithmetic mean) of all grades given out for lab works this term and round to the nearest integer. The rounding would be done in favour of the student\u00a0\u2014 $4.5$ would be rounded up to $5$ (as in example 3), but $4.4$ would be rounded down to $4$.\n\nThis does not bode well for Vasya who didn't think those lab works would influence anything, so he may receive a grade worse than $5$ (maybe even the dreaded $2$). However, the professor allowed him to redo some of his works of Vasya's choosing to increase his average grade. Vasya wants to redo as as few lab works as possible in order to get $5$ for the course. Of course, Vasya will get $5$ for the lab works he chooses to redo.\n\nHelp Vasya\u00a0\u2014 calculate the minimum amount of lab works Vasya has to redo.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$\u00a0\u2014 the number of Vasya's grades ($1 \\leq n \\leq 100$).\n\nThe second line contains $n$ integers from $2$ to $5$\u00a0\u2014 Vasya's grades for his lab works.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of lab works that Vasya has to redo. It can be shown that Vasya can always redo enough lab works to get a $5$.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i, \u00a0j, \u00a0k) (i < j < k), such that a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible, are there in the array? Help him with it!\n\n\n-----Input-----\n\nThe first line of input contains a positive integer number n\u00a0(3 \u2264 n \u2264 10^5) \u2014 the number of elements in array a. The second line contains n positive integer numbers a_{i}\u00a0(1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of a given array.\n\n\n-----Output-----\n\nPrint one number \u2014 the quantity of triples (i, \u00a0j, \u00a0k) such that i, \u00a0j and k are pairwise distinct and a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nIn Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\n\n-----Input-----\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 5), where a_{i} is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 5), where b_{i} is academic performance of the i-th student of the group B.\n\n\n-----Output-----\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nZane the wizard had never loved anyone before, until he fell in love with a girl, whose name remains unknown to us.\n\n [Image] \n\nThe girl lives in house m of a village. There are n houses in that village, lining in a straight line from left to right: house 1, house 2, ..., house n. The village is also well-structured: house i and house i + 1 (1 \u2264 i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a_1, a_2, ..., a_{n} that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then a_{i} equals 0. Otherwise, house i can be bought, and a_{i} represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\n\n-----Input-----\n\nThe first line contains three integers n, m, and k (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 100)\u00a0\u2014 the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 100)\u00a0\u2014 denoting the availability and the prices of the houses.\n\nIt is guaranteed that a_{m} = 0 and that it is possible to purchase some house with no more than k dollars.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum distance, in meters, from the house where the girl Zane likes lives to the house Zane can buy.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i, \u00a0j, \u00a0k) (i < j < k), such that a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible, are there in the array? Help him with it!\n\n\n-----Input-----\n\nThe first line of input contains a positive integer number n\u00a0(3 \u2264 n \u2264 10^5) \u2014 the number of elements in array a. The second line contains n positive integer numbers a_{i}\u00a0(1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of a given array.\n\n\n-----Output-----\n\nPrint one number \u2014 the quantity of triples (i, \u00a0j, \u00a0k) such that i, \u00a0j and k are pairwise distinct and a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nHongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp has created his own training plan to prepare for the programming contests. He will train for $n$ days, all days are numbered from $1$ to $n$, beginning from the first.\n\nOn the $i$-th day Polycarp will necessarily solve $a_i$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 200\\,000$) \u2014 the number of days to prepare for the programming contests.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10\\,000$), where $a_i$ equals to the number of problems, which Polycarp will solve on the $i$-th day.\n\n\n-----Output-----\n\nPrint the index of the day when Polycarp will celebrate the equator.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nAfter returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i, \u00a0j, \u00a0k) (i < j < k), such that a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible, are there in the array? Help him with it!\n\n\n-----Input-----\n\nThe first line of input contains a positive integer number n\u00a0(3 \u2264 n \u2264 10^5) \u2014 the number of elements in array a. The second line contains n positive integer numbers a_{i}\u00a0(1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of a given array.\n\n\n-----Output-----\n\nPrint one number \u2014 the quantity of triples (i, \u00a0j, \u00a0k) such that i, \u00a0j and k are pairwise distinct and a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLet's introduce some definitions that will be needed later.\n\nLet $prime(x)$ be the set of prime divisors of $x$. For example, $prime(140) = \\{ 2, 5, 7 \\}$, $prime(169) = \\{ 13 \\}$.\n\nLet $g(x, p)$ be the maximum possible integer $p^k$ where $k$ is an integer such that $x$ is divisible by $p^k$. For example:  $g(45, 3) = 9$ ($45$ is divisible by $3^2=9$ but not divisible by $3^3=27$),  $g(63, 7) = 7$ ($63$ is divisible by $7^1=7$ but not divisible by $7^2=49$). \n\nLet $f(x, y)$ be the product of $g(y, p)$ for all $p$ in $prime(x)$. For example:  $f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,  $f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$. \n\nYou have integers $x$ and $n$. Calculate $f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$.\n\n\n-----Input-----\n\nThe only line contains integers $x$ and $n$ ($2 \\le x \\le 10^{9}$, $1 \\le n \\le 10^{18}$)\u00a0\u2014 the numbers used in formula.\n\n\n-----Output-----\n\nPrint the answer.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nCarl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?\n\n\n-----Input-----\n\nThe first line of the input contains three integers a, b and c (0 \u2264 a, b, c \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that are in the magician's disposal.\n\nThe second line of the input contains three integers, x, y and z (0 \u2264 x, y, z \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that he needs to get.\n\n\n-----Output-----\n\nIf the wizard is able to obtain the required numbers of spheres, print \"Yes\". Otherwise, print \"No\".\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nThe weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.\n\nThe pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches $2 \\cdot x, 3 \\cdot x, \\ldots, \\lfloor \\frac{y}{x} \\rfloor \\cdot x$.\n\nKeeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.\n\nIn other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nPetya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n\nArithmetic progression is a sequence a_1, a_1 + d, a_1 + 2d, ..., a_1 + (n - 1)d, where a_1 and d are any numbers.\n\nGeometric progression is a sequence b_1, b_2 = b_1q, ..., b_{n} = b_{n} - 1q, where b_1 \u2260 0, q \u2260 0, q \u2260 1. \n\nHelp Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.\n\n\n-----Input-----\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.\n\n\n-----Output-----\n\nPrint the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element.\n\nPrint 42 if the given sequence is not an arithmetic or geometric progression.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nPolycarp has created his own training plan to prepare for the programming contests. He will train for $n$ days, all days are numbered from $1$ to $n$, beginning from the first.\n\nOn the $i$-th day Polycarp will necessarily solve $a_i$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 200\\,000$) \u2014 the number of days to prepare for the programming contests.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10\\,000$), where $a_i$ equals to the number of problems, which Polycarp will solve on the $i$-th day.\n\n\n-----Output-----\n\nPrint the index of the day when Polycarp will celebrate the equator.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAn accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIn a small but very proud high school it was decided to win ACM ICPC. This goal requires to compose as many teams of three as possible, but since there were only 6 students who wished to participate, the decision was to build exactly two teams.\n\nAfter practice competition, participant number i got a score of a_{i}. Team score is defined as sum of scores of its participants. High school management is interested if it's possible to build two teams with equal scores. Your task is to answer that question.\n\n\n-----Input-----\n\nThe single line contains six integers a_1, ..., a_6 (0 \u2264 a_{i} \u2264 1000) \u2014 scores of the participants\n\n\n-----Output-----\n\nPrint \"YES\" (quotes for clarity), if it is possible to build teams with equal score, and \"NO\" otherwise.\n\nYou can print each character either upper- or lowercase (\"YeS\" and \"yes\" are valid when the answer is \"YES\").\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nn children are standing in a circle and playing a game. Children's numbers in clockwise order form a permutation a_1, a_2, ..., a_{n} of length n. It is an integer sequence such that each integer from 1 to n appears exactly once in it.\n\nThe game consists of m steps. On each step the current leader with index i counts out a_{i} people in clockwise order, starting from the next person. The last one to be pointed at by the leader becomes the new leader.\n\nYou are given numbers l_1, l_2, ..., l_{m} \u2014 indices of leaders in the beginning of each step. Child with number l_1 is the first leader in the game. \n\nWrite a program which will restore a possible permutation a_1, a_2, ..., a_{n}. If there are multiple solutions then print any of them. If there is no solution then print -1.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, m (1 \u2264 n, m \u2264 100).\n\nThe second line contains m integer numbers l_1, l_2, ..., l_{m} (1 \u2264 l_{i} \u2264 n) \u2014 indices of leaders in the beginning of each step.\n\n\n-----Output-----\n\nPrint such permutation of n numbers a_1, a_2, ..., a_{n} that leaders in the game will be exactly l_1, l_2, ..., l_{m} if all the rules are followed. If there are multiple solutions print any of them. \n\nIf there is no permutation which satisfies all described conditions print -1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nThe only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nn children are standing in a circle and playing a game. Children's numbers in clockwise order form a permutation a_1, a_2, ..., a_{n} of length n. It is an integer sequence such that each integer from 1 to n appears exactly once in it.\n\nThe game consists of m steps. On each step the current leader with index i counts out a_{i} people in clockwise order, starting from the next person. The last one to be pointed at by the leader becomes the new leader.\n\nYou are given numbers l_1, l_2, ..., l_{m} \u2014 indices of leaders in the beginning of each step. Child with number l_1 is the first leader in the game. \n\nWrite a program which will restore a possible permutation a_1, a_2, ..., a_{n}. If there are multiple solutions then print any of them. If there is no solution then print -1.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, m (1 \u2264 n, m \u2264 100).\n\nThe second line contains m integer numbers l_1, l_2, ..., l_{m} (1 \u2264 l_{i} \u2264 n) \u2014 indices of leaders in the beginning of each step.\n\n\n-----Output-----\n\nPrint such permutation of n numbers a_1, a_2, ..., a_{n} that leaders in the game will be exactly l_1, l_2, ..., l_{m} if all the rules are followed. If there are multiple solutions print any of them. \n\nIf there is no permutation which satisfies all described conditions print -1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.\n\nThis means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats\u00a0\u2014 next day Vasya eats $k$ candies again, and Petya\u00a0\u2014 $10\\%$ of the candies left in a box, and so on.\n\nIf the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.\n\nYour task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^{18}$)\u00a0\u2014 the initial amount of candies in the box.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nn children are standing in a circle and playing a game. Children's numbers in clockwise order form a permutation a_1, a_2, ..., a_{n} of length n. It is an integer sequence such that each integer from 1 to n appears exactly once in it.\n\nThe game consists of m steps. On each step the current leader with index i counts out a_{i} people in clockwise order, starting from the next person. The last one to be pointed at by the leader becomes the new leader.\n\nYou are given numbers l_1, l_2, ..., l_{m} \u2014 indices of leaders in the beginning of each step. Child with number l_1 is the first leader in the game. \n\nWrite a program which will restore a possible permutation a_1, a_2, ..., a_{n}. If there are multiple solutions then print any of them. If there is no solution then print -1.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, m (1 \u2264 n, m \u2264 100).\n\nThe second line contains m integer numbers l_1, l_2, ..., l_{m} (1 \u2264 l_{i} \u2264 n) \u2014 indices of leaders in the beginning of each step.\n\n\n-----Output-----\n\nPrint such permutation of n numbers a_1, a_2, ..., a_{n} that leaders in the game will be exactly l_1, l_2, ..., l_{m} if all the rules are followed. If there are multiple solutions print any of them. \n\nIf there is no permutation which satisfies all described conditions print -1.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nTonio has a keyboard with only two letters, \"V\" and \"K\".\n\nOne day, he has typed out a string s with only these two letters. He really likes it when the string \"VK\" appears, so he wishes to change at most one letter in the string (or do no changes) to maximize the number of occurrences of that string. Compute the maximum number of times \"VK\" can appear as a substring (i.\u00a0e. a letter \"K\" right after a letter \"V\") in the resulting string.\n\n\n-----Input-----\n\nThe first line will contain a string s consisting only of uppercase English letters \"V\" and \"K\" with length not less than 1 and not greater than 100.\n\n\n-----Output-----\n\nOutput a single integer, the maximum number of times \"VK\" can appear as a substring of the given string after changing at most one character.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPetya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n\nArithmetic progression is a sequence a_1, a_1 + d, a_1 + 2d, ..., a_1 + (n - 1)d, where a_1 and d are any numbers.\n\nGeometric progression is a sequence b_1, b_2 = b_1q, ..., b_{n} = b_{n} - 1q, where b_1 \u2260 0, q \u2260 0, q \u2260 1. \n\nHelp Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.\n\n\n-----Input-----\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.\n\n\n-----Output-----\n\nPrint the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element.\n\nPrint 42 if the given sequence is not an arithmetic or geometric progression.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nKitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.\n\nEach apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.\n\nBut unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of apples. The second line contains n integers w_1, w_2, ..., w_{n} (w_{i} = 100 or w_{i} = 200), where w_{i} is the weight of the i-th apple.\n\n\n-----Output-----\n\nIn a single line print \"YES\" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print \"NO\" (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPetya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n\nArithmetic progression is a sequence a_1, a_1 + d, a_1 + 2d, ..., a_1 + (n - 1)d, where a_1 and d are any numbers.\n\nGeometric progression is a sequence b_1, b_2 = b_1q, ..., b_{n} = b_{n} - 1q, where b_1 \u2260 0, q \u2260 0, q \u2260 1. \n\nHelp Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.\n\n\n-----Input-----\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.\n\n\n-----Output-----\n\nPrint the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element.\n\nPrint 42 if the given sequence is not an arithmetic or geometric progression.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAfter returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i, \u00a0j, \u00a0k) (i < j < k), such that a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible, are there in the array? Help him with it!\n\n\n-----Input-----\n\nThe first line of input contains a positive integer number n\u00a0(3 \u2264 n \u2264 10^5) \u2014 the number of elements in array a. The second line contains n positive integer numbers a_{i}\u00a0(1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of a given array.\n\n\n-----Output-----\n\nPrint one number \u2014 the quantity of triples (i, \u00a0j, \u00a0k) such that i, \u00a0j and k are pairwise distinct and a_{i}\u00b7a_{j}\u00b7a_{k} is minimum possible.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nYou are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nPetya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n\nArithmetic progression is a sequence a_1, a_1 + d, a_1 + 2d, ..., a_1 + (n - 1)d, where a_1 and d are any numbers.\n\nGeometric progression is a sequence b_1, b_2 = b_1q, ..., b_{n} = b_{n} - 1q, where b_1 \u2260 0, q \u2260 0, q \u2260 1. \n\nHelp Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.\n\n\n-----Input-----\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.\n\n\n-----Output-----\n\nPrint the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element.\n\nPrint 42 if the given sequence is not an arithmetic or geometric progression.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nA large banner with word CODEFORCES was ordered for the 1000-th onsite round of Codeforces^{\u03c9} that takes place on the Miami beach. Unfortunately, the company that made the banner mixed up two orders and delivered somebody else's banner that contains someone else's word. The word on the banner consists only of upper-case English letters.\n\nThere is very little time to correct the mistake. All that we can manage to do is to cut out some substring from the banner, i.e. several consecutive letters. After that all the resulting parts of the banner will be glued into a single piece (if the beginning or the end of the original banner was cut out, only one part remains); it is not allowed change the relative order of parts of the banner (i.e. after a substring is cut, several first and last letters are left, it is allowed only to glue the last letters to the right of the first letters). Thus, for example, for example, you can cut a substring out from string 'TEMPLATE' and get string 'TEMPLE' (if you cut out string AT), 'PLATE' (if you cut out TEM), 'T' (if you cut out EMPLATE), etc.\n\nHelp the organizers of the round determine whether it is possible to cut out of the banner some substring in such a way that the remaining parts formed word CODEFORCES.\n\n\n-----Input-----\n\nThe single line of the input contains the word written on the banner. The word only consists of upper-case English letters. The word is non-empty and its length doesn't exceed 100 characters. It is guaranteed that the word isn't word CODEFORCES.\n\n\n-----Output-----\n\nPrint 'YES', if there exists a way to cut out the substring, and 'NO' otherwise (without the quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLittle Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".\n\nChris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process. [Image] \n\nGiven the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string s_{i} is equal to   \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed. \n\nIt is guaranteed that if s_{i} = s_{j} = \"L\" and i < j, then there exists such k that i < k < j and s_{k} = \"R\"; if s_{i} = s_{j} = \"R\" and i < j, then there exists such k that i < k < j and s_{k} = \"L\".\n\n\n-----Output-----\n\nOutput a single integer, the number of the dominoes that remain vertical at the end of the process.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIt's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nAnton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.\n\nAnton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. \n\nAnton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.\n\nAnton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, m, k (1 \u2264 n \u2264 2\u00b710^9, 1 \u2264 m, k \u2264 2\u00b710^5)\u00a0\u2014 the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 \u2264 x \u2264 2\u00b710^9, 1 \u2264 s \u2264 2\u00b710^9)\u00a0\u2014 the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers a_{i} (1 \u2264 a_{i} < x)\u00a0\u2014 the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers b_{i} (1 \u2264 b_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers c_{i} (1 \u2264 c_{i} \u2264 n) in the fifth line\u00a0\u2014 the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} \u2264 c_{j} if i < j.\n\nThe sixth line contains k integers d_{i} (1 \u2264 d_{i} \u2264 2\u00b710^9)\u00a0\u2014 the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} \u2264 d_{j} if i < j.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nNastya came to her informatics lesson, and her teacher who is, by the way, a little bit famous here gave her the following task.\n\nTwo matrices $A$ and $B$ are given, each of them has size $n \\times m$. Nastya can perform the following operation to matrix $A$ unlimited number of times:   take any square square submatrix of $A$ and transpose it (i.e. the element of the submatrix which was in the $i$-th row and $j$-th column of the submatrix will be in the $j$-th row and $i$-th column after transposing, and the transposed submatrix itself will keep its place in the matrix $A$). \n\nNastya's task is to check whether it is possible to transform the matrix $A$ to the matrix $B$.\n\n $\\left. \\begin{array}{|c|c|c|c|c|c|c|c|} \\hline 6 & {3} & {2} & {11} \\\\ \\hline 5 & {9} & {4} & {2} \\\\ \\hline 3 & {3} & {3} & {3} \\\\ \\hline 4 & {8} & {2} & {2} \\\\ \\hline 7 & {8} & {6} & {4} \\\\ \\hline \\end{array} \\right.$ Example of the operation \n\nAs it may require a lot of operations, you are asked to answer this question for Nastya.\n\nA square submatrix of matrix $M$ is a matrix which consist of all elements which comes from one of the rows with indeces $x, x+1, \\dots, x+k-1$ of matrix $M$ and comes from one of the columns with indeces $y, y+1, \\dots, y+k-1$ of matrix $M$. $k$ is the size of square submatrix. In other words, square submatrix is the set of elements of source matrix which form a solid square (i.e. without holes).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ separated by space ($1 \\leq n, m \\leq 500$)\u00a0\u2014 the numbers of rows and columns in $A$ and $B$ respectively.\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $A$ ($1 \\leq A_{ij} \\leq 10^{9}$).\n\nEach of the next $n$ lines contains $m$ integers, the $j$-th number in the $i$-th of these lines denotes the $j$-th element of the $i$-th row of the matrix $B$ ($1 \\leq B_{ij} \\leq 10^{9}$).\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if it is possible to transform $A$ to $B$ and \"NO\" (without quotes) otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n"}
{"anchor": "'''\nIlya lives in a beautiful city of Chordalsk.\n\nThere are $n$ houses on the street Ilya lives, they are numerated from $1$ to $n$ from left to right; the distance between every two neighboring houses is equal to $1$ unit. The neighboring houses are $1$ and $2$, $2$ and $3$, ..., $n-1$ and $n$. The houses $n$ and $1$ are not neighboring.\n\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\n\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$, and they have different colors: $c_i \\neq c_j$. He will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\n\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\n\nHelp Ilya, find this maximum possible distance.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\n'''\ndef solution(stdin: str) -> str:\n", "positive": "'''\nLuba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n'''\ndef solution(stdin: str) -> str:\n", "negative": "'''\nIvan is collecting coins. There are only $N$ different collectible coins, Ivan has $K$ of them. He will be celebrating his birthday soon, so all his $M$ freinds decided to gift him coins. They all agreed to three terms:  Everyone must gift as many coins as others. All coins given to Ivan must be different. Not less than $L$ coins from gifts altogether, must be new in Ivan's collection.\n\nBut his friends don't know which coins have Ivan already got in his collection. They don't want to spend money so they want to buy minimum quantity of coins, that satisfy all terms, irrespective of the Ivan's collection. Help them to find this minimum number of coins or define it's not possible to meet all the terms.\n\n\n-----Input-----\n\nThe only line of input contains 4 integers $N$, $M$, $K$, $L$ ($1 \\le K \\le N \\le 10^{18}$; $1 \\le M, \\,\\, L \\le 10^{18}$)\u00a0\u2014 quantity of different coins, number of Ivan's friends, size of Ivan's collection and quantity of coins, that must be new in Ivan's collection.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 minimal number of coins one friend can gift to satisfy all the conditions. If it is impossible to satisfy all three conditions print \"-1\" (without quotes).\n\n'''\ndef solution(stdin: str) -> str:\n"}
